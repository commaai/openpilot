// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: legacy.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9811e1f38f62f2d1);
CAPNP_DECLARE_SCHEMA(c08240f996aefced);
CAPNP_DECLARE_SCHEMA(88dcce08ad29dda0);
CAPNP_DECLARE_SCHEMA(9917470acf94d285);
enum class App_9917470acf94d285: uint16_t {
  HOME,
  MUSIC,
  NAV,
  SETTINGS,
  NONE,
};
CAPNP_DECLARE_ENUM(App, 9917470acf94d285);
CAPNP_DECLARE_SCHEMA(8afd33dc9b35e1aa);
CAPNP_DECLARE_SCHEMA(a99a9d5b33cf5859);
CAPNP_DECLARE_SCHEMA(cff7566681c277ce);
CAPNP_DECLARE_SCHEMA(d4df5a192382ba0b);
CAPNP_DECLARE_SCHEMA(cb6a279f015f6b51);
enum class ChannelWidth_cb6a279f015f6b51: uint16_t {
  W20_MHZ,
  W40_MHZ,
  W80_MHZ,
  W160_MHZ,
  W80_PLUS80_MHZ,
};
CAPNP_DECLARE_ENUM(ChannelWidth, cb6a279f015f6b51);
CAPNP_DECLARE_SCHEMA(94b7baa90c5c321e);
CAPNP_DECLARE_SCHEMA(b8aad62cffef28a9);
CAPNP_DECLARE_SCHEMA(8817eeea389e9f08);
CAPNP_DECLARE_SCHEMA(d1c9bef96d26fa91);
CAPNP_DECLARE_SCHEMA(a26e3710efd3e914);
CAPNP_DECLARE_SCHEMA(9744f25fb60f2bf8);
CAPNP_DECLARE_SCHEMA(f98f999c6a071122);
CAPNP_DECLARE_SCHEMA(c25bbbd524983447);
CAPNP_DECLARE_SCHEMA(e10e21168db0c7f7);
CAPNP_DECLARE_SCHEMA(ab54c59699f8f9f3);
CAPNP_DECLARE_SCHEMA(f5ad1d90cdc1dd6b);
CAPNP_DECLARE_SCHEMA(90c8426c3eaddd3b);
CAPNP_DECLARE_SCHEMA(e8db07dcf8fcea05);
enum class Type_e8db07dcf8fcea05: uint16_t {
  NONE,
  LANE_CHANGE_LEFT,
  LANE_CHANGE_RIGHT,
  MERGE_LEFT,
  MERGE_RIGHT,
  TURN_LEFT,
  TURN_RIGHT,
};
CAPNP_DECLARE_ENUM(Type, e8db07dcf8fcea05);
CAPNP_DECLARE_SCHEMA(b9aa88c75ef99a1f);
enum class Status_b9aa88c75ef99a1f: uint16_t {
  NONE,
  PASSIVE,
  APPROACHING,
  ACTIVE,
};
CAPNP_DECLARE_ENUM(Status, b9aa88c75ef99a1f);
CAPNP_DECLARE_SCHEMA(b99b2bc7a57e8128);
CAPNP_DECLARE_SCHEMA(943dc4625473b03f);
CAPNP_DECLARE_SCHEMA(c871d3cc252af657);
enum class SensorSource_c871d3cc252af657: uint16_t {
  APPLANIX,
  KALMAN,
  ORBSLAM,
  TIMING,
  DUMMY,
};
CAPNP_DECLARE_ENUM(SensorSource, c871d3cc252af657);
CAPNP_DECLARE_SCHEMA(d7700859ed1f5b76);
CAPNP_DECLARE_SCHEMA(cd60164a8a0159ef);
CAPNP_DECLARE_SCHEMA(d500d30c5803fa4f);
CAPNP_DECLARE_SCHEMA(c8233c0345e27e24);
CAPNP_DECLARE_SCHEMA(92e21bb7ea38793a);
CAPNP_DECLARE_SCHEMA(9b326d4e436afec7);
CAPNP_DECLARE_SCHEMA(8fdfadb254ea867a);
CAPNP_DECLARE_SCHEMA(bd8822120928120c);
CAPNP_DECLARE_SCHEMA(ce7cd672cacc7814);
CAPNP_DECLARE_SCHEMA(db98be6565516acb);
CAPNP_DECLARE_SCHEMA(9eaef9187cadbb9b);
CAPNP_DECLARE_SCHEMA(a5b39b4fc4d7da3f);
CAPNP_DECLARE_SCHEMA(c5417a637451246f);
enum class Instruction_c5417a637451246f: uint16_t {
  TURN_LEFT,
  TURN_RIGHT,
  KEEP_LEFT,
  KEEP_RIGHT,
  STRAIGHT,
  ROUNDABOUT_EXIT_NUMBER,
  ROUNDABOUT_EXIT,
  ROUNDABOUT_TURN_LEFT,
  UNKN8,
  ROUNDABOUT_STRAIGHT,
  UNKN10,
  ROUNDABOUT_TURN_RIGHT,
  UNKN12,
  ROUNDABOUT_UTURN,
  UNKN14,
  ARRIVE,
  EXIT_LEFT,
  EXIT_RIGHT,
  UNKN18,
  UTURN,
};
CAPNP_DECLARE_ENUM(Instruction, c5417a637451246f);
CAPNP_DECLARE_SCHEMA(acfa74a094e62626);
CAPNP_DECLARE_SCHEMA(d85d75253435bf4b);
enum class Type_d85d75253435bf4b: uint16_t {
  STOP_SIGN,
  LIGHT_RED,
  LIGHT_YELLOW,
  LIGHT_GREEN,
  STOP_LIGHT,
};
CAPNP_DECLARE_ENUM(Type, d85d75253435bf4b);
CAPNP_DECLARE_SCHEMA(a6f6ce72165ccb49);
enum class Action_a6f6ce72165ccb49: uint16_t {
  NONE,
  YIELD,
  STOP,
  RESUME_READY,
};
CAPNP_DECLARE_ENUM(Action, a6f6ce72165ccb49);
CAPNP_DECLARE_SCHEMA(dfdf30d03fc485bd);
CAPNP_DECLARE_SCHEMA(a20710d4f428d6cd);
CAPNP_DECLARE_SCHEMA(a0e27b453a38f450);
CAPNP_DECLARE_SCHEMA(d949bf717d77614d);
CAPNP_DECLARE_SCHEMA(9ef1f3ff0deb5ffb);
enum class Constellation_9ef1f3ff0deb5ffb: uint16_t {
  UNKNOWN,
  GPS,
  SBAS,
  GLONASS,
  QZSS,
  BEIDOU,
  GALILEO,
};
CAPNP_DECLARE_ENUM(Constellation, 9ef1f3ff0deb5ffb);
CAPNP_DECLARE_SCHEMA(cbb9490adce12d72);
enum class State_cbb9490adce12d72: uint16_t {
  UNKNOWN,
  CODE_LOCK,
  BIT_SYNC,
  SUBFRAME_SYNC,
  TOW_DECODED,
  MSEC_AMBIGUOUS,
  SYMBOL_SYNC,
  GLO_STRING_SYNC,
  GLO_TOD_DECODED,
  BDS_D2_BIT_SYNC,
  BDS_D2_SUBFRAME_SYNC,
  GAL_E1BC_CODE_LOCK,
  GAL_E1C2ND_CODE_LOCK,
  GAL_E1B_PAGE_SYNC,
  SBAS_SYNC,
};
CAPNP_DECLARE_ENUM(State, cbb9490adce12d72);
CAPNP_DECLARE_SCHEMA(c04e7b6231d4caa8);
enum class MultipathIndicator_c04e7b6231d4caa8: uint16_t {
  UNKNOWN,
  DETECTED,
  NOT_DETECTED,
};
CAPNP_DECLARE_ENUM(MultipathIndicator, c04e7b6231d4caa8);
CAPNP_DECLARE_SCHEMA(e2517b083095fd4e);
CAPNP_DECLARE_SCHEMA(ec1ff7996b35366f);
enum class Status_ec1ff7996b35366f: uint16_t {
  UNKNOWN,
  PARITY_PASSED,
  PARITY_REBUILT,
};
CAPNP_DECLARE_ENUM(Status, ec1ff7996b35366f);
CAPNP_DECLARE_SCHEMA(e3d6685d4e9d8f7a);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct LogRotate {
  LogRotate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9811e1f38f62f2d1, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveUI {
  LiveUI() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c08240f996aefced, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UiLayoutState {
  UiLayoutState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::App_9917470acf94d285 App;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88dcce08ad29dda0, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbslamCorrection {
  OrbslamCorrection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8afd33dc9b35e1aa, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EthernetPacket {
  EthernetPacket() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a99a9d5b33cf5859, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CellInfo {
  CellInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cff7566681c277ce, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WifiScan {
  WifiScan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ChannelWidth_cb6a279f015f6b51 ChannelWidth;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4df5a192382ba0b, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveEventData {
  LiveEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94b7baa90c5c321e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData {
  ModelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PathData;
  struct LeadData;
  struct ModelSettings;
  struct MetaData;
  struct LongitudinalData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8aad62cffef28a9, 4, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::PathData {
  PathData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8817eeea389e9f08, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1c9bef96d26fa91, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::ModelSettings {
  ModelSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a26e3710efd3e914, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::MetaData {
  MetaData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9744f25fb60f2bf8, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::LongitudinalData {
  LongitudinalData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f98f999c6a071122, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ECEFPoint {
  ECEFPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c25bbbd524983447, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ECEFPointDEPRECATED {
  ECEFPointDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e10e21168db0c7f7, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GPSPlannerPoints {
  GPSPlannerPoints() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab54c59699f8f9f3, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GPSPlannerPlan {
  GPSPlannerPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5ad1d90cdc1dd6b, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UiNavigationEvent {
  UiNavigationEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e8db07dcf8fcea05 Type;

  typedef ::capnp::schemas::Status_b9aa88c75ef99a1f Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90c8426c3eaddd3b, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationData {
  LiveLocationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Accuracy;
  typedef ::capnp::schemas::SensorSource_c871d3cc252af657 SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b99b2bc7a57e8128, 10, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationData::Accuracy {
  Accuracy() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(943dc4625473b03f, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbOdometry {
  OrbOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7700859ed1f5b76, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbFeatures {
  OrbFeatures() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd60164a8a0159ef, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbFeaturesSummary {
  OrbFeaturesSummary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d500d30c5803fa4f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbKeyFrame {
  OrbKeyFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8233c0345e27e24, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct KalmanOdometry {
  KalmanOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92e21bb7ea38793a, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbObservation {
  OrbObservation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b326d4e436afec7, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CalibrationFeatures {
  CalibrationFeatures() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fdfadb254ea867a, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavStatus {
  NavStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Address;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd8822120928120c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavStatus::Address {
  Address() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce7cd672cacc7814, 2, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavUpdate {
  NavUpdate() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LatLng;
  struct Segment;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db98be6565516acb, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavUpdate::LatLng {
  LatLng() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9eaef9187cadbb9b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavUpdate::Segment {
  Segment() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Instruction_c5417a637451246f Instruction;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5b39b4fc4d7da3f, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficEvent {
  TrafficEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_d85d75253435bf4b Type;

  typedef ::capnp::schemas::Action_a6f6ce72165ccb49 Action;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(acfa74a094e62626, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss {
  AndroidGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENTS,
    NAVIGATION_MESSAGE,
  };
  struct Measurements;
  struct NavigationMessage;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfdf30d03fc485bd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::Measurements {
  Measurements() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Clock;
  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a20710d4f428d6cd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::Measurements::Clock {
  Clock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0e27b453a38f450, 9, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::Measurements::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Constellation_9ef1f3ff0deb5ffb Constellation;

  typedef ::capnp::schemas::State_cbb9490adce12d72 State;

  typedef ::capnp::schemas::MultipathIndicator_c04e7b6231d4caa8 MultipathIndicator;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d949bf717d77614d, 15, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::NavigationMessage {
  NavigationMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_ec1ff7996b35366f Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2517b083095fd4e, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LidarPts {
  LidarPts() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3d6685d4e9d8f7a, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class LogRotate::Reader {
public:
  typedef LogRotate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSegmentNum() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LogRotate::Builder {
public:
  typedef LogRotate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSegmentNum();
  inline void setSegmentNum( ::int32_t value);

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LogRotate::Pipeline {
public:
  typedef LogRotate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveUI::Reader {
public:
  typedef LiveUI Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getRearViewCam() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline float getAwarenessStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveUI::Builder {
public:
  typedef LiveUI Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getRearViewCam();
  inline void setRearViewCam(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveUI::Pipeline {
public:
  typedef LiveUI Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiLayoutState::Reader {
public:
  typedef UiLayoutState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiLayoutState::App getActiveApp() const;

  inline bool getSidebarCollapsed() const;

  inline bool getMapEnabled() const;

  inline bool getMockEngaged() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiLayoutState::Builder {
public:
  typedef UiLayoutState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiLayoutState::App getActiveApp();
  inline void setActiveApp( ::cereal::UiLayoutState::App value);

  inline bool getSidebarCollapsed();
  inline void setSidebarCollapsed(bool value);

  inline bool getMapEnabled();
  inline void setMapEnabled(bool value);

  inline bool getMockEngaged();
  inline void setMockEngaged(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiLayoutState::Pipeline {
public:
  typedef UiLayoutState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbslamCorrection::Reader {
public:
  typedef OrbslamCorrection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCorrectionMonoTime() const;

  inline bool hasPrePositionECEF() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getPrePositionECEF() const;

  inline bool hasPostPositionECEF() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getPostPositionECEF() const;

  inline bool hasPrePoseQuatECEF() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPrePoseQuatECEF() const;

  inline bool hasPostPoseQuatECEF() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPostPoseQuatECEF() const;

  inline  ::uint32_t getNumInliers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbslamCorrection::Builder {
public:
  typedef OrbslamCorrection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCorrectionMonoTime();
  inline void setCorrectionMonoTime( ::uint64_t value);

  inline bool hasPrePositionECEF();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getPrePositionECEF();
  inline void setPrePositionECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrePositionECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initPrePositionECEF(unsigned int size);
  inline void adoptPrePositionECEF(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownPrePositionECEF();

  inline bool hasPostPositionECEF();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getPostPositionECEF();
  inline void setPostPositionECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPostPositionECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initPostPositionECEF(unsigned int size);
  inline void adoptPostPositionECEF(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownPostPositionECEF();

  inline bool hasPrePoseQuatECEF();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPrePoseQuatECEF();
  inline void setPrePoseQuatECEF( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrePoseQuatECEF(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPrePoseQuatECEF(unsigned int size);
  inline void adoptPrePoseQuatECEF(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPrePoseQuatECEF();

  inline bool hasPostPoseQuatECEF();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPostPoseQuatECEF();
  inline void setPostPoseQuatECEF( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPostPoseQuatECEF(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPostPoseQuatECEF(unsigned int size);
  inline void adoptPostPoseQuatECEF(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPostPoseQuatECEF();

  inline  ::uint32_t getNumInliers();
  inline void setNumInliers( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbslamCorrection::Pipeline {
public:
  typedef OrbslamCorrection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EthernetPacket::Reader {
public:
  typedef EthernetPacket Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPkt() const;
  inline  ::capnp::Data::Reader getPkt() const;

  inline float getTs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EthernetPacket::Builder {
public:
  typedef EthernetPacket Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPkt();
  inline  ::capnp::Data::Builder getPkt();
  inline void setPkt( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPkt(unsigned int size);
  inline void adoptPkt(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPkt();

  inline float getTs();
  inline void setTs(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EthernetPacket::Pipeline {
public:
  typedef EthernetPacket Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CellInfo::Reader {
public:
  typedef CellInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasRepr() const;
  inline  ::capnp::Text::Reader getRepr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CellInfo::Builder {
public:
  typedef CellInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasRepr();
  inline  ::capnp::Text::Builder getRepr();
  inline void setRepr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRepr(unsigned int size);
  inline void adoptRepr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRepr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CellInfo::Pipeline {
public:
  typedef CellInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WifiScan::Reader {
public:
  typedef WifiScan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBssid() const;
  inline  ::capnp::Text::Reader getBssid() const;

  inline bool hasSsid() const;
  inline  ::capnp::Text::Reader getSsid() const;

  inline bool hasCapabilities() const;
  inline  ::capnp::Text::Reader getCapabilities() const;

  inline  ::int32_t getFrequency() const;

  inline  ::int32_t getLevel() const;

  inline  ::int64_t getTimestamp() const;

  inline  ::int32_t getCenterFreq0() const;

  inline  ::int32_t getCenterFreq1() const;

  inline  ::cereal::WifiScan::ChannelWidth getChannelWidth() const;

  inline bool hasOperatorFriendlyName() const;
  inline  ::capnp::Text::Reader getOperatorFriendlyName() const;

  inline bool hasVenueName() const;
  inline  ::capnp::Text::Reader getVenueName() const;

  inline bool getIs80211mcResponder() const;

  inline bool getPasspoint() const;

  inline  ::int32_t getDistanceCm() const;

  inline  ::int32_t getDistanceSdCm() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WifiScan::Builder {
public:
  typedef WifiScan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBssid();
  inline  ::capnp::Text::Builder getBssid();
  inline void setBssid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBssid(unsigned int size);
  inline void adoptBssid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBssid();

  inline bool hasSsid();
  inline  ::capnp::Text::Builder getSsid();
  inline void setSsid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSsid(unsigned int size);
  inline void adoptSsid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSsid();

  inline bool hasCapabilities();
  inline  ::capnp::Text::Builder getCapabilities();
  inline void setCapabilities( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCapabilities(unsigned int size);
  inline void adoptCapabilities(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCapabilities();

  inline  ::int32_t getFrequency();
  inline void setFrequency( ::int32_t value);

  inline  ::int32_t getLevel();
  inline void setLevel( ::int32_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::int32_t getCenterFreq0();
  inline void setCenterFreq0( ::int32_t value);

  inline  ::int32_t getCenterFreq1();
  inline void setCenterFreq1( ::int32_t value);

  inline  ::cereal::WifiScan::ChannelWidth getChannelWidth();
  inline void setChannelWidth( ::cereal::WifiScan::ChannelWidth value);

  inline bool hasOperatorFriendlyName();
  inline  ::capnp::Text::Builder getOperatorFriendlyName();
  inline void setOperatorFriendlyName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOperatorFriendlyName(unsigned int size);
  inline void adoptOperatorFriendlyName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOperatorFriendlyName();

  inline bool hasVenueName();
  inline  ::capnp::Text::Builder getVenueName();
  inline void setVenueName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVenueName(unsigned int size);
  inline void adoptVenueName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVenueName();

  inline bool getIs80211mcResponder();
  inline void setIs80211mcResponder(bool value);

  inline bool getPasspoint();
  inline void setPasspoint(bool value);

  inline  ::int32_t getDistanceCm();
  inline void setDistanceCm( ::int32_t value);

  inline  ::int32_t getDistanceSdCm();
  inline void setDistanceSdCm( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WifiScan::Pipeline {
public:
  typedef WifiScan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveEventData::Reader {
public:
  typedef LiveEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int32_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveEventData::Builder {
public:
  typedef LiveEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int32_t getValue();
  inline void setValue( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveEventData::Pipeline {
public:
  typedef LiveEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::Reader {
public:
  typedef ModelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasPath() const;
  inline  ::cereal::ModelData::PathData::Reader getPath() const;

  inline bool hasLeftLane() const;
  inline  ::cereal::ModelData::PathData::Reader getLeftLane() const;

  inline bool hasRightLane() const;
  inline  ::cereal::ModelData::PathData::Reader getRightLane() const;

  inline bool hasLead() const;
  inline  ::cereal::ModelData::LeadData::Reader getLead() const;

  inline bool hasSettings() const;
  inline  ::cereal::ModelData::ModelSettings::Reader getSettings() const;

  inline bool hasFreePath() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFreePath() const;

  inline bool hasLeadFuture() const;
  inline  ::cereal::ModelData::LeadData::Reader getLeadFuture() const;

  inline bool hasSpeed() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSpeed() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasMeta() const;
  inline  ::cereal::ModelData::MetaData::Reader getMeta() const;

  inline bool hasLongitudinal() const;
  inline  ::cereal::ModelData::LongitudinalData::Reader getLongitudinal() const;

  inline  ::uint32_t getFrameAge() const;

  inline float getFrameDropPerc() const;

  inline float getModelExecutionTime() const;

  inline bool hasRawPred() const;
  inline  ::capnp::Data::Reader getRawPred() const;

  inline float getGpuExecutionTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::Builder {
public:
  typedef ModelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasPath();
  inline  ::cereal::ModelData::PathData::Builder getPath();
  inline void setPath( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownPath();

  inline bool hasLeftLane();
  inline  ::cereal::ModelData::PathData::Builder getLeftLane();
  inline void setLeftLane( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initLeftLane();
  inline void adoptLeftLane(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownLeftLane();

  inline bool hasRightLane();
  inline  ::cereal::ModelData::PathData::Builder getRightLane();
  inline void setRightLane( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initRightLane();
  inline void adoptRightLane(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownRightLane();

  inline bool hasLead();
  inline  ::cereal::ModelData::LeadData::Builder getLead();
  inline void setLead( ::cereal::ModelData::LeadData::Reader value);
  inline  ::cereal::ModelData::LeadData::Builder initLead();
  inline void adoptLead(::capnp::Orphan< ::cereal::ModelData::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LeadData> disownLead();

  inline bool hasSettings();
  inline  ::cereal::ModelData::ModelSettings::Builder getSettings();
  inline void setSettings( ::cereal::ModelData::ModelSettings::Reader value);
  inline  ::cereal::ModelData::ModelSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::cereal::ModelData::ModelSettings>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::ModelSettings> disownSettings();

  inline bool hasFreePath();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFreePath();
  inline void setFreePath( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFreePath(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFreePath(unsigned int size);
  inline void adoptFreePath(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFreePath();

  inline bool hasLeadFuture();
  inline  ::cereal::ModelData::LeadData::Builder getLeadFuture();
  inline void setLeadFuture( ::cereal::ModelData::LeadData::Reader value);
  inline  ::cereal::ModelData::LeadData::Builder initLeadFuture();
  inline void adoptLeadFuture(::capnp::Orphan< ::cereal::ModelData::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LeadData> disownLeadFuture();

  inline bool hasSpeed();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSpeed();
  inline void setSpeed( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpeed(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSpeed(unsigned int size);
  inline void adoptSpeed(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSpeed();

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasMeta();
  inline  ::cereal::ModelData::MetaData::Builder getMeta();
  inline void setMeta( ::cereal::ModelData::MetaData::Reader value);
  inline  ::cereal::ModelData::MetaData::Builder initMeta();
  inline void adoptMeta(::capnp::Orphan< ::cereal::ModelData::MetaData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::MetaData> disownMeta();

  inline bool hasLongitudinal();
  inline  ::cereal::ModelData::LongitudinalData::Builder getLongitudinal();
  inline void setLongitudinal( ::cereal::ModelData::LongitudinalData::Reader value);
  inline  ::cereal::ModelData::LongitudinalData::Builder initLongitudinal();
  inline void adoptLongitudinal(::capnp::Orphan< ::cereal::ModelData::LongitudinalData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LongitudinalData> disownLongitudinal();

  inline  ::uint32_t getFrameAge();
  inline void setFrameAge( ::uint32_t value);

  inline float getFrameDropPerc();
  inline void setFrameDropPerc(float value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline bool hasRawPred();
  inline  ::capnp::Data::Builder getRawPred();
  inline void setRawPred( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawPred(unsigned int size);
  inline void adoptRawPred(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawPred();

  inline float getGpuExecutionTime();
  inline void setGpuExecutionTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::Pipeline {
public:
  typedef ModelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelData::PathData::Pipeline getPath();
  inline  ::cereal::ModelData::PathData::Pipeline getLeftLane();
  inline  ::cereal::ModelData::PathData::Pipeline getRightLane();
  inline  ::cereal::ModelData::LeadData::Pipeline getLead();
  inline  ::cereal::ModelData::ModelSettings::Pipeline getSettings();
  inline  ::cereal::ModelData::LeadData::Pipeline getLeadFuture();
  inline  ::cereal::ModelData::MetaData::Pipeline getMeta();
  inline  ::cereal::ModelData::LongitudinalData::Pipeline getLongitudinal();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::PathData::Reader {
public:
  typedef PathData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPoints() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPoints() const;

  inline float getProb() const;

  inline float getStd() const;

  inline bool hasStds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getStds() const;

  inline bool hasPoly() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPoly() const;

  inline float getValidLen() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::PathData::Builder {
public:
  typedef PathData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPoints();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPoints();
  inline void setPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPoints(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPoints();

  inline float getProb();
  inline void setProb(float value);

  inline float getStd();
  inline void setStd(float value);

  inline bool hasStds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getStds();
  inline void setStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initStds(unsigned int size);
  inline void adoptStds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownStds();

  inline bool hasPoly();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPoly();
  inline void setPoly( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPoly(unsigned int size);
  inline void adoptPoly(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPoly();

  inline float getValidLen();
  inline void setValidLen(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::PathData::Pipeline {
public:
  typedef PathData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDist() const;

  inline float getProb() const;

  inline float getStd() const;

  inline float getRelVel() const;

  inline float getRelVelStd() const;

  inline float getRelY() const;

  inline float getRelYStd() const;

  inline float getRelA() const;

  inline float getRelAStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDist();
  inline void setDist(float value);

  inline float getProb();
  inline void setProb(float value);

  inline float getStd();
  inline void setStd(float value);

  inline float getRelVel();
  inline void setRelVel(float value);

  inline float getRelVelStd();
  inline void setRelVelStd(float value);

  inline float getRelY();
  inline void setRelY(float value);

  inline float getRelYStd();
  inline void setRelYStd(float value);

  inline float getRelA();
  inline void setRelA(float value);

  inline float getRelAStd();
  inline void setRelAStd(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::ModelSettings::Reader {
public:
  typedef ModelSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBigBoxX() const;

  inline  ::uint16_t getBigBoxY() const;

  inline  ::uint16_t getBigBoxWidth() const;

  inline  ::uint16_t getBigBoxHeight() const;

  inline bool hasBoxProjection() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBoxProjection() const;

  inline bool hasYuvCorrection() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYuvCorrection() const;

  inline bool hasInputTransform() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getInputTransform() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::ModelSettings::Builder {
public:
  typedef ModelSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBigBoxX();
  inline void setBigBoxX( ::uint16_t value);

  inline  ::uint16_t getBigBoxY();
  inline void setBigBoxY( ::uint16_t value);

  inline  ::uint16_t getBigBoxWidth();
  inline void setBigBoxWidth( ::uint16_t value);

  inline  ::uint16_t getBigBoxHeight();
  inline void setBigBoxHeight( ::uint16_t value);

  inline bool hasBoxProjection();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBoxProjection();
  inline void setBoxProjection( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBoxProjection(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBoxProjection(unsigned int size);
  inline void adoptBoxProjection(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBoxProjection();

  inline bool hasYuvCorrection();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYuvCorrection();
  inline void setYuvCorrection( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYuvCorrection(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYuvCorrection(unsigned int size);
  inline void adoptYuvCorrection(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYuvCorrection();

  inline bool hasInputTransform();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getInputTransform();
  inline void setInputTransform( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInputTransform(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initInputTransform(unsigned int size);
  inline void adoptInputTransform(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownInputTransform();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::ModelSettings::Pipeline {
public:
  typedef ModelSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::MetaData::Reader {
public:
  typedef MetaData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getEngagedProb() const;

  inline bool hasDesirePrediction() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesirePrediction() const;

  inline float getBrakeDisengageProb() const;

  inline float getGasDisengageProb() const;

  inline float getSteerOverrideProb() const;

  inline bool hasDesireState() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesireState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::MetaData::Builder {
public:
  typedef MetaData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getEngagedProb();
  inline void setEngagedProb(float value);

  inline bool hasDesirePrediction();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesirePrediction();
  inline void setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesirePrediction(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesirePrediction(unsigned int size);
  inline void adoptDesirePrediction(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesirePrediction();

  inline float getBrakeDisengageProb();
  inline void setBrakeDisengageProb(float value);

  inline float getGasDisengageProb();
  inline void setGasDisengageProb(float value);

  inline float getSteerOverrideProb();
  inline void setSteerOverrideProb(float value);

  inline bool hasDesireState();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesireState();
  inline void setDesireState( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesireState(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesireState(unsigned int size);
  inline void adoptDesireState(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesireState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::MetaData::Pipeline {
public:
  typedef MetaData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::LongitudinalData::Reader {
public:
  typedef LongitudinalData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSpeeds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSpeeds() const;

  inline bool hasAccelerations() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAccelerations() const;

  inline bool hasDistances() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDistances() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::LongitudinalData::Builder {
public:
  typedef LongitudinalData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSpeeds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSpeeds();
  inline void setSpeeds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpeeds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSpeeds(unsigned int size);
  inline void adoptSpeeds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSpeeds();

  inline bool hasAccelerations();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAccelerations();
  inline void setAccelerations( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAccelerations(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAccelerations(unsigned int size);
  inline void adoptAccelerations(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAccelerations();

  inline bool hasDistances();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDistances();
  inline void setDistances( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDistances(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDistances(unsigned int size);
  inline void adoptDistances(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDistances();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::LongitudinalData::Pipeline {
public:
  typedef LongitudinalData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ECEFPoint::Reader {
public:
  typedef ECEFPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ECEFPoint::Builder {
public:
  typedef ECEFPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ECEFPoint::Pipeline {
public:
  typedef ECEFPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ECEFPointDEPRECATED::Reader {
public:
  typedef ECEFPointDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ECEFPointDEPRECATED::Builder {
public:
  typedef ECEFPointDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ECEFPointDEPRECATED::Pipeline {
public:
  typedef ECEFPointDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSPlannerPoints::Reader {
public:
  typedef GPSPlannerPoints Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCurPosDEPRECATED() const;
  inline  ::cereal::ECEFPointDEPRECATED::Reader getCurPosDEPRECATED() const;

  inline bool hasPointsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getPointsDEPRECATED() const;

  inline bool getValid() const;

  inline bool hasTrackName() const;
  inline  ::capnp::Text::Reader getTrackName() const;

  inline float getSpeedLimit() const;

  inline float getAccelTarget() const;

  inline bool hasCurPos() const;
  inline  ::cereal::ECEFPoint::Reader getCurPos() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSPlannerPoints::Builder {
public:
  typedef GPSPlannerPoints Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCurPosDEPRECATED();
  inline  ::cereal::ECEFPointDEPRECATED::Builder getCurPosDEPRECATED();
  inline void setCurPosDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value);
  inline  ::cereal::ECEFPointDEPRECATED::Builder initCurPosDEPRECATED();
  inline void adoptCurPosDEPRECATED(::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> disownCurPosDEPRECATED();

  inline bool hasPointsDEPRECATED();
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getPointsDEPRECATED();
  inline void setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initPointsDEPRECATED(unsigned int size);
  inline void adoptPointsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>> disownPointsDEPRECATED();

  inline bool getValid();
  inline void setValid(bool value);

  inline bool hasTrackName();
  inline  ::capnp::Text::Builder getTrackName();
  inline void setTrackName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTrackName(unsigned int size);
  inline void adoptTrackName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTrackName();

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline float getAccelTarget();
  inline void setAccelTarget(float value);

  inline bool hasCurPos();
  inline  ::cereal::ECEFPoint::Builder getCurPos();
  inline void setCurPos( ::cereal::ECEFPoint::Reader value);
  inline  ::cereal::ECEFPoint::Builder initCurPos();
  inline void adoptCurPos(::capnp::Orphan< ::cereal::ECEFPoint>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPoint> disownCurPos();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>> disownPoints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSPlannerPoints::Pipeline {
public:
  typedef GPSPlannerPoints Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ECEFPointDEPRECATED::Pipeline getCurPosDEPRECATED();
  inline  ::cereal::ECEFPoint::Pipeline getCurPos();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSPlannerPlan::Reader {
public:
  typedef GPSPlannerPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getValid() const;

  inline bool hasPoly() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPoly() const;

  inline bool hasTrackName() const;
  inline  ::capnp::Text::Reader getTrackName() const;

  inline float getSpeed() const;

  inline float getAcceleration() const;

  inline bool hasPointsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getPointsDEPRECATED() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline float getXLookahead() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSPlannerPlan::Builder {
public:
  typedef GPSPlannerPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getValid();
  inline void setValid(bool value);

  inline bool hasPoly();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPoly();
  inline void setPoly( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPoly(unsigned int size);
  inline void adoptPoly(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPoly();

  inline bool hasTrackName();
  inline  ::capnp::Text::Builder getTrackName();
  inline void setTrackName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTrackName(unsigned int size);
  inline void adoptTrackName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTrackName();

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getAcceleration();
  inline void setAcceleration(float value);

  inline bool hasPointsDEPRECATED();
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getPointsDEPRECATED();
  inline void setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initPointsDEPRECATED(unsigned int size);
  inline void adoptPointsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>> disownPointsDEPRECATED();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>> disownPoints();

  inline float getXLookahead();
  inline void setXLookahead(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSPlannerPlan::Pipeline {
public:
  typedef GPSPlannerPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiNavigationEvent::Reader {
public:
  typedef UiNavigationEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiNavigationEvent::Type getType() const;

  inline  ::cereal::UiNavigationEvent::Status getStatus() const;

  inline float getDistanceTo() const;

  inline bool hasEndRoadPointDEPRECATED() const;
  inline  ::cereal::ECEFPointDEPRECATED::Reader getEndRoadPointDEPRECATED() const;

  inline bool hasEndRoadPoint() const;
  inline  ::cereal::ECEFPoint::Reader getEndRoadPoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiNavigationEvent::Builder {
public:
  typedef UiNavigationEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiNavigationEvent::Type getType();
  inline void setType( ::cereal::UiNavigationEvent::Type value);

  inline  ::cereal::UiNavigationEvent::Status getStatus();
  inline void setStatus( ::cereal::UiNavigationEvent::Status value);

  inline float getDistanceTo();
  inline void setDistanceTo(float value);

  inline bool hasEndRoadPointDEPRECATED();
  inline  ::cereal::ECEFPointDEPRECATED::Builder getEndRoadPointDEPRECATED();
  inline void setEndRoadPointDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value);
  inline  ::cereal::ECEFPointDEPRECATED::Builder initEndRoadPointDEPRECATED();
  inline void adoptEndRoadPointDEPRECATED(::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> disownEndRoadPointDEPRECATED();

  inline bool hasEndRoadPoint();
  inline  ::cereal::ECEFPoint::Builder getEndRoadPoint();
  inline void setEndRoadPoint( ::cereal::ECEFPoint::Reader value);
  inline  ::cereal::ECEFPoint::Builder initEndRoadPoint();
  inline void adoptEndRoadPoint(::capnp::Orphan< ::cereal::ECEFPoint>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPoint> disownEndRoadPoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiNavigationEvent::Pipeline {
public:
  typedef UiNavigationEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ECEFPointDEPRECATED::Pipeline getEndRoadPointDEPRECATED();
  inline  ::cereal::ECEFPoint::Pipeline getEndRoadPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationData::Reader {
public:
  typedef LiveLocationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getStatus() const;

  inline double getLat() const;

  inline double getLon() const;

  inline float getAlt() const;

  inline float getSpeed() const;

  inline bool hasVNED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVNED() const;

  inline float getRoll() const;

  inline float getPitch() const;

  inline float getHeading() const;

  inline float getWanderAngle() const;

  inline float getTrackAngle() const;

  inline bool hasGyro() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGyro() const;

  inline bool hasAccel() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAccel() const;

  inline bool hasAccuracy() const;
  inline  ::cereal::LiveLocationData::Accuracy::Reader getAccuracy() const;

  inline  ::cereal::LiveLocationData::SensorSource getSource() const;

  inline  ::uint64_t getFixMonoTime() const;

  inline  ::int32_t getGpsWeek() const;

  inline double getTimeOfWeek() const;

  inline bool hasPositionECEF() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getPositionECEF() const;

  inline bool hasPoseQuatECEF() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPoseQuatECEF() const;

  inline float getPitchCalibration() const;

  inline float getYawCalibration() const;

  inline bool hasImuFrame() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getImuFrame() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationData::Builder {
public:
  typedef LiveLocationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getStatus();
  inline void setStatus( ::uint8_t value);

  inline double getLat();
  inline void setLat(double value);

  inline double getLon();
  inline void setLon(double value);

  inline float getAlt();
  inline void setAlt(float value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline bool hasVNED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVNED();
  inline void setVNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVNED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVNED(unsigned int size);
  inline void adoptVNED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVNED();

  inline float getRoll();
  inline void setRoll(float value);

  inline float getPitch();
  inline void setPitch(float value);

  inline float getHeading();
  inline void setHeading(float value);

  inline float getWanderAngle();
  inline void setWanderAngle(float value);

  inline float getTrackAngle();
  inline void setTrackAngle(float value);

  inline bool hasGyro();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGyro();
  inline void setGyro( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGyro(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGyro(unsigned int size);
  inline void adoptGyro(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGyro();

  inline bool hasAccel();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAccel();
  inline void setAccel( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAccel(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAccel(unsigned int size);
  inline void adoptAccel(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAccel();

  inline bool hasAccuracy();
  inline  ::cereal::LiveLocationData::Accuracy::Builder getAccuracy();
  inline void setAccuracy( ::cereal::LiveLocationData::Accuracy::Reader value);
  inline  ::cereal::LiveLocationData::Accuracy::Builder initAccuracy();
  inline void adoptAccuracy(::capnp::Orphan< ::cereal::LiveLocationData::Accuracy>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData::Accuracy> disownAccuracy();

  inline  ::cereal::LiveLocationData::SensorSource getSource();
  inline void setSource( ::cereal::LiveLocationData::SensorSource value);

  inline  ::uint64_t getFixMonoTime();
  inline void setFixMonoTime( ::uint64_t value);

  inline  ::int32_t getGpsWeek();
  inline void setGpsWeek( ::int32_t value);

  inline double getTimeOfWeek();
  inline void setTimeOfWeek(double value);

  inline bool hasPositionECEF();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getPositionECEF();
  inline void setPositionECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPositionECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initPositionECEF(unsigned int size);
  inline void adoptPositionECEF(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownPositionECEF();

  inline bool hasPoseQuatECEF();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPoseQuatECEF();
  inline void setPoseQuatECEF( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPoseQuatECEF(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPoseQuatECEF(unsigned int size);
  inline void adoptPoseQuatECEF(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPoseQuatECEF();

  inline float getPitchCalibration();
  inline void setPitchCalibration(float value);

  inline float getYawCalibration();
  inline void setYawCalibration(float value);

  inline bool hasImuFrame();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getImuFrame();
  inline void setImuFrame( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setImuFrame(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initImuFrame(unsigned int size);
  inline void adoptImuFrame(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownImuFrame();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationData::Pipeline {
public:
  typedef LiveLocationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationData::Accuracy::Pipeline getAccuracy();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationData::Accuracy::Reader {
public:
  typedef Accuracy Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPNEDError() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPNEDError() const;

  inline bool hasVNEDError() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVNEDError() const;

  inline float getRollError() const;

  inline float getPitchError() const;

  inline float getHeadingError() const;

  inline float getEllipsoidSemiMajorError() const;

  inline float getEllipsoidSemiMinorError() const;

  inline float getEllipsoidOrientationError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationData::Accuracy::Builder {
public:
  typedef Accuracy Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPNEDError();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPNEDError();
  inline void setPNEDError( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPNEDError(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPNEDError(unsigned int size);
  inline void adoptPNEDError(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPNEDError();

  inline bool hasVNEDError();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVNEDError();
  inline void setVNEDError( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVNEDError(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVNEDError(unsigned int size);
  inline void adoptVNEDError(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVNEDError();

  inline float getRollError();
  inline void setRollError(float value);

  inline float getPitchError();
  inline void setPitchError(float value);

  inline float getHeadingError();
  inline void setHeadingError(float value);

  inline float getEllipsoidSemiMajorError();
  inline void setEllipsoidSemiMajorError(float value);

  inline float getEllipsoidSemiMinorError();
  inline void setEllipsoidSemiMinorError(float value);

  inline float getEllipsoidOrientationError();
  inline void setEllipsoidOrientationError(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationData::Accuracy::Pipeline {
public:
  typedef Accuracy Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbOdometry::Reader {
public:
  typedef OrbOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStartMonoTime() const;

  inline  ::uint64_t getEndMonoTime() const;

  inline bool hasF() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getF() const;

  inline double getErr() const;

  inline  ::int32_t getInliers() const;

  inline bool hasMatches() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getMatches() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbOdometry::Builder {
public:
  typedef OrbOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStartMonoTime();
  inline void setStartMonoTime( ::uint64_t value);

  inline  ::uint64_t getEndMonoTime();
  inline void setEndMonoTime( ::uint64_t value);

  inline bool hasF();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getF();
  inline void setF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownF();

  inline double getErr();
  inline void setErr(double value);

  inline  ::int32_t getInliers();
  inline void setInliers( ::int32_t value);

  inline bool hasMatches();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getMatches();
  inline void setMatches( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMatches(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initMatches(unsigned int size);
  inline void adoptMatches(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownMatches();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbOdometry::Pipeline {
public:
  typedef OrbOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbFeatures::Reader {
public:
  typedef OrbFeatures Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasXs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXs() const;

  inline bool hasYs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYs() const;

  inline bool hasDescriptors() const;
  inline  ::capnp::Data::Reader getDescriptors() const;

  inline bool hasOctaves() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getOctaves() const;

  inline  ::uint64_t getTimestampLastEof() const;

  inline bool hasMatches() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getMatches() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbFeatures::Builder {
public:
  typedef OrbFeatures Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasXs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXs();
  inline void setXs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXs(unsigned int size);
  inline void adoptXs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXs();

  inline bool hasYs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYs();
  inline void setYs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYs(unsigned int size);
  inline void adoptYs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYs();

  inline bool hasDescriptors();
  inline  ::capnp::Data::Builder getDescriptors();
  inline void setDescriptors( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDescriptors(unsigned int size);
  inline void adoptDescriptors(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDescriptors();

  inline bool hasOctaves();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getOctaves();
  inline void setOctaves( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOctaves(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initOctaves(unsigned int size);
  inline void adoptOctaves(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownOctaves();

  inline  ::uint64_t getTimestampLastEof();
  inline void setTimestampLastEof( ::uint64_t value);

  inline bool hasMatches();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getMatches();
  inline void setMatches( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMatches(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initMatches(unsigned int size);
  inline void adoptMatches(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownMatches();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbFeatures::Pipeline {
public:
  typedef OrbFeatures Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbFeaturesSummary::Reader {
public:
  typedef OrbFeaturesSummary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof() const;

  inline  ::uint64_t getTimestampLastEof() const;

  inline  ::uint16_t getFeatureCount() const;

  inline  ::uint16_t getMatchCount() const;

  inline  ::uint64_t getComputeNs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbFeaturesSummary::Builder {
public:
  typedef OrbFeaturesSummary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::uint64_t getTimestampLastEof();
  inline void setTimestampLastEof( ::uint64_t value);

  inline  ::uint16_t getFeatureCount();
  inline void setFeatureCount( ::uint16_t value);

  inline  ::uint16_t getMatchCount();
  inline void setMatchCount( ::uint16_t value);

  inline  ::uint64_t getComputeNs();
  inline void setComputeNs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbFeaturesSummary::Pipeline {
public:
  typedef OrbFeaturesSummary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbKeyFrame::Reader {
public:
  typedef OrbKeyFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasPos() const;
  inline  ::cereal::ECEFPoint::Reader getPos() const;

  inline bool hasDpos() const;
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader getDpos() const;

  inline bool hasDescriptors() const;
  inline  ::capnp::Data::Reader getDescriptors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbKeyFrame::Builder {
public:
  typedef OrbKeyFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasPos();
  inline  ::cereal::ECEFPoint::Builder getPos();
  inline void setPos( ::cereal::ECEFPoint::Reader value);
  inline  ::cereal::ECEFPoint::Builder initPos();
  inline void adoptPos(::capnp::Orphan< ::cereal::ECEFPoint>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPoint> disownPos();

  inline bool hasDpos();
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder getDpos();
  inline void setDpos( ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder initDpos(unsigned int size);
  inline void adoptDpos(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>> disownDpos();

  inline bool hasDescriptors();
  inline  ::capnp::Data::Builder getDescriptors();
  inline void setDescriptors( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDescriptors(unsigned int size);
  inline void adoptDescriptors(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDescriptors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbKeyFrame::Pipeline {
public:
  typedef OrbKeyFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ECEFPoint::Pipeline getPos();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KalmanOdometry::Reader {
public:
  typedef KalmanOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRotStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KalmanOdometry::Builder {
public:
  typedef KalmanOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTrans();
  inline void setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRot();
  inline void setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRotStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KalmanOdometry::Pipeline {
public:
  typedef KalmanOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbObservation::Reader {
public:
  typedef OrbObservation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getObservationMonoTime() const;

  inline bool hasNormalizedCoordinates() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNormalizedCoordinates() const;

  inline bool hasLocationECEF() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getLocationECEF() const;

  inline  ::uint32_t getMatchDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbObservation::Builder {
public:
  typedef OrbObservation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getObservationMonoTime();
  inline void setObservationMonoTime( ::uint64_t value);

  inline bool hasNormalizedCoordinates();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNormalizedCoordinates();
  inline void setNormalizedCoordinates( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNormalizedCoordinates(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNormalizedCoordinates(unsigned int size);
  inline void adoptNormalizedCoordinates(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNormalizedCoordinates();

  inline bool hasLocationECEF();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getLocationECEF();
  inline void setLocationECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLocationECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initLocationECEF(unsigned int size);
  inline void adoptLocationECEF(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownLocationECEF();

  inline  ::uint32_t getMatchDistance();
  inline void setMatchDistance( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbObservation::Pipeline {
public:
  typedef OrbObservation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CalibrationFeatures::Reader {
public:
  typedef CalibrationFeatures Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasP0() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getP0() const;

  inline bool hasP1() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getP1() const;

  inline bool hasStatus() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CalibrationFeatures::Builder {
public:
  typedef CalibrationFeatures Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasP0();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getP0();
  inline void setP0( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setP0(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initP0(unsigned int size);
  inline void adoptP0(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownP0();

  inline bool hasP1();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getP1();
  inline void setP1( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setP1(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initP1(unsigned int size);
  inline void adoptP1(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownP1();

  inline bool hasStatus();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getStatus();
  inline void setStatus( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStatus(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownStatus();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CalibrationFeatures::Pipeline {
public:
  typedef CalibrationFeatures Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavStatus::Reader {
public:
  typedef NavStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating() const;

  inline bool hasCurrentAddress() const;
  inline  ::cereal::NavStatus::Address::Reader getCurrentAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavStatus::Builder {
public:
  typedef NavStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating();
  inline void setIsNavigating(bool value);

  inline bool hasCurrentAddress();
  inline  ::cereal::NavStatus::Address::Builder getCurrentAddress();
  inline void setCurrentAddress( ::cereal::NavStatus::Address::Reader value);
  inline  ::cereal::NavStatus::Address::Builder initCurrentAddress();
  inline void adoptCurrentAddress(::capnp::Orphan< ::cereal::NavStatus::Address>&& value);
  inline ::capnp::Orphan< ::cereal::NavStatus::Address> disownCurrentAddress();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavStatus::Pipeline {
public:
  typedef NavStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::NavStatus::Address::Pipeline getCurrentAddress();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavStatus::Address::Reader {
public:
  typedef Address Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline double getLat() const;

  inline double getLng() const;

  inline bool hasHouse() const;
  inline  ::capnp::Text::Reader getHouse() const;

  inline bool hasAddress() const;
  inline  ::capnp::Text::Reader getAddress() const;

  inline bool hasStreet() const;
  inline  ::capnp::Text::Reader getStreet() const;

  inline bool hasCity() const;
  inline  ::capnp::Text::Reader getCity() const;

  inline bool hasState() const;
  inline  ::capnp::Text::Reader getState() const;

  inline bool hasCountry() const;
  inline  ::capnp::Text::Reader getCountry() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavStatus::Address::Builder {
public:
  typedef Address Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline double getLat();
  inline void setLat(double value);

  inline double getLng();
  inline void setLng(double value);

  inline bool hasHouse();
  inline  ::capnp::Text::Builder getHouse();
  inline void setHouse( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHouse(unsigned int size);
  inline void adoptHouse(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHouse();

  inline bool hasAddress();
  inline  ::capnp::Text::Builder getAddress();
  inline void setAddress( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAddress(unsigned int size);
  inline void adoptAddress(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAddress();

  inline bool hasStreet();
  inline  ::capnp::Text::Builder getStreet();
  inline void setStreet( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStreet(unsigned int size);
  inline void adoptStreet(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStreet();

  inline bool hasCity();
  inline  ::capnp::Text::Builder getCity();
  inline void setCity( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCity(unsigned int size);
  inline void adoptCity(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCity();

  inline bool hasState();
  inline  ::capnp::Text::Builder getState();
  inline void setState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownState();

  inline bool hasCountry();
  inline  ::capnp::Text::Builder getCountry();
  inline void setCountry( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCountry(unsigned int size);
  inline void adoptCountry(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCountry();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavStatus::Address::Pipeline {
public:
  typedef Address Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavUpdate::Reader {
public:
  typedef NavUpdate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating() const;

  inline  ::int32_t getCurSegment() const;

  inline bool hasSegments() const;
  inline  ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Reader getSegments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavUpdate::Builder {
public:
  typedef NavUpdate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating();
  inline void setIsNavigating(bool value);

  inline  ::int32_t getCurSegment();
  inline void setCurSegment( ::int32_t value);

  inline bool hasSegments();
  inline  ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Builder getSegments();
  inline void setSegments( ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Builder initSegments(unsigned int size);
  inline void adoptSegments(::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>> disownSegments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavUpdate::Pipeline {
public:
  typedef NavUpdate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavUpdate::LatLng::Reader {
public:
  typedef LatLng Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLat() const;

  inline double getLng() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavUpdate::LatLng::Builder {
public:
  typedef LatLng Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLat();
  inline void setLat(double value);

  inline double getLng();
  inline void setLng(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavUpdate::LatLng::Pipeline {
public:
  typedef LatLng Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavUpdate::Segment::Reader {
public:
  typedef Segment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrom() const;
  inline  ::cereal::NavUpdate::LatLng::Reader getFrom() const;

  inline bool hasTo() const;
  inline  ::cereal::NavUpdate::LatLng::Reader getTo() const;

  inline  ::int32_t getUpdateTime() const;

  inline  ::int32_t getDistance() const;

  inline  ::int32_t getCrossTime() const;

  inline  ::int32_t getExitNo() const;

  inline  ::cereal::NavUpdate::Segment::Instruction getInstruction() const;

  inline bool hasParts() const;
  inline  ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Reader getParts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavUpdate::Segment::Builder {
public:
  typedef Segment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrom();
  inline  ::cereal::NavUpdate::LatLng::Builder getFrom();
  inline void setFrom( ::cereal::NavUpdate::LatLng::Reader value);
  inline  ::cereal::NavUpdate::LatLng::Builder initFrom();
  inline void adoptFrom(::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value);
  inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> disownFrom();

  inline bool hasTo();
  inline  ::cereal::NavUpdate::LatLng::Builder getTo();
  inline void setTo( ::cereal::NavUpdate::LatLng::Reader value);
  inline  ::cereal::NavUpdate::LatLng::Builder initTo();
  inline void adoptTo(::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value);
  inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> disownTo();

  inline  ::int32_t getUpdateTime();
  inline void setUpdateTime( ::int32_t value);

  inline  ::int32_t getDistance();
  inline void setDistance( ::int32_t value);

  inline  ::int32_t getCrossTime();
  inline void setCrossTime( ::int32_t value);

  inline  ::int32_t getExitNo();
  inline void setExitNo( ::int32_t value);

  inline  ::cereal::NavUpdate::Segment::Instruction getInstruction();
  inline void setInstruction( ::cereal::NavUpdate::Segment::Instruction value);

  inline bool hasParts();
  inline  ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Builder getParts();
  inline void setParts( ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Builder initParts(unsigned int size);
  inline void adoptParts(::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>> disownParts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavUpdate::Segment::Pipeline {
public:
  typedef Segment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::NavUpdate::LatLng::Pipeline getFrom();
  inline  ::cereal::NavUpdate::LatLng::Pipeline getTo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficEvent::Reader {
public:
  typedef TrafficEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::TrafficEvent::Type getType() const;

  inline float getDistance() const;

  inline  ::cereal::TrafficEvent::Action getAction() const;

  inline bool getResuming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficEvent::Builder {
public:
  typedef TrafficEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::TrafficEvent::Type getType();
  inline void setType( ::cereal::TrafficEvent::Type value);

  inline float getDistance();
  inline void setDistance(float value);

  inline  ::cereal::TrafficEvent::Action getAction();
  inline void setAction( ::cereal::TrafficEvent::Action value);

  inline bool getResuming();
  inline void setResuming(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficEvent::Pipeline {
public:
  typedef TrafficEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Reader {
public:
  typedef AndroidGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMeasurements() const;
  inline bool hasMeasurements() const;
  inline  ::cereal::AndroidGnss::Measurements::Reader getMeasurements() const;

  inline bool isNavigationMessage() const;
  inline bool hasNavigationMessage() const;
  inline  ::cereal::AndroidGnss::NavigationMessage::Reader getNavigationMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Builder {
public:
  typedef AndroidGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMeasurements();
  inline bool hasMeasurements();
  inline  ::cereal::AndroidGnss::Measurements::Builder getMeasurements();
  inline void setMeasurements( ::cereal::AndroidGnss::Measurements::Reader value);
  inline  ::cereal::AndroidGnss::Measurements::Builder initMeasurements();
  inline void adoptMeasurements(::capnp::Orphan< ::cereal::AndroidGnss::Measurements>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements> disownMeasurements();

  inline bool isNavigationMessage();
  inline bool hasNavigationMessage();
  inline  ::cereal::AndroidGnss::NavigationMessage::Builder getNavigationMessage();
  inline void setNavigationMessage( ::cereal::AndroidGnss::NavigationMessage::Reader value);
  inline  ::cereal::AndroidGnss::NavigationMessage::Builder initNavigationMessage();
  inline void adoptNavigationMessage(::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage> disownNavigationMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Pipeline {
public:
  typedef AndroidGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Measurements::Reader {
public:
  typedef Measurements Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClock() const;
  inline  ::cereal::AndroidGnss::Measurements::Clock::Reader getClock() const;

  inline bool hasMeasurements() const;
  inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Reader getMeasurements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Measurements::Builder {
public:
  typedef Measurements Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClock();
  inline  ::cereal::AndroidGnss::Measurements::Clock::Builder getClock();
  inline void setClock( ::cereal::AndroidGnss::Measurements::Clock::Reader value);
  inline  ::cereal::AndroidGnss::Measurements::Clock::Builder initClock();
  inline void adoptClock(::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock> disownClock();

  inline bool hasMeasurements();
  inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Builder getMeasurements();
  inline void setMeasurements( ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Builder initMeasurements(unsigned int size);
  inline void adoptMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>> disownMeasurements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Measurements::Pipeline {
public:
  typedef Measurements Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::AndroidGnss::Measurements::Clock::Pipeline getClock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Measurements::Clock::Reader {
public:
  typedef Clock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimeNanos() const;

  inline  ::int32_t getHardwareClockDiscontinuityCount() const;

  inline bool getHasTimeUncertaintyNanos() const;

  inline double getTimeUncertaintyNanos() const;

  inline bool getHasLeapSecond() const;

  inline  ::int32_t getLeapSecond() const;

  inline bool getHasFullBiasNanos() const;

  inline  ::int64_t getFullBiasNanos() const;

  inline bool getHasBiasNanos() const;

  inline double getBiasNanos() const;

  inline bool getHasBiasUncertaintyNanos() const;

  inline double getBiasUncertaintyNanos() const;

  inline bool getHasDriftNanosPerSecond() const;

  inline double getDriftNanosPerSecond() const;

  inline bool getHasDriftUncertaintyNanosPerSecond() const;

  inline double getDriftUncertaintyNanosPerSecond() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Measurements::Clock::Builder {
public:
  typedef Clock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimeNanos();
  inline void setTimeNanos( ::int64_t value);

  inline  ::int32_t getHardwareClockDiscontinuityCount();
  inline void setHardwareClockDiscontinuityCount( ::int32_t value);

  inline bool getHasTimeUncertaintyNanos();
  inline void setHasTimeUncertaintyNanos(bool value);

  inline double getTimeUncertaintyNanos();
  inline void setTimeUncertaintyNanos(double value);

  inline bool getHasLeapSecond();
  inline void setHasLeapSecond(bool value);

  inline  ::int32_t getLeapSecond();
  inline void setLeapSecond( ::int32_t value);

  inline bool getHasFullBiasNanos();
  inline void setHasFullBiasNanos(bool value);

  inline  ::int64_t getFullBiasNanos();
  inline void setFullBiasNanos( ::int64_t value);

  inline bool getHasBiasNanos();
  inline void setHasBiasNanos(bool value);

  inline double getBiasNanos();
  inline void setBiasNanos(double value);

  inline bool getHasBiasUncertaintyNanos();
  inline void setHasBiasUncertaintyNanos(bool value);

  inline double getBiasUncertaintyNanos();
  inline void setBiasUncertaintyNanos(double value);

  inline bool getHasDriftNanosPerSecond();
  inline void setHasDriftNanosPerSecond(bool value);

  inline double getDriftNanosPerSecond();
  inline void setDriftNanosPerSecond(double value);

  inline bool getHasDriftUncertaintyNanosPerSecond();
  inline void setHasDriftUncertaintyNanosPerSecond(bool value);

  inline double getDriftUncertaintyNanosPerSecond();
  inline void setDriftUncertaintyNanosPerSecond(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Measurements::Clock::Pipeline {
public:
  typedef Clock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Measurements::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSvId() const;

  inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation getConstellation() const;

  inline double getTimeOffsetNanos() const;

  inline  ::int32_t getState() const;

  inline  ::int64_t getReceivedSvTimeNanos() const;

  inline  ::int64_t getReceivedSvTimeUncertaintyNanos() const;

  inline double getCn0DbHz() const;

  inline double getPseudorangeRateMetersPerSecond() const;

  inline double getPseudorangeRateUncertaintyMetersPerSecond() const;

  inline  ::int32_t getAccumulatedDeltaRangeState() const;

  inline double getAccumulatedDeltaRangeMeters() const;

  inline double getAccumulatedDeltaRangeUncertaintyMeters() const;

  inline bool getHasCarrierFrequencyHz() const;

  inline float getCarrierFrequencyHz() const;

  inline bool getHasCarrierCycles() const;

  inline  ::int64_t getCarrierCycles() const;

  inline bool getHasCarrierPhase() const;

  inline double getCarrierPhase() const;

  inline bool getHasCarrierPhaseUncertainty() const;

  inline double getCarrierPhaseUncertainty() const;

  inline bool getHasSnrInDb() const;

  inline double getSnrInDb() const;

  inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator getMultipathIndicator() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Measurements::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSvId();
  inline void setSvId( ::int32_t value);

  inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation getConstellation();
  inline void setConstellation( ::cereal::AndroidGnss::Measurements::Measurement::Constellation value);

  inline double getTimeOffsetNanos();
  inline void setTimeOffsetNanos(double value);

  inline  ::int32_t getState();
  inline void setState( ::int32_t value);

  inline  ::int64_t getReceivedSvTimeNanos();
  inline void setReceivedSvTimeNanos( ::int64_t value);

  inline  ::int64_t getReceivedSvTimeUncertaintyNanos();
  inline void setReceivedSvTimeUncertaintyNanos( ::int64_t value);

  inline double getCn0DbHz();
  inline void setCn0DbHz(double value);

  inline double getPseudorangeRateMetersPerSecond();
  inline void setPseudorangeRateMetersPerSecond(double value);

  inline double getPseudorangeRateUncertaintyMetersPerSecond();
  inline void setPseudorangeRateUncertaintyMetersPerSecond(double value);

  inline  ::int32_t getAccumulatedDeltaRangeState();
  inline void setAccumulatedDeltaRangeState( ::int32_t value);

  inline double getAccumulatedDeltaRangeMeters();
  inline void setAccumulatedDeltaRangeMeters(double value);

  inline double getAccumulatedDeltaRangeUncertaintyMeters();
  inline void setAccumulatedDeltaRangeUncertaintyMeters(double value);

  inline bool getHasCarrierFrequencyHz();
  inline void setHasCarrierFrequencyHz(bool value);

  inline float getCarrierFrequencyHz();
  inline void setCarrierFrequencyHz(float value);

  inline bool getHasCarrierCycles();
  inline void setHasCarrierCycles(bool value);

  inline  ::int64_t getCarrierCycles();
  inline void setCarrierCycles( ::int64_t value);

  inline bool getHasCarrierPhase();
  inline void setHasCarrierPhase(bool value);

  inline double getCarrierPhase();
  inline void setCarrierPhase(double value);

  inline bool getHasCarrierPhaseUncertainty();
  inline void setHasCarrierPhaseUncertainty(bool value);

  inline double getCarrierPhaseUncertainty();
  inline void setCarrierPhaseUncertainty(double value);

  inline bool getHasSnrInDb();
  inline void setHasSnrInDb(bool value);

  inline double getSnrInDb();
  inline void setSnrInDb(double value);

  inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator getMultipathIndicator();
  inline void setMultipathIndicator( ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Measurements::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::NavigationMessage::Reader {
public:
  typedef NavigationMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getType() const;

  inline  ::int32_t getSvId() const;

  inline  ::int32_t getMessageId() const;

  inline  ::int32_t getSubmessageId() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline  ::cereal::AndroidGnss::NavigationMessage::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::NavigationMessage::Builder {
public:
  typedef NavigationMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int32_t getSvId();
  inline void setSvId( ::int32_t value);

  inline  ::int32_t getMessageId();
  inline void setMessageId( ::int32_t value);

  inline  ::int32_t getSubmessageId();
  inline void setSubmessageId( ::int32_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline  ::cereal::AndroidGnss::NavigationMessage::Status getStatus();
  inline void setStatus( ::cereal::AndroidGnss::NavigationMessage::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::NavigationMessage::Pipeline {
public:
  typedef NavigationMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LidarPts::Reader {
public:
  typedef LidarPts Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasR() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getR() const;

  inline bool hasTheta() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getTheta() const;

  inline bool hasReflect() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getReflect() const;

  inline  ::uint64_t getIdx() const;

  inline bool hasPkt() const;
  inline  ::capnp::Data::Reader getPkt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LidarPts::Builder {
public:
  typedef LidarPts Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasR();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getR();
  inline void setR( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setR(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initR(unsigned int size);
  inline void adoptR(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownR();

  inline bool hasTheta();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getTheta();
  inline void setTheta( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTheta(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initTheta(unsigned int size);
  inline void adoptTheta(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownTheta();

  inline bool hasReflect();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getReflect();
  inline void setReflect( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReflect(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initReflect(unsigned int size);
  inline void adoptReflect(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownReflect();

  inline  ::uint64_t getIdx();
  inline void setIdx( ::uint64_t value);

  inline bool hasPkt();
  inline  ::capnp::Data::Builder getPkt();
  inline void setPkt( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPkt(unsigned int size);
  inline void adoptPkt(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPkt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LidarPts::Pipeline {
public:
  typedef LidarPts Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t LogRotate::Reader::getSegmentNum() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LogRotate::Builder::getSegmentNum() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LogRotate::Builder::setSegmentNum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LogRotate::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LogRotate::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LogRotate::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LogRotate::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LogRotate::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LogRotate::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LogRotate::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LogRotate::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveUI::Reader::getRearViewCam() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveUI::Builder::getRearViewCam() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveUI::Builder::setRearViewCam(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LiveUI::Reader::hasAlertText1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveUI::Builder::hasAlertText1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveUI::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveUI::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveUI::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveUI::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveUI::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveUI::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveUI::Reader::hasAlertText2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveUI::Builder::hasAlertText2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveUI::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveUI::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveUI::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveUI::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveUI::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveUI::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float LiveUI::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveUI::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveUI::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UiLayoutState::App UiLayoutState::Reader::getActiveApp() const {
  return _reader.getDataField< ::cereal::UiLayoutState::App>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UiLayoutState::App UiLayoutState::Builder::getActiveApp() {
  return _builder.getDataField< ::cereal::UiLayoutState::App>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setActiveApp( ::cereal::UiLayoutState::App value) {
  _builder.setDataField< ::cereal::UiLayoutState::App>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UiLayoutState::Reader::getSidebarCollapsed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool UiLayoutState::Builder::getSidebarCollapsed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setSidebarCollapsed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool UiLayoutState::Reader::getMapEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool UiLayoutState::Builder::getMapEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setMapEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool UiLayoutState::Reader::getMockEngaged() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool UiLayoutState::Builder::getMockEngaged() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setMockEngaged(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbslamCorrection::Reader::getCorrectionMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbslamCorrection::Builder::getCorrectionMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbslamCorrection::Builder::setCorrectionMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbslamCorrection::Reader::hasPrePositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPrePositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader OrbslamCorrection::Reader::getPrePositionECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::getPrePositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPrePositionECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPrePositionECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::initPrePositionECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPrePositionECEF(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> OrbslamCorrection::Builder::disownPrePositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbslamCorrection::Reader::hasPostPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPostPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader OrbslamCorrection::Reader::getPostPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::getPostPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPostPositionECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPostPositionECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::initPostPositionECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPostPositionECEF(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> OrbslamCorrection::Builder::disownPostPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OrbslamCorrection::Reader::hasPrePoseQuatECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPrePoseQuatECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader OrbslamCorrection::Reader::getPrePoseQuatECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::getPrePoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPrePoseQuatECEF( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPrePoseQuatECEF(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::initPrePoseQuatECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPrePoseQuatECEF(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> OrbslamCorrection::Builder::disownPrePoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool OrbslamCorrection::Reader::hasPostPoseQuatECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPostPoseQuatECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader OrbslamCorrection::Reader::getPostPoseQuatECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::getPostPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPostPoseQuatECEF( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPostPoseQuatECEF(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbslamCorrection::Builder::initPostPoseQuatECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPostPoseQuatECEF(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> OrbslamCorrection::Builder::disownPostPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t OrbslamCorrection::Reader::getNumInliers() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t OrbslamCorrection::Builder::getNumInliers() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrbslamCorrection::Builder::setNumInliers( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool EthernetPacket::Reader::hasPkt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EthernetPacket::Builder::hasPkt() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EthernetPacket::Reader::getPkt() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EthernetPacket::Builder::getPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EthernetPacket::Builder::setPkt( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EthernetPacket::Builder::initPkt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void EthernetPacket::Builder::adoptPkt(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EthernetPacket::Builder::disownPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float EthernetPacket::Reader::getTs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float EthernetPacket::Builder::getTs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EthernetPacket::Builder::setTs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CellInfo::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CellInfo::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CellInfo::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CellInfo::Reader::hasRepr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CellInfo::Builder::hasRepr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CellInfo::Reader::getRepr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CellInfo::Builder::getRepr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CellInfo::Builder::setRepr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CellInfo::Builder::initRepr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CellInfo::Builder::adoptRepr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CellInfo::Builder::disownRepr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasBssid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasBssid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getBssid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getBssid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setBssid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initBssid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptBssid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownBssid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasSsid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasSsid() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getSsid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getSsid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setSsid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initSsid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptSsid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownSsid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasCapabilities() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasCapabilities() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getCapabilities() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getCapabilities() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setCapabilities( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initCapabilities(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptCapabilities(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownCapabilities() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t WifiScan::Reader::getFrequency() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getFrequency() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setFrequency( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getLevel() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getLevel() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t WifiScan::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t WifiScan::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getCenterFreq0() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getCenterFreq0() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setCenterFreq0( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getCenterFreq1() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getCenterFreq1() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setCenterFreq1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::WifiScan::ChannelWidth WifiScan::Reader::getChannelWidth() const {
  return _reader.getDataField< ::cereal::WifiScan::ChannelWidth>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::cereal::WifiScan::ChannelWidth WifiScan::Builder::getChannelWidth() {
  return _builder.getDataField< ::cereal::WifiScan::ChannelWidth>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setChannelWidth( ::cereal::WifiScan::ChannelWidth value) {
  _builder.setDataField< ::cereal::WifiScan::ChannelWidth>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool WifiScan::Reader::hasOperatorFriendlyName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasOperatorFriendlyName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getOperatorFriendlyName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getOperatorFriendlyName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setOperatorFriendlyName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initOperatorFriendlyName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptOperatorFriendlyName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownOperatorFriendlyName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasVenueName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasVenueName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getVenueName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getVenueName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setVenueName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initVenueName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptVenueName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownVenueName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::getIs80211mcResponder() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS);
}

inline bool WifiScan::Builder::getIs80211mcResponder() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setIs80211mcResponder(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS, value);
}

inline bool WifiScan::Reader::getPasspoint() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS);
}

inline bool WifiScan::Builder::getPasspoint() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setPasspoint(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getDistanceCm() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getDistanceCm() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setDistanceCm( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getDistanceSdCm() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getDistanceSdCm() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setDistanceSdCm( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LiveEventData::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveEventData::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveEventData::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveEventData::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveEventData::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveEventData::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveEventData::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveEventData::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveEventData::Reader::getValue() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveEventData::Builder::getValue() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveEventData::Builder::setValue( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getPath() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setPath( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptPath(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLeftLane() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLeftLane() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getLeftLane() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getLeftLane() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLeftLane( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLeftLane(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasRightLane() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasRightLane() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getRightLane() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getRightLane() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setRightLane( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptRightLane(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLead() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LeadData::Reader ModelData::Reader::getLead() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::getLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LeadData::Pipeline ModelData::Pipeline::getLead() {
  return  ::cereal::ModelData::LeadData::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLead( ::cereal::ModelData::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::initLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLead(
    ::capnp::Orphan< ::cereal::ModelData::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LeadData> ModelData::Builder::disownLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::ModelSettings::Reader ModelData::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::ModelSettings::Builder ModelData::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::ModelSettings::Pipeline ModelData::Pipeline::getSettings() {
  return  ::cereal::ModelData::ModelSettings::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setSettings( ::cereal::ModelData::ModelSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::ModelSettings::Builder ModelData::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptSettings(
    ::capnp::Orphan< ::cereal::ModelData::ModelSettings>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::ModelSettings> ModelData::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasFreePath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasFreePath() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::Reader::getFreePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::Builder::getFreePath() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::setFreePath( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelData::Builder::setFreePath(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::Builder::initFreePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelData::Builder::adoptFreePath(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::Builder::disownFreePath() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLeadFuture() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLeadFuture() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LeadData::Reader ModelData::Reader::getLeadFuture() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::getLeadFuture() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LeadData::Pipeline ModelData::Pipeline::getLeadFuture() {
  return  ::cereal::ModelData::LeadData::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLeadFuture( ::cereal::ModelData::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::initLeadFuture() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLeadFuture(
    ::capnp::Orphan< ::cereal::ModelData::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LeadData> ModelData::Builder::disownLeadFuture() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasSpeed() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasSpeed() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::Reader::getSpeed() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::Builder::getSpeed() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::setSpeed( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ModelData::Builder::setSpeed(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::Builder::initSpeed(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelData::Builder::adoptSpeed(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::Builder::disownSpeed() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint64_t ModelData::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ModelData::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::MetaData::Reader ModelData::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::MetaData::Builder ModelData::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::MetaData::Pipeline ModelData::Pipeline::getMeta() {
  return  ::cereal::ModelData::MetaData::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setMeta( ::cereal::ModelData::MetaData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::MetaData::Builder ModelData::Builder::initMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptMeta(
    ::capnp::Orphan< ::cereal::ModelData::MetaData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::MetaData> ModelData::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLongitudinal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLongitudinal() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LongitudinalData::Reader ModelData::Reader::getLongitudinal() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LongitudinalData::Builder ModelData::Builder::getLongitudinal() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LongitudinalData::Pipeline ModelData::Pipeline::getLongitudinal() {
  return  ::cereal::ModelData::LongitudinalData::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLongitudinal( ::cereal::ModelData::LongitudinalData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LongitudinalData::Builder ModelData::Builder::initLongitudinal() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLongitudinal(
    ::capnp::Orphan< ::cereal::ModelData::LongitudinalData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LongitudinalData> ModelData::Builder::disownLongitudinal() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint32_t ModelData::Reader::getFrameAge() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelData::Builder::getFrameAge() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setFrameAge( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::Reader::getFrameDropPerc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ModelData::Builder::getFrameDropPerc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setFrameDropPerc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ModelData::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::Reader::hasRawPred() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasRawPred() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ModelData::Reader::getRawPred() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ModelData::Builder::getRawPred() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::setRawPred( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ModelData::Builder::initRawPred(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void ModelData::Builder::adoptRawPred(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ModelData::Builder::disownRawPred() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline float ModelData::Reader::getGpuExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ModelData::Builder::getGpuExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setGpuExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::PathData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::PathData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::PathData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setPoints(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::PathData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::PathData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ModelData::PathData::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::PathData::Reader::getStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::PathData::Reader::hasStds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasStds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::PathData::Reader::getStds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::PathData::Builder::getStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setStds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::PathData::Builder::initStds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptStds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::PathData::Builder::disownStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::PathData::Reader::hasPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::PathData::Reader::getPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::PathData::Builder::getPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setPoly( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::PathData::Builder::initPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptPoly(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::PathData::Builder::disownPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ModelData::PathData::Reader::getValidLen() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getValidLen() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setValidLen(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getDist() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getDist() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setDist(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelVelStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelVelStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelVelStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelYStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelYStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelYStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelA() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelA() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelA(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelAStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelAStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelAStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxX() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxX() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxX( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxY() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxY() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxY( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxWidth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxWidth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxWidth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxHeight() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxHeight() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxHeight( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::ModelSettings::Reader::hasBoxProjection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasBoxProjection() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::ModelSettings::Reader::getBoxProjection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::ModelSettings::Builder::getBoxProjection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setBoxProjection( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setBoxProjection(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::ModelSettings::Builder::initBoxProjection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptBoxProjection(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::ModelSettings::Builder::disownBoxProjection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelData::ModelSettings::Reader::hasYuvCorrection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasYuvCorrection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::ModelSettings::Reader::getYuvCorrection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::ModelSettings::Builder::getYuvCorrection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setYuvCorrection( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setYuvCorrection(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::ModelSettings::Builder::initYuvCorrection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptYuvCorrection(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::ModelSettings::Builder::disownYuvCorrection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::ModelSettings::Reader::hasInputTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasInputTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::ModelSettings::Reader::getInputTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::ModelSettings::Builder::getInputTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setInputTransform( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setInputTransform(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::ModelSettings::Builder::initInputTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptInputTransform(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::ModelSettings::Builder::disownInputTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ModelData::MetaData::Reader::getEngagedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getEngagedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setEngagedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::MetaData::Reader::hasDesirePrediction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::MetaData::Builder::hasDesirePrediction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::MetaData::Reader::getDesirePrediction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::MetaData::Builder::getDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::MetaData::Builder::setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::MetaData::Builder::setDesirePrediction(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::MetaData::Builder::initDesirePrediction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::MetaData::Builder::adoptDesirePrediction(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::MetaData::Builder::disownDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ModelData::MetaData::Reader::getBrakeDisengageProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getBrakeDisengageProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setBrakeDisengageProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::MetaData::Reader::getGasDisengageProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getGasDisengageProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setGasDisengageProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::MetaData::Reader::getSteerOverrideProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getSteerOverrideProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setSteerOverrideProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::MetaData::Reader::hasDesireState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::MetaData::Builder::hasDesireState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::MetaData::Reader::getDesireState() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::MetaData::Builder::getDesireState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::MetaData::Builder::setDesireState( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::MetaData::Builder::setDesireState(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::MetaData::Builder::initDesireState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::MetaData::Builder::adoptDesireState(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::MetaData::Builder::disownDesireState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::LongitudinalData::Reader::hasSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::LongitudinalData::Builder::hasSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::LongitudinalData::Reader::getSpeeds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::LongitudinalData::Builder::getSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::LongitudinalData::Builder::setSpeeds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::LongitudinalData::Builder::setSpeeds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::LongitudinalData::Builder::initSpeeds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::LongitudinalData::Builder::adoptSpeeds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::LongitudinalData::Builder::disownSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelData::LongitudinalData::Reader::hasAccelerations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::LongitudinalData::Builder::hasAccelerations() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::LongitudinalData::Reader::getAccelerations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::LongitudinalData::Builder::getAccelerations() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::LongitudinalData::Builder::setAccelerations( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::LongitudinalData::Builder::setAccelerations(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::LongitudinalData::Builder::initAccelerations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::LongitudinalData::Builder::adoptAccelerations(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::LongitudinalData::Builder::disownAccelerations() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::LongitudinalData::Reader::hasDistances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::LongitudinalData::Builder::hasDistances() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelData::LongitudinalData::Reader::getDistances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::LongitudinalData::Builder::getDistances() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::LongitudinalData::Builder::setDistances( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelData::LongitudinalData::Builder::setDistances(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelData::LongitudinalData::Builder::initDistances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelData::LongitudinalData::Builder::adoptDistances(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelData::LongitudinalData::Builder::disownDistances() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double ECEFPoint::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double ECEFPoint::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ECEFPoint::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ECEFPoint::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ECEFPoint::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ECEFPoint::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double ECEFPoint::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ECEFPoint::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ECEFPoint::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ECEFPointDEPRECATED::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ECEFPointDEPRECATED::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ECEFPointDEPRECATED::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ECEFPointDEPRECATED::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ECEFPointDEPRECATED::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ECEFPointDEPRECATED::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ECEFPointDEPRECATED::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ECEFPointDEPRECATED::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ECEFPointDEPRECATED::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPoints::Reader::hasCurPosDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasCurPosDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPointDEPRECATED::Reader GPSPlannerPoints::Reader::getCurPosDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPointDEPRECATED::Builder GPSPlannerPoints::Builder::getCurPosDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPointDEPRECATED::Pipeline GPSPlannerPoints::Pipeline::getCurPosDEPRECATED() {
  return  ::cereal::ECEFPointDEPRECATED::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GPSPlannerPoints::Builder::setCurPosDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPointDEPRECATED::Builder GPSPlannerPoints::Builder::initCurPosDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::adoptCurPosDEPRECATED(
    ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> GPSPlannerPoints::Builder::disownCurPosDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPoints::Reader::hasPointsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasPointsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader GPSPlannerPoints::Reader::getPointsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPoints::Builder::getPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPoints::Builder::initPointsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPoints::Builder::adoptPointsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>> GPSPlannerPoints::Builder::disownPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPoints::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GPSPlannerPoints::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPoints::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPoints::Reader::hasTrackName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasTrackName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSPlannerPoints::Reader::getTrackName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSPlannerPoints::Builder::getTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::setTrackName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSPlannerPoints::Builder::initTrackName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPoints::Builder::adoptTrackName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSPlannerPoints::Builder::disownTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float GPSPlannerPoints::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPoints::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPoints::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GPSPlannerPoints::Reader::getAccelTarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPoints::Builder::getAccelTarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPoints::Builder::setAccelTarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPoints::Reader::hasCurPos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasCurPos() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPoint::Reader GPSPlannerPoints::Reader::getCurPos() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPoint::Builder GPSPlannerPoints::Builder::getCurPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPoint::Pipeline GPSPlannerPoints::Pipeline::getCurPos() {
  return  ::cereal::ECEFPoint::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void GPSPlannerPoints::Builder::setCurPos( ::cereal::ECEFPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPoint::Builder GPSPlannerPoints::Builder::initCurPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::adoptCurPos(
    ::capnp::Orphan< ::cereal::ECEFPoint>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPoint> GPSPlannerPoints::Builder::disownCurPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPoints::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader GPSPlannerPoints::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPoints::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::setPoints( ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPoints::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPoints::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>> GPSPlannerPoints::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPlan::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GPSPlannerPlan::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPlan::Reader::hasPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader GPSPlannerPlan::Reader::getPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder GPSPlannerPlan::Builder::getPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setPoly( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GPSPlannerPlan::Builder::setPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder GPSPlannerPlan::Builder::initPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptPoly(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> GPSPlannerPlan::Builder::disownPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPlan::Reader::hasTrackName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasTrackName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSPlannerPlan::Reader::getTrackName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSPlannerPlan::Builder::getTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setTrackName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSPlannerPlan::Builder::initTrackName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptTrackName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSPlannerPlan::Builder::disownTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float GPSPlannerPlan::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPlan::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GPSPlannerPlan::Reader::getAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPlan::Builder::getAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPlan::Reader::hasPointsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasPointsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader GPSPlannerPlan::Reader::getPointsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPlan::Builder::getPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPlan::Builder::initPointsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptPointsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>> GPSPlannerPlan::Builder::disownPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPlan::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader GPSPlannerPlan::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPlan::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setPoints( ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder GPSPlannerPlan::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>> GPSPlannerPlan::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float GPSPlannerPlan::Reader::getXLookahead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPlan::Builder::getXLookahead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setXLookahead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UiNavigationEvent::Type UiNavigationEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::UiNavigationEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UiNavigationEvent::Type UiNavigationEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::UiNavigationEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UiNavigationEvent::Builder::setType( ::cereal::UiNavigationEvent::Type value) {
  _builder.setDataField< ::cereal::UiNavigationEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UiNavigationEvent::Status UiNavigationEvent::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::UiNavigationEvent::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UiNavigationEvent::Status UiNavigationEvent::Builder::getStatus() {
  return _builder.getDataField< ::cereal::UiNavigationEvent::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UiNavigationEvent::Builder::setStatus( ::cereal::UiNavigationEvent::Status value) {
  _builder.setDataField< ::cereal::UiNavigationEvent::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float UiNavigationEvent::Reader::getDistanceTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float UiNavigationEvent::Builder::getDistanceTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UiNavigationEvent::Builder::setDistanceTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UiNavigationEvent::Reader::hasEndRoadPointDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UiNavigationEvent::Builder::hasEndRoadPointDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPointDEPRECATED::Reader UiNavigationEvent::Reader::getEndRoadPointDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPointDEPRECATED::Builder UiNavigationEvent::Builder::getEndRoadPointDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPointDEPRECATED::Pipeline UiNavigationEvent::Pipeline::getEndRoadPointDEPRECATED() {
  return  ::cereal::ECEFPointDEPRECATED::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UiNavigationEvent::Builder::setEndRoadPointDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPointDEPRECATED::Builder UiNavigationEvent::Builder::initEndRoadPointDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UiNavigationEvent::Builder::adoptEndRoadPointDEPRECATED(
    ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> UiNavigationEvent::Builder::disownEndRoadPointDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UiNavigationEvent::Reader::hasEndRoadPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UiNavigationEvent::Builder::hasEndRoadPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPoint::Reader UiNavigationEvent::Reader::getEndRoadPoint() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPoint::Builder UiNavigationEvent::Builder::getEndRoadPoint() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPoint::Pipeline UiNavigationEvent::Pipeline::getEndRoadPoint() {
  return  ::cereal::ECEFPoint::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UiNavigationEvent::Builder::setEndRoadPoint( ::cereal::ECEFPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPoint::Builder UiNavigationEvent::Builder::initEndRoadPoint() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UiNavigationEvent::Builder::adoptEndRoadPoint(
    ::capnp::Orphan< ::cereal::ECEFPoint>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPoint> UiNavigationEvent::Builder::disownEndRoadPoint() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t LiveLocationData::Reader::getStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LiveLocationData::Builder::getStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationData::Reader::getLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double LiveLocationData::Builder::getLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationData::Reader::getLon() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double LiveLocationData::Builder::getLon() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setLon(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getAlt() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getAlt() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setAlt(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasVNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasVNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Reader::getVNED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::getVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setVNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setVNED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::initVNED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptVNED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Builder::disownVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float LiveLocationData::Reader::getRoll() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getRoll() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setRoll(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getPitch() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getPitch() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setPitch(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getWanderAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getWanderAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setWanderAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getTrackAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getTrackAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setTrackAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasGyro() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasGyro() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Reader::getGyro() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::getGyro() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setGyro( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setGyro(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::initGyro(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptGyro(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Builder::disownGyro() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Reader::hasAccel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasAccel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Reader::getAccel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::getAccel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setAccel( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setAccel(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::initAccel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptAccel(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Builder::disownAccel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Reader::hasAccuracy() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasAccuracy() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Accuracy::Reader LiveLocationData::Reader::getAccuracy() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Accuracy::Builder LiveLocationData::Builder::getAccuracy() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationData::Accuracy::Pipeline LiveLocationData::Pipeline::getAccuracy() {
  return  ::cereal::LiveLocationData::Accuracy::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void LiveLocationData::Builder::setAccuracy( ::cereal::LiveLocationData::Accuracy::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Accuracy::Builder LiveLocationData::Builder::initAccuracy() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::adoptAccuracy(
    ::capnp::Orphan< ::cereal::LiveLocationData::Accuracy>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData::Accuracy> LiveLocationData::Builder::disownAccuracy() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::cereal::LiveLocationData::SensorSource LiveLocationData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::LiveLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveLocationData::SensorSource LiveLocationData::Builder::getSource() {
  return _builder.getDataField< ::cereal::LiveLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setSource( ::cereal::LiveLocationData::SensorSource value) {
  _builder.setDataField< ::cereal::LiveLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveLocationData::Reader::getFixMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveLocationData::Builder::getFixMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setFixMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveLocationData::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveLocationData::Builder::getGpsWeek() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setGpsWeek( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationData::Reader::getTimeOfWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double LiveLocationData::Builder::getTimeOfWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setTimeOfWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Reader::getPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::getPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setPositionECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setPositionECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::initPositionECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptPositionECEF(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Builder::disownPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Reader::hasPoseQuatECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasPoseQuatECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Reader::getPoseQuatECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::getPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setPoseQuatECEF( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setPoseQuatECEF(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::initPoseQuatECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptPoseQuatECEF(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Builder::disownPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float LiveLocationData::Reader::getPitchCalibration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getPitchCalibration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setPitchCalibration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getYawCalibration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getYawCalibration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setYawCalibration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasImuFrame() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasImuFrame() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Reader::getImuFrame() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::getImuFrame() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setImuFrame( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setImuFrame(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Builder::initImuFrame(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptImuFrame(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Builder::disownImuFrame() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Accuracy::Reader::hasPNEDError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Accuracy::Builder::hasPNEDError() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Accuracy::Reader::getPNEDError() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Accuracy::Builder::getPNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Accuracy::Builder::setPNEDError( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Accuracy::Builder::setPNEDError(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Accuracy::Builder::initPNEDError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Accuracy::Builder::adoptPNEDError(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Accuracy::Builder::disownPNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Accuracy::Reader::hasVNEDError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Accuracy::Builder::hasVNEDError() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationData::Accuracy::Reader::getVNEDError() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Accuracy::Builder::getVNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Accuracy::Builder::setVNEDError( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Accuracy::Builder::setVNEDError(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationData::Accuracy::Builder::initVNEDError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Accuracy::Builder::adoptVNEDError(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLocationData::Accuracy::Builder::disownVNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float LiveLocationData::Accuracy::Reader::getRollError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getRollError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setRollError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getPitchError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getPitchError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setPitchError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getHeadingError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getHeadingError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setHeadingError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getEllipsoidSemiMajorError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getEllipsoidSemiMajorError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setEllipsoidSemiMajorError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getEllipsoidSemiMinorError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getEllipsoidSemiMinorError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setEllipsoidSemiMinorError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getEllipsoidOrientationError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getEllipsoidOrientationError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setEllipsoidOrientationError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbOdometry::Reader::getStartMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbOdometry::Builder::getStartMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setStartMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbOdometry::Reader::getEndMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbOdometry::Builder::getEndMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setEndMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OrbOdometry::Reader::hasF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbOdometry::Builder::hasF() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader OrbOdometry::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbOdometry::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbOdometry::Builder::setF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbOdometry::Builder::setF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbOdometry::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbOdometry::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> OrbOdometry::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double OrbOdometry::Reader::getErr() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double OrbOdometry::Builder::getErr() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setErr(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t OrbOdometry::Reader::getInliers() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t OrbOdometry::Builder::getInliers() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setInliers( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool OrbOdometry::Reader::hasMatches() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbOdometry::Builder::hasMatches() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader OrbOdometry::Reader::getMatches() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder OrbOdometry::Builder::getMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbOdometry::Builder::setMatches( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbOdometry::Builder::setMatches(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder OrbOdometry::Builder::initMatches(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbOdometry::Builder::adoptMatches(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> OrbOdometry::Builder::disownMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbFeatures::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeatures::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbFeatures::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbFeatures::Reader::hasXs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasXs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader OrbFeatures::Reader::getXs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::getXs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setXs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setXs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::initXs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptXs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> OrbFeatures::Builder::disownXs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbFeatures::Reader::hasYs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasYs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader OrbFeatures::Reader::getYs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::getYs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setYs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setYs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::initYs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptYs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> OrbFeatures::Builder::disownYs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OrbFeatures::Reader::hasDescriptors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasDescriptors() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader OrbFeatures::Reader::getDescriptors() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder OrbFeatures::Builder::getDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setDescriptors( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder OrbFeatures::Builder::initDescriptors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptDescriptors(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> OrbFeatures::Builder::disownDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool OrbFeatures::Reader::hasOctaves() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasOctaves() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader OrbFeatures::Reader::getOctaves() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::getOctaves() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setOctaves( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setOctaves(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::initOctaves(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptOctaves(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> OrbFeatures::Builder::disownOctaves() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbFeatures::Reader::getTimestampLastEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeatures::Builder::getTimestampLastEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrbFeatures::Builder::setTimestampLastEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OrbFeatures::Reader::hasMatches() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasMatches() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader OrbFeatures::Reader::getMatches() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::getMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setMatches( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setMatches(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder OrbFeatures::Builder::initMatches(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptMatches(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> OrbFeatures::Builder::disownMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbFeaturesSummary::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeaturesSummary::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbFeaturesSummary::Reader::getTimestampLastEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeaturesSummary::Builder::getTimestampLastEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setTimestampLastEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t OrbFeaturesSummary::Reader::getFeatureCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t OrbFeaturesSummary::Builder::getFeatureCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setFeatureCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t OrbFeaturesSummary::Reader::getMatchCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t OrbFeaturesSummary::Builder::getMatchCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setMatchCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbFeaturesSummary::Reader::getComputeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeaturesSummary::Builder::getComputeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setComputeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbKeyFrame::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbKeyFrame::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbKeyFrame::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbKeyFrame::Reader::hasPos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbKeyFrame::Builder::hasPos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPoint::Reader OrbKeyFrame::Reader::getPos() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPoint::Builder OrbKeyFrame::Builder::getPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPoint::Pipeline OrbKeyFrame::Pipeline::getPos() {
  return  ::cereal::ECEFPoint::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OrbKeyFrame::Builder::setPos( ::cereal::ECEFPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPoint::Builder OrbKeyFrame::Builder::initPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbKeyFrame::Builder::adoptPos(
    ::capnp::Orphan< ::cereal::ECEFPoint>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPoint> OrbKeyFrame::Builder::disownPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbKeyFrame::Reader::hasDpos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbKeyFrame::Builder::hasDpos() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader OrbKeyFrame::Reader::getDpos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder OrbKeyFrame::Builder::getDpos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbKeyFrame::Builder::setDpos( ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>::Builder OrbKeyFrame::Builder::initDpos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbKeyFrame::Builder::adoptDpos(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>> OrbKeyFrame::Builder::disownDpos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OrbKeyFrame::Reader::hasDescriptors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OrbKeyFrame::Builder::hasDescriptors() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader OrbKeyFrame::Reader::getDescriptors() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder OrbKeyFrame::Builder::getDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OrbKeyFrame::Builder::setDescriptors( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder OrbKeyFrame::Builder::initDescriptors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OrbKeyFrame::Builder::adoptDescriptors(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> OrbKeyFrame::Builder::disownDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader KalmanOdometry::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> KalmanOdometry::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader KalmanOdometry::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> KalmanOdometry::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader KalmanOdometry::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> KalmanOdometry::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader KalmanOdometry::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder KalmanOdometry::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> KalmanOdometry::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbObservation::Reader::getObservationMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbObservation::Builder::getObservationMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbObservation::Builder::setObservationMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbObservation::Reader::hasNormalizedCoordinates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbObservation::Builder::hasNormalizedCoordinates() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader OrbObservation::Reader::getNormalizedCoordinates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbObservation::Builder::getNormalizedCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbObservation::Builder::setNormalizedCoordinates( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbObservation::Builder::setNormalizedCoordinates(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder OrbObservation::Builder::initNormalizedCoordinates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbObservation::Builder::adoptNormalizedCoordinates(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> OrbObservation::Builder::disownNormalizedCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbObservation::Reader::hasLocationECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbObservation::Builder::hasLocationECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader OrbObservation::Reader::getLocationECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbObservation::Builder::getLocationECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbObservation::Builder::setLocationECEF( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbObservation::Builder::setLocationECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder OrbObservation::Builder::initLocationECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbObservation::Builder::adoptLocationECEF(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> OrbObservation::Builder::disownLocationECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t OrbObservation::Reader::getMatchDistance() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t OrbObservation::Builder::getMatchDistance() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrbObservation::Builder::setMatchDistance( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CalibrationFeatures::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CalibrationFeatures::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CalibrationFeatures::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CalibrationFeatures::Reader::hasP0() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasP0() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CalibrationFeatures::Reader::getP0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CalibrationFeatures::Builder::getP0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setP0( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setP0(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CalibrationFeatures::Builder::initP0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptP0(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CalibrationFeatures::Builder::disownP0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CalibrationFeatures::Reader::hasP1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasP1() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CalibrationFeatures::Reader::getP1() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CalibrationFeatures::Builder::getP1() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setP1( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setP1(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CalibrationFeatures::Builder::initP1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptP1(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CalibrationFeatures::Builder::disownP1() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CalibrationFeatures::Reader::hasStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader CalibrationFeatures::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder CalibrationFeatures::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setStatus( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setStatus(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder CalibrationFeatures::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptStatus(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> CalibrationFeatures::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavStatus::Reader::getIsNavigating() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NavStatus::Builder::getIsNavigating() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavStatus::Builder::setIsNavigating(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NavStatus::Reader::hasCurrentAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Builder::hasCurrentAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavStatus::Address::Reader NavStatus::Reader::getCurrentAddress() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavStatus::Address::Builder NavStatus::Builder::getCurrentAddress() {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavStatus::Address::Pipeline NavStatus::Pipeline::getCurrentAddress() {
  return  ::cereal::NavStatus::Address::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavStatus::Builder::setCurrentAddress( ::cereal::NavStatus::Address::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavStatus::Address::Builder NavStatus::Builder::initCurrentAddress() {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavStatus::Builder::adoptCurrentAddress(
    ::capnp::Orphan< ::cereal::NavStatus::Address>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavStatus::Address> NavStatus::Builder::disownCurrentAddress() {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasTitle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasTitle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double NavStatus::Address::Reader::getLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NavStatus::Address::Builder::getLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavStatus::Address::Builder::setLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NavStatus::Address::Reader::getLng() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NavStatus::Address::Builder::getLng() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavStatus::Address::Builder::setLng(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavStatus::Address::Reader::hasHouse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasHouse() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getHouse() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getHouse() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setHouse( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initHouse(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptHouse(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownHouse() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setAddress( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptAddress(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasStreet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasStreet() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getStreet() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getStreet() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setStreet( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initStreet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptStreet(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownStreet() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasCity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasCity() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getCity() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getCity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setCity( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initCity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptCity(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownCity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasCountry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasCountry() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getCountry() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setCountry( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initCountry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptCountry(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool NavUpdate::Reader::getIsNavigating() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NavUpdate::Builder::getIsNavigating() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Builder::setIsNavigating(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Reader::getCurSegment() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Builder::getCurSegment() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Builder::setCurSegment( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Reader::hasSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Builder::hasSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Reader NavUpdate::Reader::getSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Builder NavUpdate::Builder::getSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavUpdate::Builder::setSegments( ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>::Builder NavUpdate::Builder::initSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavUpdate::Builder::adoptSegments(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>> NavUpdate::Builder::disownSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double NavUpdate::LatLng::Reader::getLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NavUpdate::LatLng::Builder::getLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::LatLng::Builder::setLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NavUpdate::LatLng::Reader::getLng() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NavUpdate::LatLng::Builder::getLng() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::LatLng::Builder::setLng(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Segment::Reader::hasFrom() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Segment::Builder::hasFrom() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavUpdate::LatLng::Reader NavUpdate::Segment::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavUpdate::LatLng::Pipeline NavUpdate::Segment::Pipeline::getFrom() {
  return  ::cereal::NavUpdate::LatLng::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavUpdate::Segment::Builder::setFrom( ::cereal::NavUpdate::LatLng::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::initFrom() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavUpdate::Segment::Builder::adoptFrom(
    ::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> NavUpdate::Segment::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavUpdate::Segment::Reader::hasTo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Segment::Builder::hasTo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavUpdate::LatLng::Reader NavUpdate::Segment::Reader::getTo() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::getTo() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavUpdate::LatLng::Pipeline NavUpdate::Segment::Pipeline::getTo() {
  return  ::cereal::NavUpdate::LatLng::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void NavUpdate::Segment::Builder::setTo( ::cereal::NavUpdate::LatLng::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::initTo() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavUpdate::Segment::Builder::adoptTo(
    ::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> NavUpdate::Segment::Builder::disownTo() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t NavUpdate::Segment::Reader::getUpdateTime() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getUpdateTime() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setUpdateTime( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Segment::Reader::getDistance() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getDistance() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setDistance( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Segment::Reader::getCrossTime() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getCrossTime() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setCrossTime( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Segment::Reader::getExitNo() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getExitNo() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setExitNo( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::NavUpdate::Segment::Instruction NavUpdate::Segment::Reader::getInstruction() const {
  return _reader.getDataField< ::cereal::NavUpdate::Segment::Instruction>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::cereal::NavUpdate::Segment::Instruction NavUpdate::Segment::Builder::getInstruction() {
  return _builder.getDataField< ::cereal::NavUpdate::Segment::Instruction>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setInstruction( ::cereal::NavUpdate::Segment::Instruction value) {
  _builder.setDataField< ::cereal::NavUpdate::Segment::Instruction>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Segment::Reader::hasParts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Segment::Builder::hasParts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Reader NavUpdate::Segment::Reader::getParts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Builder NavUpdate::Segment::Builder::getParts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavUpdate::Segment::Builder::setParts( ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>::Builder NavUpdate::Segment::Builder::initParts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavUpdate::Segment::Builder::adoptParts(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>> NavUpdate::Segment::Builder::disownParts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::TrafficEvent::Type TrafficEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::TrafficEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::TrafficEvent::Type TrafficEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::TrafficEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setType( ::cereal::TrafficEvent::Type value) {
  _builder.setDataField< ::cereal::TrafficEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float TrafficEvent::Reader::getDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TrafficEvent::Builder::getDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::TrafficEvent::Action TrafficEvent::Reader::getAction() const {
  return _reader.getDataField< ::cereal::TrafficEvent::Action>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::TrafficEvent::Action TrafficEvent::Builder::getAction() {
  return _builder.getDataField< ::cereal::TrafficEvent::Action>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setAction( ::cereal::TrafficEvent::Action value) {
  _builder.setDataField< ::cereal::TrafficEvent::Action>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficEvent::Reader::getResuming() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool TrafficEvent::Builder::getResuming() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setResuming(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::AndroidGnss::Which AndroidGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::AndroidGnss::Which AndroidGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Reader::isMeasurements() const {
  return which() == AndroidGnss::MEASUREMENTS;
}
inline bool AndroidGnss::Builder::isMeasurements() {
  return which() == AndroidGnss::MEASUREMENTS;
}
inline bool AndroidGnss::Reader::hasMeasurements() const {
  if (which() != AndroidGnss::MEASUREMENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Builder::hasMeasurements() {
  if (which() != AndroidGnss::MEASUREMENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::Measurements::Reader AndroidGnss::Reader::getMeasurements() const {
  KJ_IREQUIRE((which() == AndroidGnss::MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::Measurements::Builder AndroidGnss::Builder::getMeasurements() {
  KJ_IREQUIRE((which() == AndroidGnss::MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::setMeasurements( ::cereal::AndroidGnss::Measurements::Reader value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::Measurements::Builder AndroidGnss::Builder::initMeasurements() {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::MEASUREMENTS);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::adoptMeasurements(
    ::capnp::Orphan< ::cereal::AndroidGnss::Measurements>&& value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements> AndroidGnss::Builder::disownMeasurements() {
  KJ_IREQUIRE((which() == AndroidGnss::MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidGnss::Reader::isNavigationMessage() const {
  return which() == AndroidGnss::NAVIGATION_MESSAGE;
}
inline bool AndroidGnss::Builder::isNavigationMessage() {
  return which() == AndroidGnss::NAVIGATION_MESSAGE;
}
inline bool AndroidGnss::Reader::hasNavigationMessage() const {
  if (which() != AndroidGnss::NAVIGATION_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Builder::hasNavigationMessage() {
  if (which() != AndroidGnss::NAVIGATION_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::NavigationMessage::Reader AndroidGnss::Reader::getNavigationMessage() const {
  KJ_IREQUIRE((which() == AndroidGnss::NAVIGATION_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::NavigationMessage::Builder AndroidGnss::Builder::getNavigationMessage() {
  KJ_IREQUIRE((which() == AndroidGnss::NAVIGATION_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::setNavigationMessage( ::cereal::AndroidGnss::NavigationMessage::Reader value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::NAVIGATION_MESSAGE);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::NavigationMessage::Builder AndroidGnss::Builder::initNavigationMessage() {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::NAVIGATION_MESSAGE);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::adoptNavigationMessage(
    ::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage>&& value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::NAVIGATION_MESSAGE);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage> AndroidGnss::Builder::disownNavigationMessage() {
  KJ_IREQUIRE((which() == AndroidGnss::NAVIGATION_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidGnss::Measurements::Reader::hasClock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Measurements::Builder::hasClock() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::Measurements::Clock::Reader AndroidGnss::Measurements::Reader::getClock() const {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::Measurements::Clock::Builder AndroidGnss::Measurements::Builder::getClock() {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::AndroidGnss::Measurements::Clock::Pipeline AndroidGnss::Measurements::Pipeline::getClock() {
  return  ::cereal::AndroidGnss::Measurements::Clock::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AndroidGnss::Measurements::Builder::setClock( ::cereal::AndroidGnss::Measurements::Clock::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::Measurements::Clock::Builder AndroidGnss::Measurements::Builder::initClock() {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Measurements::Builder::adoptClock(
    ::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock> AndroidGnss::Measurements::Builder::disownClock() {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidGnss::Measurements::Reader::hasMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Measurements::Builder::hasMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Reader AndroidGnss::Measurements::Reader::getMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Builder AndroidGnss::Measurements::Builder::getMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Measurements::Builder::setMeasurements( ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>::Builder AndroidGnss::Measurements::Builder::initMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AndroidGnss::Measurements::Builder::adoptMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>> AndroidGnss::Measurements::Builder::disownMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Reader::getTimeNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Builder::getTimeNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setTimeNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Reader::getHardwareClockDiscontinuityCount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Builder::getHardwareClockDiscontinuityCount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHardwareClockDiscontinuityCount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasTimeUncertaintyNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasTimeUncertaintyNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasTimeUncertaintyNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getTimeUncertaintyNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getTimeUncertaintyNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setTimeUncertaintyNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasLeapSecond() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasLeapSecond() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasLeapSecond(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Reader::getLeapSecond() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Builder::getLeapSecond() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setLeapSecond( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasFullBiasNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasFullBiasNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasFullBiasNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Reader::getFullBiasNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Builder::getFullBiasNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setFullBiasNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasBiasNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasBiasNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasBiasNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getBiasNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getBiasNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setBiasNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasBiasUncertaintyNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasBiasUncertaintyNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasBiasUncertaintyNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getBiasUncertaintyNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getBiasUncertaintyNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setBiasUncertaintyNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasDriftNanosPerSecond() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasDriftNanosPerSecond() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasDriftNanosPerSecond(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getDriftNanosPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getDriftNanosPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setDriftNanosPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasDriftUncertaintyNanosPerSecond() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasDriftUncertaintyNanosPerSecond() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasDriftUncertaintyNanosPerSecond(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getDriftUncertaintyNanosPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getDriftUncertaintyNanosPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setDriftUncertaintyNanosPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Reader::getSvId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Builder::getSvId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setSvId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation AndroidGnss::Measurements::Measurement::Reader::getConstellation() const {
  return _reader.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::Constellation>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation AndroidGnss::Measurements::Measurement::Builder::getConstellation() {
  return _builder.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::Constellation>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setConstellation( ::cereal::AndroidGnss::Measurements::Measurement::Constellation value) {
  _builder.setDataField< ::cereal::AndroidGnss::Measurements::Measurement::Constellation>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getTimeOffsetNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getTimeOffsetNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setTimeOffsetNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Reader::getState() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Builder::getState() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setState( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Reader::getReceivedSvTimeNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Builder::getReceivedSvTimeNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setReceivedSvTimeNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Reader::getReceivedSvTimeUncertaintyNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Builder::getReceivedSvTimeUncertaintyNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setReceivedSvTimeUncertaintyNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getCn0DbHz() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getCn0DbHz() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCn0DbHz(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getPseudorangeRateMetersPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getPseudorangeRateMetersPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setPseudorangeRateMetersPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getPseudorangeRateUncertaintyMetersPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getPseudorangeRateUncertaintyMetersPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setPseudorangeRateUncertaintyMetersPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Reader::getAccumulatedDeltaRangeState() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Builder::getAccumulatedDeltaRangeState() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setAccumulatedDeltaRangeState( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getAccumulatedDeltaRangeMeters() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getAccumulatedDeltaRangeMeters() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setAccumulatedDeltaRangeMeters(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getAccumulatedDeltaRangeUncertaintyMeters() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getAccumulatedDeltaRangeUncertaintyMeters() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setAccumulatedDeltaRangeUncertaintyMeters(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierFrequencyHz() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierFrequencyHz() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierFrequencyHz(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline float AndroidGnss::Measurements::Measurement::Reader::getCarrierFrequencyHz() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float AndroidGnss::Measurements::Measurement::Builder::getCarrierFrequencyHz() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierFrequencyHz(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierCycles() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierCycles() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierCycles(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Reader::getCarrierCycles() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Builder::getCarrierCycles() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierCycles( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierPhase() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierPhase() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierPhase(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getCarrierPhase() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getCarrierPhase() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierPhase(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierPhaseUncertainty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierPhaseUncertainty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierPhaseUncertainty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getCarrierPhaseUncertainty() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getCarrierPhaseUncertainty() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierPhaseUncertainty(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasSnrInDb() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasSnrInDb() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasSnrInDb(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getSnrInDb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getSnrInDb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setSnrInDb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator AndroidGnss::Measurements::Measurement::Reader::getMultipathIndicator() const {
  return _reader.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator AndroidGnss::Measurements::Measurement::Builder::getMultipathIndicator() {
  return _builder.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setMultipathIndicator( ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator value) {
  _builder.setDataField< ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getSvId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getSvId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setSvId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getMessageId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getMessageId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setMessageId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getSubmessageId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getSubmessageId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setSubmessageId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::NavigationMessage::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::NavigationMessage::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AndroidGnss::NavigationMessage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AndroidGnss::NavigationMessage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::NavigationMessage::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AndroidGnss::NavigationMessage::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AndroidGnss::NavigationMessage::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AndroidGnss::NavigationMessage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::AndroidGnss::NavigationMessage::Status AndroidGnss::NavigationMessage::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::AndroidGnss::NavigationMessage::Status>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::cereal::AndroidGnss::NavigationMessage::Status AndroidGnss::NavigationMessage::Builder::getStatus() {
  return _builder.getDataField< ::cereal::AndroidGnss::NavigationMessage::Status>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setStatus( ::cereal::AndroidGnss::NavigationMessage::Status value) {
  _builder.setDataField< ::cereal::AndroidGnss::NavigationMessage::Status>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LidarPts::Reader::hasR() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasR() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader LidarPts::Reader::getR() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarPts::Builder::getR() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setR( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LidarPts::Builder::setR(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarPts::Builder::initR(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptR(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> LidarPts::Builder::disownR() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LidarPts::Reader::hasTheta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasTheta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader LidarPts::Reader::getTheta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarPts::Builder::getTheta() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setTheta( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LidarPts::Builder::setTheta(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarPts::Builder::initTheta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptTheta(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> LidarPts::Builder::disownTheta() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LidarPts::Reader::hasReflect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasReflect() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader LidarPts::Reader::getReflect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarPts::Builder::getReflect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setReflect( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LidarPts::Builder::setReflect(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarPts::Builder::initReflect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptReflect(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> LidarPts::Builder::disownReflect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t LidarPts::Reader::getIdx() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LidarPts::Builder::getIdx() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LidarPts::Builder::setIdx( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LidarPts::Reader::hasPkt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasPkt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LidarPts::Reader::getPkt() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LidarPts::Builder::getPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setPkt( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LidarPts::Builder::initPkt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptPkt(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LidarPts::Builder::disownPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

