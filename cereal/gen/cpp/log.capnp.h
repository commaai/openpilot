// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: log.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "car.capnp.h"
#include "custom.capnp.h"
#include "legacy.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d578fb3372ed5043);
CAPNP_DECLARE_SCHEMA(f8b13ce2183eb696);
CAPNP_DECLARE_SCHEMA(a5dfdd084a6eea0e);
CAPNP_DECLARE_SCHEMA(c4fa6047f024e718);
CAPNP_DECLARE_SCHEMA(91f1992a1f77fb03);
enum class EventName_91f1992a1f77fb03: uint16_t {
  CAN_ERROR,
  STEER_UNAVAILABLE,
  WRONG_GEAR,
  DOOR_OPEN,
  SEATBELT_NOT_LATCHED,
  ESP_DISABLED,
  WRONG_CAR_MODE,
  STEER_TEMP_UNAVAILABLE,
  REVERSE_GEAR,
  BUTTON_CANCEL,
  BUTTON_ENABLE,
  PEDAL_PRESSED,
  PRE_ENABLE_STANDSTILL,
  GAS_PRESSED_OVERRIDE,
  STEER_OVERRIDE,
  CRUISE_DISABLED,
  SPEED_TOO_LOW,
  OUT_OF_SPACE,
  OVERHEAT,
  CALIBRATION_INCOMPLETE,
  CALIBRATION_INVALID,
  CALIBRATION_RECALIBRATING,
  CONTROLS_MISMATCH,
  PCM_ENABLE,
  PCM_DISABLE,
  RADAR_FAULT,
  BRAKE_HOLD,
  PARK_BRAKE,
  MANUAL_RESTART,
  JOYSTICK_DEBUG,
  LONGITUDINAL_MANEUVER,
  STEER_TEMP_UNAVAILABLE_SILENT,
  RESUME_REQUIRED,
  PRE_DRIVER_DISTRACTED,
  PROMPT_DRIVER_DISTRACTED,
  DRIVER_DISTRACTED,
  PRE_DRIVER_UNRESPONSIVE,
  PROMPT_DRIVER_UNRESPONSIVE,
  DRIVER_UNRESPONSIVE,
  BELOW_STEER_SPEED,
  LOW_BATTERY,
  ACC_FAULTED,
  SENSOR_DATA_INVALID,
  COMM_ISSUE,
  COMM_ISSUE_AVG_FREQ,
  TOO_DISTRACTED,
  POSENET_INVALID,
  SOUNDS_UNAVAILABLE_D_E_P_R_E_C_A_T_E_D,
  PRE_LANE_CHANGE_LEFT,
  PRE_LANE_CHANGE_RIGHT,
  LANE_CHANGE,
  LOW_MEMORY,
  STOCK_AEB,
  LDW,
  CAR_UNRECOGNIZED,
  INVALID_LKAS_SETTING,
  SPEED_TOO_HIGH,
  LANE_CHANGE_BLOCKED,
  RELAY_MALFUNCTION,
  STOCK_FCW,
  STARTUP,
  STARTUP_NO_CAR,
  STARTUP_NO_CONTROL,
  STARTUP_NO_SEC_OC_KEY,
  STARTUP_MASTER,
  FCW,
  STEER_SATURATED,
  BELOW_ENGAGE_SPEED,
  NO_GPS,
  WRONG_CRUISE_MODE,
  MODELD_LAGGING,
  DEVICE_FALLING,
  FAN_MALFUNCTION,
  CAMERA_MALFUNCTION,
  CAMERA_FRAME_RATE,
  PROCESS_NOT_RUNNING,
  DASHCAM_MODE,
  SELFDRIVE_INITIALIZING,
  USB_ERROR,
  CRUISE_MISMATCH,
  CAN_BUS_MISSING,
  SELFDRIVED_LAGGING,
  RESUME_BLOCKED,
  STEER_TIME_LIMIT,
  VEHICLE_SENSORS_INVALID,
  LOCATIOND_TEMPORARY_ERROR,
  LOCATIOND_PERMANENT_ERROR,
  PARAMSD_TEMPORARY_ERROR,
  PARAMSD_PERMANENT_ERROR,
  ACTUATORS_API_UNAVAILABLE,
  ESP_ACTIVE,
  PERSONALITY_CHANGED,
  AEB,
  RADAR_TEMP_UNAVAILABLE,
  STEER_DISENGAGE,
  USER_BOOKMARK,
  EXCESSIVE_ACTUATION,
  AUDIO_FEEDBACK,
};
CAPNP_DECLARE_ENUM(EventName, 91f1992a1f77fb03);
CAPNP_DECLARE_SCHEMA(d692e23d1a247d99);
enum class LongitudinalPersonality_d692e23d1a247d99: uint16_t {
  AGGRESSIVE,
  STANDARD,
  RELAXED,
};
CAPNP_DECLARE_ENUM(LongitudinalPersonality, d692e23d1a247d99);
CAPNP_DECLARE_SCHEMA(e71008caeb3fb65c);
CAPNP_DECLARE_SCHEMA(9d5d7238eba86608);
enum class DeviceType_9d5d7238eba86608: uint16_t {
  UNKNOWN,
  NEO,
  CHFFR_ANDROID,
  CHFFR_IOS,
  TICI,
  PC,
  TIZI,
  MICI,
};
CAPNP_DECLARE_ENUM(DeviceType, 9d5d7238eba86608);
CAPNP_DECLARE_SCHEMA(e673e8725cdff0ad);
CAPNP_DECLARE_SCHEMA(fe2919d5c21f426c);
CAPNP_DECLARE_SCHEMA(9b513b93a887dbcd);
CAPNP_DECLARE_SCHEMA(9cfb5d53a4f615a5);
CAPNP_DECLARE_SCHEMA(d97e3b28239f5580);
CAPNP_DECLARE_SCHEMA(ea0245f695ae0a33);
CAPNP_DECLARE_SCHEMA(a37f0d8558e193fd);
enum class FrameTypeDEPRECATED_a37f0d8558e193fd: uint16_t {
  UNKNOWN,
  NEO,
  CHFFR_ANDROID,
  FRONT,
};
CAPNP_DECLARE_ENUM(FrameTypeDEPRECATED, a37f0d8558e193fd);
CAPNP_DECLARE_SCHEMA(d810b1e7705dd69c);
enum class ImageSensor_d810b1e7705dd69c: uint16_t {
  UNKNOWN,
  AR0231,
  OX03C10,
  OS04C10,
};
CAPNP_DECLARE_ENUM(ImageSensor, d810b1e7705dd69c);
CAPNP_DECLARE_SCHEMA(bcc3efbac41d2048);
CAPNP_DECLARE_SCHEMA(b65fce64120af7d3);
CAPNP_DECLARE_SCHEMA(ce7b9bb221c070c2);
enum class Encoding_ce7b9bb221c070c2: uint16_t {
  UNKNOWN,
  JPEG,
  KEYFRAME,
};
CAPNP_DECLARE_ENUM(Encoding, ce7b9bb221c070c2);
CAPNP_DECLARE_SCHEMA(9d291d7813ba4a88);
CAPNP_DECLARE_SCHEMA(a2b29a69d44529a1);
CAPNP_DECLARE_SCHEMA(a43429bd2bfc24fc);
CAPNP_DECLARE_SCHEMA(e49b3ce8f7f48d0d);
enum class SensorSource_e49b3ce8f7f48d0d: uint16_t {
  ANDROID,
  I_O_S,
  FIBER,
  VELODYNE,
  BNO055,
  LSM6DS3,
  BMP280,
  MMC3416X,
  BMX055,
  RPR0521,
  LSM6DS3TRC,
  MMC5603NJ,
};
CAPNP_DECLARE_ENUM(SensorSource, e49b3ce8f7f48d0d);
CAPNP_DECLARE_SCHEMA(e946524859add50e);
CAPNP_DECLARE_SCHEMA(d3ff79f25c734863);
enum class SensorSource_d3ff79f25c734863: uint16_t {
  ANDROID,
  I_O_S,
  CAR,
  VELODYNE,
  FUSION,
  EXTERNAL,
  UBLOX,
  TRIMBLE,
  QCOMDIAG,
  UNICORE,
};
CAPNP_DECLARE_ENUM(SensorSource, d3ff79f25c734863);
CAPNP_DECLARE_SCHEMA(ae674a34ba421466);
enum class Desire_ae674a34ba421466: uint16_t {
  NONE,
  TURN_LEFT,
  TURN_RIGHT,
  LANE_CHANGE_LEFT,
  LANE_CHANGE_RIGHT,
  KEEP_LEFT,
  KEEP_RIGHT,
};
CAPNP_DECLARE_ENUM(Desire, ae674a34ba421466);
CAPNP_DECLARE_SCHEMA(cd37924bf7b2d3d2);
enum class LaneChangeState_cd37924bf7b2d3d2: uint16_t {
  OFF,
  PRE_LANE_CHANGE,
  LANE_CHANGE_STARTING,
  LANE_CHANGE_FINISHING,
};
CAPNP_DECLARE_ENUM(LaneChangeState, cd37924bf7b2d3d2);
CAPNP_DECLARE_SCHEMA(9d0bc0c1fe671176);
enum class LaneChangeDirection_9d0bc0c1fe671176: uint16_t {
  NONE,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(LaneChangeDirection, 9d0bc0c1fe671176);
CAPNP_DECLARE_SCHEMA(8785009a964c7c59);
CAPNP_DECLARE_SCHEMA(a4d8b5af2aa492eb);
CAPNP_DECLARE_SCHEMA(d0790029853df66f);
CAPNP_DECLARE_SCHEMA(af0f7110c254f77e);
enum class ThermalStatus_af0f7110c254f77e: uint16_t {
  GREEN,
  YELLOW,
  RED,
  DANGER,
};
CAPNP_DECLARE_ENUM(ThermalStatus, af0f7110c254f77e);
CAPNP_DECLARE_SCHEMA(bbc79cc958d1049d);
enum class NetworkType_bbc79cc958d1049d: uint16_t {
  NONE,
  WIFI,
  CELL2_G,
  CELL3_G,
  CELL4_G,
  CELL5_G,
  ETHERNET,
};
CAPNP_DECLARE_ENUM(NetworkType, bbc79cc958d1049d);
CAPNP_DECLARE_SCHEMA(dd308c8a13203e13);
enum class NetworkStrength_dd308c8a13203e13: uint16_t {
  UNKNOWN,
  POOR,
  MODERATE,
  GOOD,
  GREAT,
};
CAPNP_DECLARE_ENUM(NetworkStrength, dd308c8a13203e13);
CAPNP_DECLARE_SCHEMA(9d57532d82c04afc);
CAPNP_DECLARE_SCHEMA(b98c64ea27898ea0);
CAPNP_DECLARE_SCHEMA(a7649e2575e4591e);
CAPNP_DECLARE_SCHEMA(f2fd0b8b0ac9adbb);
enum class FaultStatus_f2fd0b8b0ac9adbb: uint16_t {
  NONE,
  FAULT_TEMP,
  FAULT_PERM,
};
CAPNP_DECLARE_ENUM(FaultStatus, f2fd0b8b0ac9adbb);
CAPNP_DECLARE_SCHEMA(cd55c07f69249798);
enum class FaultType_cd55c07f69249798: uint16_t {
  RELAY_MALFUNCTION,
  UNUSED_INTERRUPT_HANDLED,
  INTERRUPT_RATE_CAN1,
  INTERRUPT_RATE_CAN2,
  INTERRUPT_RATE_CAN3,
  INTERRUPT_RATE_TACH,
  INTERRUPT_RATE_GMLAN_D_E_P_R_E_C_A_T_E_D,
  INTERRUPT_RATE_INTERRUPTS,
  INTERRUPT_RATE_SPI_DMA,
  INTERRUPT_RATE_SPI_CS,
  INTERRUPT_RATE_UART1,
  INTERRUPT_RATE_UART2,
  INTERRUPT_RATE_UART3,
  INTERRUPT_RATE_UART5,
  INTERRUPT_RATE_UART_DMA,
  INTERRUPT_RATE_USB,
  INTERRUPT_RATE_TIM1,
  INTERRUPT_RATE_TIM3,
  REGISTER_DIVERGENT,
  INTERRUPT_RATE_KLINE_INIT,
  INTERRUPT_RATE_CLOCK_SOURCE,
  INTERRUPT_RATE_TICK,
  INTERRUPT_RATE_EXTI,
  INTERRUPT_RATE_SPI,
  INTERRUPT_RATE_UART7,
  SIREN_MALFUNCTION,
  HEARTBEAT_LOOP_WATCHDOG,
};
CAPNP_DECLARE_ENUM(FaultType, cd55c07f69249798);
CAPNP_DECLARE_SCHEMA(8a58adf93e5b3751);
enum class PandaType_8a58adf93e5b3751: uint16_t {
  UNKNOWN,
  WHITE_PANDA,
  GREY_PANDA,
  BLACK_PANDA,
  PEDAL,
  UNO,
  DOS,
  RED_PANDA,
  RED_PANDA_V2,
  TRES,
  CUATRO,
};
CAPNP_DECLARE_ENUM(PandaType, 8a58adf93e5b3751);
CAPNP_DECLARE_SCHEMA(f69a3ed1e8c081bf);
enum class HarnessStatus_f69a3ed1e8c081bf: uint16_t {
  NOT_CONNECTED,
  NORMAL,
  FLIPPED,
};
CAPNP_DECLARE_ENUM(HarnessStatus, f69a3ed1e8c081bf);
CAPNP_DECLARE_SCHEMA(f8d2972deb0cd45c);
CAPNP_DECLARE_SCHEMA(c0db50b4d13283ff);
enum class LecErrorCode_c0db50b4d13283ff: uint16_t {
  NO_ERROR,
  STUFF_ERROR,
  FORM_ERROR,
  ACK_ERROR,
  BIT1_ERROR,
  BIT0_ERROR,
  CRC_ERROR,
  NO_CHANGE,
};
CAPNP_DECLARE_ENUM(LecErrorCode, c0db50b4d13283ff);
CAPNP_DECLARE_SCHEMA(ceb8f49734857a88);
CAPNP_DECLARE_SCHEMA(a8883583b32c9877);
enum class UsbPowerModeDEPRECATED_a8883583b32c9877: uint16_t {
  NONE,
  CLIENT,
  CDP,
  DCP,
};
CAPNP_DECLARE_ENUM(UsbPowerModeDEPRECATED, a8883583b32c9877);
CAPNP_DECLARE_SCHEMA(9a185389d6fdd05f);
CAPNP_DECLARE_SCHEMA(b96f3ad9170cf085);
CAPNP_DECLARE_SCHEMA(96df70754d8390bc);
CAPNP_DECLARE_SCHEMA(caaa029466ad394d);
enum class Status_caaa029466ad394d: uint16_t {
  UNCALIBRATED,
  CALIBRATED,
  INVALID,
  RECALIBRATING,
};
CAPNP_DECLARE_ENUM(Status, caaa029466ad394d);
CAPNP_DECLARE_SCHEMA(b16f60103159415a);
CAPNP_DECLARE_SCHEMA(b52430dc48f4a83b);
CAPNP_DECLARE_SCHEMA(dbe58b96d2d1ac61);
enum class OpenpilotState_dbe58b96d2d1ac61: uint16_t {
  DISABLED,
  PRE_ENABLED,
  ENABLED,
  SOFT_DISABLING,
  OVERRIDING,
};
CAPNP_DECLARE_ENUM(OpenpilotState, dbe58b96d2d1ac61);
CAPNP_DECLARE_SCHEMA(a0d0dcd113193c62);
enum class AlertStatus_a0d0dcd113193c62: uint16_t {
  NORMAL,
  USER_PROMPT,
  CRITICAL,
};
CAPNP_DECLARE_ENUM(AlertStatus, a0d0dcd113193c62);
CAPNP_DECLARE_SCHEMA(e98bb99d6e985f64);
enum class AlertSize_e98bb99d6e985f64: uint16_t {
  NONE,
  SMALL,
  MID,
  FULL,
};
CAPNP_DECLARE_ENUM(AlertSize, e98bb99d6e985f64);
CAPNP_DECLARE_SCHEMA(97ff69c53601abf1);
CAPNP_DECLARE_SCHEMA(939463348632375e);
CAPNP_DECLARE_SCHEMA(f28c5dc9e09375e3);
CAPNP_DECLARE_SCHEMA(e774a050cbf689a4);
CAPNP_DECLARE_SCHEMA(9024e2d790c82ade);
CAPNP_DECLARE_SCHEMA(a2e4ea88ac9980f1);
CAPNP_DECLARE_SCHEMA(ad9d8095c06f7c61);
CAPNP_DECLARE_SCHEMA(a63a46f0f2889b2d);
CAPNP_DECLARE_SCHEMA(fd5b914d6b444695);
CAPNP_DECLARE_SCHEMA(e8f9ba819993a776);
CAPNP_DECLARE_SCHEMA(ca1e4710874d12b5);
CAPNP_DECLARE_SCHEMA(996ef0369d7e5625);
CAPNP_DECLARE_SCHEMA(a0cfcfa4ed19ac5d);
CAPNP_DECLARE_SCHEMA(c3cbae1fd505ae80);
CAPNP_DECLARE_SCHEMA(c4713f6b0d36abe9);
CAPNP_DECLARE_SCHEMA(a444ed2b2187af28);
CAPNP_DECLARE_SCHEMA(d698881ad0ce7feb);
CAPNP_DECLARE_SCHEMA(d1646ab3b45cfabd);
CAPNP_DECLARE_SCHEMA(aa3247d9d2a61cd4);
enum class ConfidenceClass_aa3247d9d2a61cd4: uint16_t {
  RED,
  YELLOW,
  GREEN,
};
CAPNP_DECLARE_ENUM(ConfidenceClass, aa3247d9d2a61cd4);
CAPNP_DECLARE_SCHEMA(860aa5ddbcdc8d25);
CAPNP_DECLARE_SCHEMA(fb3ec0702e67884f);
CAPNP_DECLARE_SCHEMA(84caeca5a6b4acfe);
CAPNP_DECLARE_SCHEMA(94d0bcb35a764584);
CAPNP_DECLARE_SCHEMA(89d394e3541735fc);
CAPNP_DECLARE_SCHEMA(c0ad259ec157ccd3);
enum class Type_c0ad259ec157ccd3: uint16_t {
  BIG_BOX_LOSSLESS,
  FULL_H_E_V_C,
  BIG_BOX_H_E_V_C_D_E_P_R_E_C_A_T_E_D,
  CHFFR_ANDROID_H264_D_E_P_R_E_C_A_T_E_D,
  FULL_LOSSLESS_CLIP_D_E_P_R_E_C_A_T_E_D,
  FRONT_D_E_P_R_E_C_A_T_E_D,
  QCAMERA_H264,
  LIVESTREAM_H264,
};
CAPNP_DECLARE_ENUM(Type, c0ad259ec157ccd3);
CAPNP_DECLARE_SCHEMA(ea095da1894f7d85);
CAPNP_DECLARE_SCHEMA(9b669f73a9c1cfbc);
CAPNP_DECLARE_SCHEMA(e00b5b3eba12876c);
CAPNP_DECLARE_SCHEMA(b231a753cc079120);
enum class LongitudinalPlanSource_b231a753cc079120: uint16_t {
  CRUISE,
  LEAD0,
  LEAD1,
  LEAD2,
  E2E,
};
CAPNP_DECLARE_ENUM(LongitudinalPlanSource, b231a753cc079120);
CAPNP_DECLARE_SCHEMA(8cfeb072f5301000);
CAPNP_DECLARE_SCHEMA(fc0c9bb05e3927c1);
CAPNP_DECLARE_SCHEMA(e1e9318e2ae8b51e);
CAPNP_DECLARE_SCHEMA(fdca7c675b7021c6);
CAPNP_DECLARE_SCHEMA(ebc5703d1ee7c129);
CAPNP_DECLARE_SCHEMA(8e4dc8cc4b51fc01);
enum class Status_8e4dc8cc4b51fc01: uint16_t {
  UNINITIALIZED,
  UNCALIBRATED,
  VALID,
};
CAPNP_DECLARE_ENUM(Status, 8e4dc8cc4b51fc01);
CAPNP_DECLARE_SCHEMA(bf23f9ed66dace1c);
CAPNP_DECLARE_SCHEMA(c24ca2b57206b44d);
CAPNP_DECLARE_SCHEMA(f9c93a8733ccd82b);
CAPNP_DECLARE_SCHEMA(dacbb6c4e0cb5f66);
CAPNP_DECLARE_SCHEMA(81065ba2cacc8266);
CAPNP_DECLARE_SCHEMA(af85387b3f681406);
CAPNP_DECLARE_SCHEMA(b0b85613f19e6d28);
CAPNP_DECLARE_SCHEMA(f189c8c5bf2ce087);
CAPNP_DECLARE_SCHEMA(fd095f94f08b3fd4);
CAPNP_DECLARE_SCHEMA(afd47016570e9d09);
CAPNP_DECLARE_SCHEMA(f3286be6a8bfb860);
CAPNP_DECLARE_SCHEMA(eaa4a17d86ac76b0);
CAPNP_DECLARE_SCHEMA(bcc2ef5087c0ad85);
CAPNP_DECLARE_SCHEMA(82079c2ea8450877);
enum class ConstellationId_82079c2ea8450877: uint16_t {
  GPS,
  SBAS,
  GALILEO,
  BEIDOU,
  IMES,
  QZNSS,
  GLONASS,
};
CAPNP_DECLARE_ENUM(ConstellationId, 82079c2ea8450877);
CAPNP_DECLARE_SCHEMA(c299bc1804b08d93);
enum class EphemerisType_c299bc1804b08d93: uint16_t {
  NAV,
  NASA_ULTRA_RAPID,
  GLONASS_IAC_ULTRA_RAPID,
  QCOM,
};
CAPNP_DECLARE_ENUM(EphemerisType, c299bc1804b08d93);
CAPNP_DECLARE_SCHEMA(f6e39b3396a699f6);
enum class EphemerisSource_f6e39b3396a699f6: uint16_t {
  GNSS_CHIP,
  INTERNET,
  CACHE,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(EphemerisSource, f6e39b3396a699f6);
CAPNP_DECLARE_SCHEMA(85dddd7ce6cefa5d);
CAPNP_DECLARE_SCHEMA(bb642aff76688f53);
CAPNP_DECLARE_SCHEMA(e89dce02ced79e43);
CAPNP_DECLARE_SCHEMA(a73ba546a29820f4);
CAPNP_DECLARE_SCHEMA(fbb838d65160aab6);
CAPNP_DECLARE_SCHEMA(8f8a655f5e326401);
CAPNP_DECLARE_SCHEMA(e8efb3a802b299b2);
CAPNP_DECLARE_SCHEMA(d8418c788118f85c);
CAPNP_DECLARE_SCHEMA(c3a3a8de519a4a26);
CAPNP_DECLARE_SCHEMA(ebb036b114275aa8);
CAPNP_DECLARE_SCHEMA(c23e1128ab4d5b53);
enum class AntennaSupervisorState_c23e1128ab4d5b53: uint16_t {
  INIT,
  DONTKNOW,
  OK,
  SHORT,
  OPEN,
};
CAPNP_DECLARE_ENUM(AntennaSupervisorState, c23e1128ab4d5b53);
CAPNP_DECLARE_SCHEMA(fe3b51a924e46559);
enum class AntennaPowerStatus_fe3b51a924e46559: uint16_t {
  OFF,
  ON,
  DONTKNOW,
};
CAPNP_DECLARE_ENUM(AntennaPowerStatus, fe3b51a924e46559);
CAPNP_DECLARE_SCHEMA(f919b410b90e53c6);
CAPNP_DECLARE_SCHEMA(b2d0985eb51c97b9);
enum class ConfigSource_b2d0985eb51c97b9: uint16_t {
  UNDEFINED,
  ROM,
  OTP,
  CONFIGPINS,
  FLASH,
};
CAPNP_DECLARE_ENUM(ConfigSource, b2d0985eb51c97b9);
CAPNP_DECLARE_SCHEMA(b9c5911198388e0c);
CAPNP_DECLARE_SCHEMA(de94674b07ae51c1);
CAPNP_DECLARE_SCHEMA(d71a12b6faada7ee);
enum class MeasurementSource_d71a12b6faada7ee: uint16_t {
  GPS,
  GLONASS,
  BEIDOU,
  UNKNOWN3,
  UNKNOWN4,
  UNKNOWN5,
  SBAS,
};
CAPNP_DECLARE_ENUM(MeasurementSource, d71a12b6faada7ee);
CAPNP_DECLARE_SCHEMA(e81e829a0d6c83e9);
enum class SVObservationState_e81e829a0d6c83e9: uint16_t {
  IDLE,
  SEARCH,
  SEARCH_VERIFY,
  BIT_EDGE,
  TRACK_VERIFY,
  TRACK,
  RESTART,
  DPO,
  GLO10MS_BE,
  GLO10MS_AT,
};
CAPNP_DECLARE_ENUM(SVObservationState, e81e829a0d6c83e9);
CAPNP_DECLARE_SCHEMA(e501010e1bcae83b);
CAPNP_DECLARE_SCHEMA(f580d7d86b7b8692);
CAPNP_DECLARE_SCHEMA(f10c595ae7bb2c27);
CAPNP_DECLARE_SCHEMA(ca965e4add8f4f0b);
CAPNP_DECLARE_SCHEMA(8053c39445c6c75c);
CAPNP_DECLARE_SCHEMA(f08b81df8cbf459c);
CAPNP_DECLARE_SCHEMA(b1fb80811a673270);
CAPNP_DECLARE_SCHEMA(c95fb49a7bdc4618);
CAPNP_DECLARE_SCHEMA(92a5e332a85f32a0);
CAPNP_DECLARE_SCHEMA(e7e17c434f865ae2);
CAPNP_DECLARE_SCHEMA(e42401658e2715e2);
CAPNP_DECLARE_SCHEMA(fc010c40147563b0);
CAPNP_DECLARE_SCHEMA(c9f73bb1cdf28a6a);
CAPNP_DECLARE_SCHEMA(b83c6cc593ed0a00);
CAPNP_DECLARE_SCHEMA(b83cda094a1da284);
CAPNP_DECLARE_SCHEMA(a12e8670927a2549);
CAPNP_DECLARE_SCHEMA(d9058dcb967c2753);
CAPNP_DECLARE_SCHEMA(d5b62d55f7ab4feb);
CAPNP_DECLARE_SCHEMA(e61690eb0b091692);
CAPNP_DECLARE_SCHEMA(98dfdb22c44df8d4);
CAPNP_DECLARE_SCHEMA(9624c5ebffc17eac);
enum class Status_9624c5ebffc17eac: uint16_t {
  UNESTIMATED,
  ESTIMATED,
  INVALID,
};
CAPNP_DECLARE_ENUM(Status, 9624c5ebffc17eac);
CAPNP_DECLARE_SCHEMA(943e268f93f711a6);
CAPNP_DECLARE_SCHEMA(fa9a296b9fd41a96);
CAPNP_DECLARE_SCHEMA(ef0382d244f56e38);
CAPNP_DECLARE_SCHEMA(a2d8e61eb6f7031a);
enum class SentinelType_a2d8e61eb6f7031a: uint16_t {
  END_OF_SEGMENT,
  END_OF_ROUTE,
  START_OF_SEGMENT,
  START_OF_ROUTE,
};
CAPNP_DECLARE_ENUM(SentinelType, a2d8e61eb6f7031a);
CAPNP_DECLARE_SCHEMA(fe35ad896ffaeacf);
CAPNP_DECLARE_SCHEMA(cf7154b31a69635b);
CAPNP_DECLARE_SCHEMA(869a54d2708469ea);
CAPNP_DECLARE_SCHEMA(de266b39b76b461e);
CAPNP_DECLARE_SCHEMA(c18216b27f8602af);
CAPNP_DECLARE_SCHEMA(a4cd1689c0a439d9);
CAPNP_DECLARE_SCHEMA(eea5b9d8c9e5c192);
enum class Direction_eea5b9d8c9e5c192: uint16_t {
  NONE,
  LEFT,
  RIGHT,
  STRAIGHT,
  SLIGHT_LEFT,
  SLIGHT_RIGHT,
};
CAPNP_DECLARE_ENUM(Direction, eea5b9d8c9e5c192);
CAPNP_DECLARE_SCHEMA(b66e0aa568d09c66);
enum class SpeedLimitSign_b66e0aa568d09c66: uint16_t {
  MUTCD,
  VIENNA,
};
CAPNP_DECLARE_ENUM(SpeedLimitSign, b66e0aa568d09c66);
CAPNP_DECLARE_SCHEMA(b3ec4a1a6ce20a45);
CAPNP_DECLARE_SCHEMA(a61452f6440d97d3);
CAPNP_DECLARE_SCHEMA(c4c96f53ad1e7485);
CAPNP_DECLARE_SCHEMA(a158dd2a4cfaa81b);
CAPNP_DECLARE_SCHEMA(ac3de5c437be057a);
CAPNP_DECLARE_SCHEMA(be09e615b2507e26);
CAPNP_DECLARE_SCHEMA(cf9aeab355dd85f0);
CAPNP_DECLARE_SCHEMA(f585f6ba1d678656);
CAPNP_DECLARE_SCHEMA(fe346a9de48d9b50);
CAPNP_DECLARE_SCHEMA(dc24138990726023);
CAPNP_DECLARE_SCHEMA(a4e671db37b8ade5);
CAPNP_DECLARE_SCHEMA(ed47e3c075be372a);
CAPNP_DECLARE_SCHEMA(8795cd2944faeab6);
CAPNP_DECLARE_SCHEMA(d314cfd957229c11);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

static constexpr  ::int32_t LOG_VERSION = 1;
template <typename Key = ::capnp::AnyPointer, typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8b13ce2183eb696, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5dfdd084a6eea0e, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct OnroadEvent {
  OnroadEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EventName_91f1992a1f77fb03 EventName;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4fa6047f024e718, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::LongitudinalPersonality_d692e23d1a247d99 LongitudinalPersonality;

struct InitData {
  InitData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DeviceType_9d5d7238eba86608 DeviceType;

  struct PandaInfo;
  struct AndroidBuildInfo;
  struct AndroidSensor;
  struct ChffrAndroidExtra;
  struct IosBuildInfo;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e71008caeb3fb65c, 2, 21)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::PandaInfo {
  PandaInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e673e8725cdff0ad, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::AndroidBuildInfo {
  AndroidBuildInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe2919d5c21f426c, 2, 21)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::AndroidSensor {
  AndroidSensor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b513b93a887dbcd, 6, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::ChffrAndroidExtra {
  ChffrAndroidExtra() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9cfb5d53a4f615a5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::IosBuildInfo {
  IosBuildInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d97e3b28239f5580, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameData {
  FrameData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FrameTypeDEPRECATED_a37f0d8558e193fd FrameTypeDEPRECATED;

  typedef ::capnp::schemas::ImageSensor_d810b1e7705dd69c ImageSensor;

  struct AndroidCaptureResult;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea0245f695ae0a33, 12, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameData::AndroidCaptureResult {
  AndroidCaptureResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcc3efbac41d2048, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Thumbnail {
  Thumbnail() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Encoding_ce7b9bb221c070c2 Encoding;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b65fce64120af7d3, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GPSNMEAData {
  GPSNMEAData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d291d7813ba4a88, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData {
  SensorEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACCELERATION,
    MAGNETIC,
    ORIENTATION,
    GYRO,
    PRESSURE,
    MAGNETIC_UNCALIBRATED,
    GYRO_UNCALIBRATED,
    PROXIMITY,
    LIGHT,
    TEMPERATURE,
  };
  struct SensorVec;
  typedef ::capnp::schemas::SensorSource_e49b3ce8f7f48d0d SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2b29a69d44529a1, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData::SensorVec {
  SensorVec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a43429bd2bfc24fc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GpsLocationData {
  GpsLocationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::SensorSource_d3ff79f25c734863 SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e946524859add50e, 8, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::Desire_ae674a34ba421466 Desire;

typedef ::capnp::schemas::LaneChangeState_cd37924bf7b2d3d2 LaneChangeState;

typedef ::capnp::schemas::LaneChangeDirection_9d0bc0c1fe671176 LaneChangeDirection;

struct CanData {
  CanData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8785009a964c7c59, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState {
  DeviceState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ThermalZone;
  typedef ::capnp::schemas::ThermalStatus_af0f7110c254f77e ThermalStatus;

  typedef ::capnp::schemas::NetworkType_bbc79cc958d1049d NetworkType;

  typedef ::capnp::schemas::NetworkStrength_dd308c8a13203e13 NetworkStrength;

  struct NetworkInfo;
  struct NetworkStats;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4d8b5af2aa492eb, 14, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState::ThermalZone {
  ThermalZone() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0790029853df66f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState::NetworkInfo {
  NetworkInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d57532d82c04afc, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeviceState::NetworkStats {
  NetworkStats() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b98c64ea27898ea0, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PandaState {
  PandaState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FaultStatus_f2fd0b8b0ac9adbb FaultStatus;

  typedef ::capnp::schemas::FaultType_cd55c07f69249798 FaultType;

  typedef ::capnp::schemas::PandaType_8a58adf93e5b3751 PandaType;

  typedef ::capnp::schemas::HarnessStatus_f69a3ed1e8c081bf HarnessStatus;

  struct PandaCanState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7649e2575e4591e, 9, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PandaState::PandaCanState {
  PandaCanState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::LecErrorCode_c0db50b4d13283ff LecErrorCode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8d2972deb0cd45c, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PeripheralState {
  PeripheralState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::UsbPowerModeDEPRECATED_a8883583b32c9877 UsbPowerModeDEPRECATED;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ceb8f49734857a88, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarState {
  RadarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LeadData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a185389d6fdd05f, 5, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarState::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b96f3ad9170cf085, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveCalibrationData {
  LiveCalibrationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_caaa029466ad394d Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96df70754d8390bc, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveTracksDEPRECATED {
  LiveTracksDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b16f60103159415a, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SelfdriveState {
  SelfdriveState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::OpenpilotState_dbe58b96d2d1ac61 OpenpilotState;

  typedef ::capnp::schemas::AlertStatus_a0d0dcd113193c62 AlertStatus;

  typedef ::capnp::schemas::AlertSize_e98bb99d6e985f64 AlertSize;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b52430dc48f4a83b, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState {
  ControlsState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LateralINDIState;
  struct LateralPIDState;
  struct LateralTorqueState;
  struct LateralLQRState;
  struct LateralAngleState;
  struct LateralCurvatureState;
  struct LateralDebugState;
  struct LateralControlState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ff69c53601abf1, 24, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralINDIState {
  LateralINDIState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(939463348632375e, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralPIDState {
  LateralPIDState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f28c5dc9e09375e3, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralTorqueState {
  LateralTorqueState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e774a050cbf689a4, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralLQRState {
  LateralLQRState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9024e2d790c82ade, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralAngleState {
  LateralAngleState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2e4ea88ac9980f1, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralCurvatureState {
  LateralCurvatureState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad9d8095c06f7c61, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralDebugState {
  LateralDebugState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a63a46f0f2889b2d, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralControlState {
  LateralControlState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INDI_STATE_D_E_P_R_E_C_A_T_E_D,
    PID_STATE,
    LQR_STATE_D_E_P_R_E_C_A_T_E_D,
    ANGLE_STATE,
    DEBUG_STATE,
    TORQUE_STATE,
    CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd5b914d6b444695, 24, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingModelData {
  DrivingModelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PolyPath;
  struct LaneLineMeta;
  struct MetaData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8f9ba819993a776, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingModelData::PolyPath {
  PolyPath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca1e4710874d12b5, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingModelData::LaneLineMeta {
  LaneLineMeta() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(996ef0369d7e5625, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingModelData::MetaData {
  MetaData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0cfcfa4ed19ac5d, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct XYZTData {
  XYZTData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3cbae1fd505ae80, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2 {
  ModelDataV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LeadDataV2;
  struct LeadDataV3;
  struct MetaData;
  typedef ::capnp::schemas::ConfidenceClass_aa3247d9d2a61cd4 ConfidenceClass;

  struct DisengagePredictions;
  struct Pose;
  struct LateralPlannerSolution;
  struct Action;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4713f6b0d36abe9, 6, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::LeadDataV2 {
  LeadDataV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a444ed2b2187af28, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::LeadDataV3 {
  LeadDataV3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d698881ad0ce7feb, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::MetaData {
  MetaData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1646ab3b45cfabd, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::DisengagePredictions {
  DisengagePredictions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(860aa5ddbcdc8d25, 0, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::Pose {
  Pose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb3ec0702e67884f, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::LateralPlannerSolution {
  LateralPlannerSolution() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84caeca5a6b4acfe, 0, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2::Action {
  Action() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94d0bcb35a764584, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EncodeIndex {
  EncodeIndex() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_c0ad259ec157ccd3 Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89d394e3541735fc, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidLogEntry {
  AndroidLogEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea095da1894f7d85, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverAssistance {
  DriverAssistance() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b669f73a9c1cfbc, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlan {
  LongitudinalPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::LongitudinalPlanSource_b231a753cc079120 LongitudinalPlanSource;

  struct GpsTrajectory;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e00b5b3eba12876c, 11, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlan::GpsTrajectory {
  GpsTrajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cfeb072f5301000, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UiPlan {
  UiPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc0c9bb05e3927c1, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LateralPlan {
  LateralPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SolverState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1e9318e2ae8b51e, 9, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LateralPlan::SolverState {
  SolverState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fdca7c675b7021c6, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationKalman {
  LiveLocationKalman() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_8e4dc8cc4b51fc01 Status;

  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebc5703d1ee7c129, 5, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationKalman::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf23f9ed66dace1c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LivePose {
  LivePose() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct XYZMeasurement;
  struct FilterState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c24ca2b57206b44d, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LivePose::XYZMeasurement {
  XYZMeasurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9c93a8733ccd82b, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LivePose::FilterState {
  FilterState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Observation;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dacbb6c4e0cb5f66, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LivePose::FilterState::Observation {
  Observation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81065ba2cacc8266, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog {
  ProcLog() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Process;
  struct CPUTimes;
  struct Mem;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af85387b3f681406, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::Process {
  Process() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0b85613f19e6d28, 9, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::CPUTimes {
  CPUTimes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f189c8c5bf2ce087, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::Mem {
  Mem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd095f94f08b3fd4, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements {
  GnssMeasurements() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct EphemerisStatus;
  struct CorrectedMeasurement;
  struct EphemerisSourceDEPRECATED;
  typedef ::capnp::schemas::ConstellationId_82079c2ea8450877 ConstellationId;

  typedef ::capnp::schemas::EphemerisType_c299bc1804b08d93 EphemerisType;

  typedef ::capnp::schemas::EphemerisSource_f6e39b3396a699f6 EphemerisSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(afd47016570e9d09, 3, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements::EphemerisStatus {
  EphemerisStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3286be6a8bfb860, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements::CorrectedMeasurement {
  CorrectedMeasurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eaa4a17d86ac76b0, 5, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GnssMeasurements::EphemerisSourceDEPRECATED {
  EphemerisSourceDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcc2ef5087c0ad85, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss {
  UbloxGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENT_REPORT,
    EPHEMERIS,
    IONO_DATA,
    HW_STATUS,
    HW_STATUS2,
    GLONASS_EPHEMERIS,
    SAT_REPORT,
  };
  struct SatReport;
  struct MeasurementReport;
  struct Ephemeris;
  struct IonoData;
  struct HwStatus;
  struct HwStatus2;
  struct GlonassEphemeris;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85dddd7ce6cefa5d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::SatReport {
  SatReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SatInfo;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb642aff76688f53, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::SatReport::SatInfo {
  SatInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e89dce02ced79e43, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport {
  MeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ReceiverStatus;
  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a73ba546a29820f4, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::ReceiverStatus {
  ReceiverStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbb838d65160aab6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TrackingStatus;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f8a655f5e326401, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::Measurement::TrackingStatus {
  TrackingStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8efb3a802b299b2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::Ephemeris {
  Ephemeris() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8418c788118f85c, 34, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::IonoData {
  IonoData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3a3a8de519a4a26, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::HwStatus {
  HwStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::AntennaSupervisorState_c23e1128ab4d5b53 AntennaSupervisorState;

  typedef ::capnp::schemas::AntennaPowerStatus_fe3b51a924e46559 AntennaPowerStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebb036b114275aa8, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::HwStatus2 {
  HwStatus2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ConfigSource_b2d0985eb51c97b9 ConfigSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f919b410b90e53c6, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::GlonassEphemeris {
  GlonassEphemeris() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9c5911198388e0c, 18, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss {
  QcomGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENT_REPORT,
    CLOCK_REPORT,
    DR_MEASUREMENT_REPORT,
    DR_SV_POLY,
    RAW_LOG,
  };
  typedef ::capnp::schemas::MeasurementSource_d71a12b6faada7ee MeasurementSource;

  typedef ::capnp::schemas::SVObservationState_e81e829a0d6c83e9 SVObservationState;

  struct MeasurementStatus;
  struct MeasurementReport;
  struct ClockReport;
  struct DrMeasurementReport;
  struct DrSvPolyReport;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de94674b07ae51c1, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::MeasurementStatus {
  MeasurementStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e501010e1bcae83b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::MeasurementReport {
  MeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SV;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f580d7d86b7b8692, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::MeasurementReport::SV {
  SV() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f10c595ae7bb2c27, 8, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::ClockReport {
  ClockReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca965e4add8f4f0b, 18, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::DrMeasurementReport {
  DrMeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SV;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8053c39445c6c75c, 10, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::DrMeasurementReport::SV {
  SV() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f08b81df8cbf459c, 12, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::DrSvPolyReport {
  DrSvPolyReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1fb80811a673270, 8, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clocks {
  Clocks() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c95fb49a7bdc4618, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveMpcData {
  LiveMpcData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92a5e332a85f32a0, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLongitudinalMpcData {
  LiveLongitudinalMpcData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7e17c434f865ae2, 4, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Joystick {
  Joystick() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e42401658e2715e2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverStateV2 {
  DriverStateV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct DriverData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc010c40147563b0, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverStateV2::DriverData {
  DriverData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9f73bb1cdf28a6a, 4, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverStateDEPRECATED {
  DriverStateDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b83c6cc593ed0a00, 9, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverMonitoringState {
  DriverMonitoringState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b83cda094a1da284, 6, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Boot {
  Boot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a12e8670927a2549, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveParametersData {
  LiveParametersData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct FilterState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9058dcb967c2753, 7, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveParametersData::FilterState {
  FilterState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5b62d55f7ab4feb, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveTorqueParametersData {
  LiveTorqueParametersData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e61690eb0b091692, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveDelayData {
  LiveDelayData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_9624c5ebffc17eac Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98dfdb22c44df8d4, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveMapDataDEPRECATED {
  LiveMapDataDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(943e268f93f711a6, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraOdometry {
  CameraOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa9a296b9fd41a96, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sentinel {
  Sentinel() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::SentinelType_a2d8e61eb6f7031a SentinelType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef0382d244f56e38, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UIDebug {
  UIDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe35ad896ffaeacf, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ManagerState {
  ManagerState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ProcessState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf7154b31a69635b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ManagerState::ProcessState {
  ProcessState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(869a54d2708469ea, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UploaderState {
  UploaderState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de266b39b76b461e, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavInstruction {
  NavInstruction() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Lane;
  typedef ::capnp::schemas::Direction_eea5b9d8c9e5c192 Direction;

  typedef ::capnp::schemas::SpeedLimitSign_b66e0aa568d09c66 SpeedLimitSign;

  struct Maneuver;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c18216b27f8602af, 3, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavInstruction::Lane {
  Lane() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4cd1689c0a439d9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavInstruction::Maneuver {
  Maneuver() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b3ec4a1a6ce20a45, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavRoute {
  NavRoute() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Coordinate;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a61452f6440d97d3, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavRoute::Coordinate {
  Coordinate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4c96f53ad1e7485, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MapRenderState {
  MapRenderState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a158dd2a4cfaa81b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavModelData {
  NavModelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct XYData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac3de5c437be057a, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavModelData::XYData {
  XYData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be09e615b2507e26, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EncodeData {
  EncodeData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf9aeab355dd85f0, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugAlert {
  DebugAlert() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f585f6ba1d678656, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UserBookmark {
  UserBookmark() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe346a9de48d9b50, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoundPressure {
  SoundPressure() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc24138990726023, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AudioData {
  AudioData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4e671db37b8ade5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AudioFeedback {
  AudioFeedback() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed47e3c075be372a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Touch {
  Touch() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8795cd2944faeab6, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INIT_DATA,
    ROAD_CAMERA_STATE,
    GPS_N_M_E_A,
    SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D,
    CAN,
    DEVICE_STATE,
    CONTROLS_STATE,
    LIVE_EVENT_D_E_P_R_E_C_A_T_E_D,
    MODEL,
    FEATURES_D_E_P_R_E_C_A_T_E_D,
    SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D,
    PANDA_STATE_D_E_P_R_E_C_A_T_E_D,
    RADAR_STATE,
    LIVE_U_I_D_E_P_R_E_C_A_T_E_D,
    ROAD_ENCODE_IDX,
    LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D,
    SENDCAN,
    LOG_MESSAGE,
    LIVE_CALIBRATION,
    ANDROID_LOG,
    GPS_LOCATION,
    CAR_STATE,
    CAR_CONTROL,
    LONGITUDINAL_PLAN,
    LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D,
    ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D,
    NAV_UPDATE_D_E_P_R_E_C_A_T_E_D,
    CELL_INFO_D_E_P_R_E_C_A_T_E_D,
    WIFI_SCAN_D_E_P_R_E_C_A_T_E_D,
    ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D,
    QCOM_GNSS,
    LIDAR_PTS_D_E_P_R_E_C_A_T_E_D,
    PROC_LOG,
    UBLOX_GNSS,
    CLOCKS,
    LIVE_MPC_D_E_P_R_E_C_A_T_E_D,
    LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D,
    NAV_STATUS_D_E_P_R_E_C_A_T_E_D,
    UBLOX_RAW,
    GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D,
    GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D,
    APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D,
    TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D,
    LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D,
    ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D,
    LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D,
    ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D,
    GPS_LOCATION_EXTERNAL,
    LOCATION_D_E_P_R_E_C_A_T_E_D,
    UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D,
    LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D,
    TEST_JOYSTICK,
    ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D,
    ORB_FEATURES_D_E_P_R_E_C_A_T_E_D,
    APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D,
    ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D,
    UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D,
    ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D,
    DRIVER_STATE_D_E_P_R_E_C_A_T_E_D,
    BOOT,
    LIVE_PARAMETERS,
    LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D,
    CAMERA_ODOMETRY,
    LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D,
    KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D,
    THUMBNAIL,
    ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D,
    CAR_PARAMS,
    DRIVER_CAMERA_STATE,
    DRIVER_MONITORING_STATE,
    LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D,
    SENTINEL,
    WIDE_ROAD_CAMERA_STATE,
    MODEL_V2,
    DRIVER_ENCODE_IDX,
    WIDE_ROAD_ENCODE_IDX,
    MANAGER_STATE,
    UPLOADER_STATE,
    PERIPHERAL_STATE,
    PANDA_STATES,
    NAV_INSTRUCTION,
    NAV_ROUTE,
    NAV_THUMBNAIL,
    ERROR_LOG_MESSAGE,
    ROAD_ENCODE_DATA,
    DRIVER_ENCODE_DATA,
    WIDE_ROAD_ENCODE_DATA,
    Q_ROAD_ENCODE_DATA,
    Q_ROAD_ENCODE_IDX,
    GNSS_MEASUREMENTS,
    DRIVER_STATE_V2,
    USER_BOOKMARK,
    LIVE_TORQUE_PARAMETERS,
    MAGNETOMETER,
    LIGHT_SENSOR,
    TEMPERATURE_SENSOR,
    ACCELEROMETER,
    GYROSCOPE,
    GYROSCOPE2,
    ACCELEROMETER2,
    UI_DEBUG,
    SOUND_PRESSURE,
    NAV_MODEL_D_E_P_R_E_C_A_T_E_D,
    MAP_RENDER_STATE,
    UI_PLAN_D_E_P_R_E_C_A_T_E_D,
    CUSTOM_RESERVED0,
    CUSTOM_RESERVED1,
    CUSTOM_RESERVED2,
    CUSTOM_RESERVED3,
    CUSTOM_RESERVED4,
    CUSTOM_RESERVED5,
    CUSTOM_RESERVED6,
    CUSTOM_RESERVED7,
    CUSTOM_RESERVED8,
    CUSTOM_RESERVED9,
    LIVESTREAM_ROAD_ENCODE_IDX,
    LIVESTREAM_WIDE_ROAD_ENCODE_IDX,
    LIVESTREAM_DRIVER_ENCODE_IDX,
    LIVESTREAM_ROAD_ENCODE_DATA,
    LIVESTREAM_WIDE_ROAD_ENCODE_DATA,
    LIVESTREAM_DRIVER_ENCODE_DATA,
    TEMPERATURE_SENSOR2,
    CUSTOM_RESERVED_RAW_DATA0,
    CUSTOM_RESERVED_RAW_DATA1,
    CUSTOM_RESERVED_RAW_DATA2,
    CAR_OUTPUT,
    DRIVING_MODEL_DATA,
    LIVE_POSE,
    SELFDRIVE_STATE,
    LIVE_TRACKS,
    DRIVER_ASSISTANCE,
    ALERT_DEBUG,
    ONROAD_EVENTS,
    TOUCH,
    CUSTOM_RESERVED10,
    CUSTOM_RESERVED11,
    CUSTOM_RESERVED12,
    CUSTOM_RESERVED13,
    CUSTOM_RESERVED14,
    CUSTOM_RESERVED15,
    CUSTOM_RESERVED16,
    CUSTOM_RESERVED17,
    CUSTOM_RESERVED18,
    CUSTOM_RESERVED19,
    LIVE_DELAY,
    RAW_AUDIO_DATA,
    BOOKMARK_BUTTON,
    AUDIO_FEEDBACK,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d314cfd957229c11, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries(typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline  ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<Value> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline  ::capnp::BuilderFor<Key> getKey();
  inline void setKey( ::capnp::ReaderFor<Key> value);
  inline  ::capnp::BuilderFor<Key> initKey();
  inline  ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline  ::capnp::BuilderFor<Value> getValue();
  inline void setValue( ::capnp::ReaderFor<Value> value);
  inline  ::capnp::BuilderFor<Value> initValue();
  inline  ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Key> getKey();
  inline  ::capnp::PipelineFor<Value> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OnroadEvent::Reader {
public:
  typedef OnroadEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::OnroadEvent::EventName getName() const;

  inline bool getEnable() const;

  inline bool getNoEntry() const;

  inline bool getWarning() const;

  inline bool getUserDisable() const;

  inline bool getSoftDisable() const;

  inline bool getImmediateDisable() const;

  inline bool getPreEnable() const;

  inline bool getPermanent() const;

  inline bool getOverrideLongitudinal() const;

  inline bool getOverrideLateral() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OnroadEvent::Builder {
public:
  typedef OnroadEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::OnroadEvent::EventName getName();
  inline void setName( ::cereal::OnroadEvent::EventName value);

  inline bool getEnable();
  inline void setEnable(bool value);

  inline bool getNoEntry();
  inline void setNoEntry(bool value);

  inline bool getWarning();
  inline void setWarning(bool value);

  inline bool getUserDisable();
  inline void setUserDisable(bool value);

  inline bool getSoftDisable();
  inline void setSoftDisable(bool value);

  inline bool getImmediateDisable();
  inline void setImmediateDisable(bool value);

  inline bool getPreEnable();
  inline void setPreEnable(bool value);

  inline bool getPermanent();
  inline void setPermanent(bool value);

  inline bool getOverrideLongitudinal();
  inline void setOverrideLongitudinal(bool value);

  inline bool getOverrideLateral();
  inline void setOverrideLateral(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OnroadEvent::Pipeline {
public:
  typedef OnroadEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::Reader {
public:
  typedef InitData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getKernelArgs() const;

  inline bool hasGctxDEPRECATED() const;
  inline  ::capnp::Text::Reader getGctxDEPRECATED() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

  inline  ::cereal::InitData::DeviceType getDeviceType() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasAndroidBuildInfo() const;
  inline  ::cereal::InitData::AndroidBuildInfo::Reader getAndroidBuildInfo() const;

  inline bool hasAndroidSensorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader getAndroidSensorsDEPRECATED() const;

  inline bool hasChffrAndroidExtraDEPRECATED() const;
  inline  ::cereal::InitData::ChffrAndroidExtra::Reader getChffrAndroidExtraDEPRECATED() const;

  inline bool hasPandaInfo() const;
  inline  ::cereal::InitData::PandaInfo::Reader getPandaInfo() const;

  inline bool getDirty() const;

  inline bool hasGitCommit() const;
  inline  ::capnp::Text::Reader getGitCommit() const;

  inline bool hasGitBranch() const;
  inline  ::capnp::Text::Reader getGitBranch() const;

  inline bool getPassive() const;

  inline bool hasGitRemote() const;
  inline  ::capnp::Text::Reader getGitRemote() const;

  inline bool hasIosBuildInfoDEPRECATED() const;
  inline  ::cereal::InitData::IosBuildInfo::Reader getIosBuildInfoDEPRECATED() const;

  inline bool hasKernelVersion() const;
  inline  ::capnp::Text::Reader getKernelVersion() const;

  inline bool hasAndroidProperties() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getAndroidProperties() const;

  inline bool hasParams() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader getParams() const;

  inline bool hasOsVersion() const;
  inline  ::capnp::Text::Reader getOsVersion() const;

  inline bool hasCommands() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader getCommands() const;

  inline  ::uint64_t getWallTimeNanos() const;

  inline bool hasGitCommitDate() const;
  inline  ::capnp::Text::Reader getGitCommitDate() const;

  inline bool hasBootlogId() const;
  inline  ::capnp::Text::Reader getBootlogId() const;

  inline bool hasGitSrcCommit() const;
  inline  ::capnp::Text::Reader getGitSrcCommit() const;

  inline bool hasGitSrcCommitDate() const;
  inline  ::capnp::Text::Reader getGitSrcCommitDate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::Builder {
public:
  typedef InitData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getKernelArgs();
  inline void setKernelArgs( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initKernelArgs(unsigned int size);
  inline void adoptKernelArgs(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownKernelArgs();

  inline bool hasGctxDEPRECATED();
  inline  ::capnp::Text::Builder getGctxDEPRECATED();
  inline void setGctxDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGctxDEPRECATED(unsigned int size);
  inline void adoptGctxDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGctxDEPRECATED();

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

  inline  ::cereal::InitData::DeviceType getDeviceType();
  inline void setDeviceType( ::cereal::InitData::DeviceType value);

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasAndroidBuildInfo();
  inline  ::cereal::InitData::AndroidBuildInfo::Builder getAndroidBuildInfo();
  inline void setAndroidBuildInfo( ::cereal::InitData::AndroidBuildInfo::Reader value);
  inline  ::cereal::InitData::AndroidBuildInfo::Builder initAndroidBuildInfo();
  inline void adoptAndroidBuildInfo(::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo> disownAndroidBuildInfo();

  inline bool hasAndroidSensorsDEPRECATED();
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder getAndroidSensorsDEPRECATED();
  inline void setAndroidSensorsDEPRECATED( ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder initAndroidSensorsDEPRECATED(unsigned int size);
  inline void adoptAndroidSensorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>> disownAndroidSensorsDEPRECATED();

  inline bool hasChffrAndroidExtraDEPRECATED();
  inline  ::cereal::InitData::ChffrAndroidExtra::Builder getChffrAndroidExtraDEPRECATED();
  inline void setChffrAndroidExtraDEPRECATED( ::cereal::InitData::ChffrAndroidExtra::Reader value);
  inline  ::cereal::InitData::ChffrAndroidExtra::Builder initChffrAndroidExtraDEPRECATED();
  inline void adoptChffrAndroidExtraDEPRECATED(::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra> disownChffrAndroidExtraDEPRECATED();

  inline bool hasPandaInfo();
  inline  ::cereal::InitData::PandaInfo::Builder getPandaInfo();
  inline void setPandaInfo( ::cereal::InitData::PandaInfo::Reader value);
  inline  ::cereal::InitData::PandaInfo::Builder initPandaInfo();
  inline void adoptPandaInfo(::capnp::Orphan< ::cereal::InitData::PandaInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::PandaInfo> disownPandaInfo();

  inline bool getDirty();
  inline void setDirty(bool value);

  inline bool hasGitCommit();
  inline  ::capnp::Text::Builder getGitCommit();
  inline void setGitCommit( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitCommit(unsigned int size);
  inline void adoptGitCommit(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitCommit();

  inline bool hasGitBranch();
  inline  ::capnp::Text::Builder getGitBranch();
  inline void setGitBranch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitBranch(unsigned int size);
  inline void adoptGitBranch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitBranch();

  inline bool getPassive();
  inline void setPassive(bool value);

  inline bool hasGitRemote();
  inline  ::capnp::Text::Builder getGitRemote();
  inline void setGitRemote( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitRemote(unsigned int size);
  inline void adoptGitRemote(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitRemote();

  inline bool hasIosBuildInfoDEPRECATED();
  inline  ::cereal::InitData::IosBuildInfo::Builder getIosBuildInfoDEPRECATED();
  inline void setIosBuildInfoDEPRECATED( ::cereal::InitData::IosBuildInfo::Reader value);
  inline  ::cereal::InitData::IosBuildInfo::Builder initIosBuildInfoDEPRECATED();
  inline void adoptIosBuildInfoDEPRECATED(::capnp::Orphan< ::cereal::InitData::IosBuildInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::IosBuildInfo> disownIosBuildInfoDEPRECATED();

  inline bool hasKernelVersion();
  inline  ::capnp::Text::Builder getKernelVersion();
  inline void setKernelVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKernelVersion(unsigned int size);
  inline void adoptKernelVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKernelVersion();

  inline bool hasAndroidProperties();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getAndroidProperties();
  inline void setAndroidProperties( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initAndroidProperties();
  inline void adoptAndroidProperties(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownAndroidProperties();

  inline bool hasParams();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder getParams();
  inline void setParams( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> disownParams();

  inline bool hasOsVersion();
  inline  ::capnp::Text::Builder getOsVersion();
  inline void setOsVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOsVersion(unsigned int size);
  inline void adoptOsVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOsVersion();

  inline bool hasCommands();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder getCommands();
  inline void setCommands( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder initCommands();
  inline void adoptCommands(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> disownCommands();

  inline  ::uint64_t getWallTimeNanos();
  inline void setWallTimeNanos( ::uint64_t value);

  inline bool hasGitCommitDate();
  inline  ::capnp::Text::Builder getGitCommitDate();
  inline void setGitCommitDate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitCommitDate(unsigned int size);
  inline void adoptGitCommitDate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitCommitDate();

  inline bool hasBootlogId();
  inline  ::capnp::Text::Builder getBootlogId();
  inline void setBootlogId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBootlogId(unsigned int size);
  inline void adoptBootlogId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBootlogId();

  inline bool hasGitSrcCommit();
  inline  ::capnp::Text::Builder getGitSrcCommit();
  inline void setGitSrcCommit( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitSrcCommit(unsigned int size);
  inline void adoptGitSrcCommit(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitSrcCommit();

  inline bool hasGitSrcCommitDate();
  inline  ::capnp::Text::Builder getGitSrcCommitDate();
  inline void setGitSrcCommitDate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitSrcCommitDate(unsigned int size);
  inline void adoptGitSrcCommitDate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitSrcCommitDate();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::Pipeline {
public:
  typedef InitData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::InitData::AndroidBuildInfo::Pipeline getAndroidBuildInfo();
  inline  ::cereal::InitData::ChffrAndroidExtra::Pipeline getChffrAndroidExtraDEPRECATED();
  inline  ::cereal::InitData::PandaInfo::Pipeline getPandaInfo();
  inline  ::cereal::InitData::IosBuildInfo::Pipeline getIosBuildInfoDEPRECATED();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getAndroidProperties();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline getParams();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline getCommands();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::PandaInfo::Reader {
public:
  typedef PandaInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHasPanda() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

  inline bool hasStVersion() const;
  inline  ::capnp::Text::Reader getStVersion() const;

  inline bool hasEspVersion() const;
  inline  ::capnp::Text::Reader getEspVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::PandaInfo::Builder {
public:
  typedef PandaInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHasPanda();
  inline void setHasPanda(bool value);

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

  inline bool hasStVersion();
  inline  ::capnp::Text::Builder getStVersion();
  inline void setStVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStVersion(unsigned int size);
  inline void adoptStVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStVersion();

  inline bool hasEspVersion();
  inline  ::capnp::Text::Builder getEspVersion();
  inline void setEspVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEspVersion(unsigned int size);
  inline void adoptEspVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEspVersion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::PandaInfo::Pipeline {
public:
  typedef PandaInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::AndroidBuildInfo::Reader {
public:
  typedef AndroidBuildInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBoard() const;
  inline  ::capnp::Text::Reader getBoard() const;

  inline bool hasBootloader() const;
  inline  ::capnp::Text::Reader getBootloader() const;

  inline bool hasBrand() const;
  inline  ::capnp::Text::Reader getBrand() const;

  inline bool hasDevice() const;
  inline  ::capnp::Text::Reader getDevice() const;

  inline bool hasDisplay() const;
  inline  ::capnp::Text::Reader getDisplay() const;

  inline bool hasFingerprint() const;
  inline  ::capnp::Text::Reader getFingerprint() const;

  inline bool hasHardware() const;
  inline  ::capnp::Text::Reader getHardware() const;

  inline bool hasHost() const;
  inline  ::capnp::Text::Reader getHost() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasManufacturer() const;
  inline  ::capnp::Text::Reader getManufacturer() const;

  inline bool hasModel() const;
  inline  ::capnp::Text::Reader getModel() const;

  inline bool hasProduct() const;
  inline  ::capnp::Text::Reader getProduct() const;

  inline bool hasRadioVersion() const;
  inline  ::capnp::Text::Reader getRadioVersion() const;

  inline bool hasSerial() const;
  inline  ::capnp::Text::Reader getSerial() const;

  inline bool hasSupportedAbis() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSupportedAbis() const;

  inline bool hasTags() const;
  inline  ::capnp::Text::Reader getTags() const;

  inline  ::int64_t getTime() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasVersionCodename() const;
  inline  ::capnp::Text::Reader getVersionCodename() const;

  inline bool hasVersionRelease() const;
  inline  ::capnp::Text::Reader getVersionRelease() const;

  inline  ::int32_t getVersionSdk() const;

  inline bool hasVersionSecurityPatch() const;
  inline  ::capnp::Text::Reader getVersionSecurityPatch() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::AndroidBuildInfo::Builder {
public:
  typedef AndroidBuildInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBoard();
  inline  ::capnp::Text::Builder getBoard();
  inline void setBoard( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBoard(unsigned int size);
  inline void adoptBoard(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBoard();

  inline bool hasBootloader();
  inline  ::capnp::Text::Builder getBootloader();
  inline void setBootloader( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBootloader(unsigned int size);
  inline void adoptBootloader(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBootloader();

  inline bool hasBrand();
  inline  ::capnp::Text::Builder getBrand();
  inline void setBrand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBrand(unsigned int size);
  inline void adoptBrand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBrand();

  inline bool hasDevice();
  inline  ::capnp::Text::Builder getDevice();
  inline void setDevice( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDevice(unsigned int size);
  inline void adoptDevice(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDevice();

  inline bool hasDisplay();
  inline  ::capnp::Text::Builder getDisplay();
  inline void setDisplay( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDisplay(unsigned int size);
  inline void adoptDisplay(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDisplay();

  inline bool hasFingerprint();
  inline  ::capnp::Text::Builder getFingerprint();
  inline void setFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFingerprint(unsigned int size);
  inline void adoptFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFingerprint();

  inline bool hasHardware();
  inline  ::capnp::Text::Builder getHardware();
  inline void setHardware( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHardware(unsigned int size);
  inline void adoptHardware(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHardware();

  inline bool hasHost();
  inline  ::capnp::Text::Builder getHost();
  inline void setHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHost();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasManufacturer();
  inline  ::capnp::Text::Builder getManufacturer();
  inline void setManufacturer( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManufacturer(unsigned int size);
  inline void adoptManufacturer(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManufacturer();

  inline bool hasModel();
  inline  ::capnp::Text::Builder getModel();
  inline void setModel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModel(unsigned int size);
  inline void adoptModel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModel();

  inline bool hasProduct();
  inline  ::capnp::Text::Builder getProduct();
  inline void setProduct( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initProduct(unsigned int size);
  inline void adoptProduct(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownProduct();

  inline bool hasRadioVersion();
  inline  ::capnp::Text::Builder getRadioVersion();
  inline void setRadioVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRadioVersion(unsigned int size);
  inline void adoptRadioVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRadioVersion();

  inline bool hasSerial();
  inline  ::capnp::Text::Builder getSerial();
  inline void setSerial( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSerial(unsigned int size);
  inline void adoptSerial(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSerial();

  inline bool hasSupportedAbis();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSupportedAbis();
  inline void setSupportedAbis( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSupportedAbis(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSupportedAbis(unsigned int size);
  inline void adoptSupportedAbis(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSupportedAbis();

  inline bool hasTags();
  inline  ::capnp::Text::Builder getTags();
  inline void setTags( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTags();

  inline  ::int64_t getTime();
  inline void setTime( ::int64_t value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasVersionCodename();
  inline  ::capnp::Text::Builder getVersionCodename();
  inline void setVersionCodename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionCodename(unsigned int size);
  inline void adoptVersionCodename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionCodename();

  inline bool hasVersionRelease();
  inline  ::capnp::Text::Builder getVersionRelease();
  inline void setVersionRelease( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionRelease(unsigned int size);
  inline void adoptVersionRelease(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionRelease();

  inline  ::int32_t getVersionSdk();
  inline void setVersionSdk( ::int32_t value);

  inline bool hasVersionSecurityPatch();
  inline  ::capnp::Text::Builder getVersionSecurityPatch();
  inline void setVersionSecurityPatch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionSecurityPatch(unsigned int size);
  inline void adoptVersionSecurityPatch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionSecurityPatch();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::AndroidBuildInfo::Pipeline {
public:
  typedef AndroidBuildInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::AndroidSensor::Reader {
public:
  typedef AndroidSensor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasVendor() const;
  inline  ::capnp::Text::Reader getVendor() const;

  inline  ::int32_t getVersion() const;

  inline  ::int32_t getHandle() const;

  inline  ::int32_t getType() const;

  inline float getMaxRange() const;

  inline float getResolution() const;

  inline float getPower() const;

  inline  ::int32_t getMinDelay() const;

  inline  ::uint32_t getFifoReservedEventCount() const;

  inline  ::uint32_t getFifoMaxEventCount() const;

  inline bool hasStringType() const;
  inline  ::capnp::Text::Reader getStringType() const;

  inline  ::int32_t getMaxDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::AndroidSensor::Builder {
public:
  typedef AndroidSensor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasVendor();
  inline  ::capnp::Text::Builder getVendor();
  inline void setVendor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVendor(unsigned int size);
  inline void adoptVendor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVendor();

  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getHandle();
  inline void setHandle( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline float getMaxRange();
  inline void setMaxRange(float value);

  inline float getResolution();
  inline void setResolution(float value);

  inline float getPower();
  inline void setPower(float value);

  inline  ::int32_t getMinDelay();
  inline void setMinDelay( ::int32_t value);

  inline  ::uint32_t getFifoReservedEventCount();
  inline void setFifoReservedEventCount( ::uint32_t value);

  inline  ::uint32_t getFifoMaxEventCount();
  inline void setFifoMaxEventCount( ::uint32_t value);

  inline bool hasStringType();
  inline  ::capnp::Text::Builder getStringType();
  inline void setStringType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStringType(unsigned int size);
  inline void adoptStringType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStringType();

  inline  ::int32_t getMaxDelay();
  inline void setMaxDelay( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::AndroidSensor::Pipeline {
public:
  typedef AndroidSensor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::ChffrAndroidExtra::Reader {
public:
  typedef ChffrAndroidExtra Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAllCameraCharacteristics() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getAllCameraCharacteristics() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::ChffrAndroidExtra::Builder {
public:
  typedef ChffrAndroidExtra Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAllCameraCharacteristics();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getAllCameraCharacteristics();
  inline void setAllCameraCharacteristics( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initAllCameraCharacteristics();
  inline void adoptAllCameraCharacteristics(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownAllCameraCharacteristics();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::ChffrAndroidExtra::Pipeline {
public:
  typedef ChffrAndroidExtra Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getAllCameraCharacteristics();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::IosBuildInfo::Reader {
public:
  typedef IosBuildInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAppVersion() const;
  inline  ::capnp::Text::Reader getAppVersion() const;

  inline  ::uint32_t getAppBuild() const;

  inline bool hasOsVersion() const;
  inline  ::capnp::Text::Reader getOsVersion() const;

  inline bool hasDeviceModel() const;
  inline  ::capnp::Text::Reader getDeviceModel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::IosBuildInfo::Builder {
public:
  typedef IosBuildInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppVersion();
  inline  ::capnp::Text::Builder getAppVersion();
  inline void setAppVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppVersion(unsigned int size);
  inline void adoptAppVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppVersion();

  inline  ::uint32_t getAppBuild();
  inline void setAppBuild( ::uint32_t value);

  inline bool hasOsVersion();
  inline  ::capnp::Text::Builder getOsVersion();
  inline void setOsVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOsVersion(unsigned int size);
  inline void adoptOsVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOsVersion();

  inline bool hasDeviceModel();
  inline  ::capnp::Text::Builder getDeviceModel();
  inline void setDeviceModel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDeviceModel(unsigned int size);
  inline void adoptDeviceModel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDeviceModel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::IosBuildInfo::Pipeline {
public:
  typedef IosBuildInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::Reader {
public:
  typedef FrameData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline  ::int32_t getFrameLengthDEPRECATED() const;

  inline  ::int32_t getIntegLines() const;

  inline  ::int32_t getGlobalGainDEPRECATED() const;

  inline bool hasImage() const;
  inline  ::capnp::Data::Reader getImage() const;

  inline  ::cereal::FrameData::FrameTypeDEPRECATED getFrameTypeDEPRECATED() const;

  inline  ::uint64_t getTimestampSof() const;

  inline bool hasAndroidCaptureResultDEPRECATED() const;
  inline  ::cereal::FrameData::AndroidCaptureResult::Reader getAndroidCaptureResultDEPRECATED() const;

  inline bool hasTransform() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTransform() const;

  inline  ::int32_t getLensPosDEPRECATED() const;

  inline float getLensSagDEPRECATED() const;

  inline float getLensErrDEPRECATED() const;

  inline float getLensTruePosDEPRECATED() const;

  inline float getGain() const;

  inline bool hasFocusValDEPRECATED() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getFocusValDEPRECATED() const;

  inline bool hasFocusConfDEPRECATED() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getFocusConfDEPRECATED() const;

  inline bool hasSharpnessScoreDEPRECATED() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getSharpnessScoreDEPRECATED() const;

  inline  ::int32_t getRecoverStateDEPRECATED() const;

  inline bool getHighConversionGain() const;

  inline float getMeasuredGreyFraction() const;

  inline float getTargetGreyFraction() const;

  inline float getProcessingTime() const;

  inline bool hasTemperaturesC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTemperaturesC() const;

  inline  ::uint32_t getFrameIdSensor() const;

  inline  ::cereal::FrameData::ImageSensor getSensor() const;

  inline float getExposureValPercent() const;

  inline  ::uint32_t getRequestId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::Builder {
public:
  typedef FrameData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::int32_t getFrameLengthDEPRECATED();
  inline void setFrameLengthDEPRECATED( ::int32_t value);

  inline  ::int32_t getIntegLines();
  inline void setIntegLines( ::int32_t value);

  inline  ::int32_t getGlobalGainDEPRECATED();
  inline void setGlobalGainDEPRECATED( ::int32_t value);

  inline bool hasImage();
  inline  ::capnp::Data::Builder getImage();
  inline void setImage( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImage();

  inline  ::cereal::FrameData::FrameTypeDEPRECATED getFrameTypeDEPRECATED();
  inline void setFrameTypeDEPRECATED( ::cereal::FrameData::FrameTypeDEPRECATED value);

  inline  ::uint64_t getTimestampSof();
  inline void setTimestampSof( ::uint64_t value);

  inline bool hasAndroidCaptureResultDEPRECATED();
  inline  ::cereal::FrameData::AndroidCaptureResult::Builder getAndroidCaptureResultDEPRECATED();
  inline void setAndroidCaptureResultDEPRECATED( ::cereal::FrameData::AndroidCaptureResult::Reader value);
  inline  ::cereal::FrameData::AndroidCaptureResult::Builder initAndroidCaptureResultDEPRECATED();
  inline void adoptAndroidCaptureResultDEPRECATED(::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult> disownAndroidCaptureResultDEPRECATED();

  inline bool hasTransform();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTransform();
  inline void setTransform( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTransform(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTransform(unsigned int size);
  inline void adoptTransform(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTransform();

  inline  ::int32_t getLensPosDEPRECATED();
  inline void setLensPosDEPRECATED( ::int32_t value);

  inline float getLensSagDEPRECATED();
  inline void setLensSagDEPRECATED(float value);

  inline float getLensErrDEPRECATED();
  inline void setLensErrDEPRECATED(float value);

  inline float getLensTruePosDEPRECATED();
  inline void setLensTruePosDEPRECATED(float value);

  inline float getGain();
  inline void setGain(float value);

  inline bool hasFocusValDEPRECATED();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getFocusValDEPRECATED();
  inline void setFocusValDEPRECATED( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFocusValDEPRECATED(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initFocusValDEPRECATED(unsigned int size);
  inline void adoptFocusValDEPRECATED(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownFocusValDEPRECATED();

  inline bool hasFocusConfDEPRECATED();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getFocusConfDEPRECATED();
  inline void setFocusConfDEPRECATED( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFocusConfDEPRECATED(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initFocusConfDEPRECATED(unsigned int size);
  inline void adoptFocusConfDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownFocusConfDEPRECATED();

  inline bool hasSharpnessScoreDEPRECATED();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getSharpnessScoreDEPRECATED();
  inline void setSharpnessScoreDEPRECATED( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSharpnessScoreDEPRECATED(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initSharpnessScoreDEPRECATED(unsigned int size);
  inline void adoptSharpnessScoreDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownSharpnessScoreDEPRECATED();

  inline  ::int32_t getRecoverStateDEPRECATED();
  inline void setRecoverStateDEPRECATED( ::int32_t value);

  inline bool getHighConversionGain();
  inline void setHighConversionGain(bool value);

  inline float getMeasuredGreyFraction();
  inline void setMeasuredGreyFraction(float value);

  inline float getTargetGreyFraction();
  inline void setTargetGreyFraction(float value);

  inline float getProcessingTime();
  inline void setProcessingTime(float value);

  inline bool hasTemperaturesC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTemperaturesC();
  inline void setTemperaturesC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTemperaturesC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTemperaturesC(unsigned int size);
  inline void adoptTemperaturesC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTemperaturesC();

  inline  ::uint32_t getFrameIdSensor();
  inline void setFrameIdSensor( ::uint32_t value);

  inline  ::cereal::FrameData::ImageSensor getSensor();
  inline void setSensor( ::cereal::FrameData::ImageSensor value);

  inline float getExposureValPercent();
  inline void setExposureValPercent(float value);

  inline  ::uint32_t getRequestId();
  inline void setRequestId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::Pipeline {
public:
  typedef FrameData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::FrameData::AndroidCaptureResult::Pipeline getAndroidCaptureResultDEPRECATED();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::AndroidCaptureResult::Reader {
public:
  typedef AndroidCaptureResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensitivity() const;

  inline  ::int64_t getFrameDuration() const;

  inline  ::int64_t getExposureTime() const;

  inline  ::uint64_t getRollingShutterSkew() const;

  inline bool hasColorCorrectionTransform() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getColorCorrectionTransform() const;

  inline bool hasColorCorrectionGains() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getColorCorrectionGains() const;

  inline  ::int8_t getDisplayRotation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::AndroidCaptureResult::Builder {
public:
  typedef AndroidCaptureResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensitivity();
  inline void setSensitivity( ::int32_t value);

  inline  ::int64_t getFrameDuration();
  inline void setFrameDuration( ::int64_t value);

  inline  ::int64_t getExposureTime();
  inline void setExposureTime( ::int64_t value);

  inline  ::uint64_t getRollingShutterSkew();
  inline void setRollingShutterSkew( ::uint64_t value);

  inline bool hasColorCorrectionTransform();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getColorCorrectionTransform();
  inline void setColorCorrectionTransform( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setColorCorrectionTransform(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initColorCorrectionTransform(unsigned int size);
  inline void adoptColorCorrectionTransform(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownColorCorrectionTransform();

  inline bool hasColorCorrectionGains();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getColorCorrectionGains();
  inline void setColorCorrectionGains( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setColorCorrectionGains(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initColorCorrectionGains(unsigned int size);
  inline void adoptColorCorrectionGains(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownColorCorrectionGains();

  inline  ::int8_t getDisplayRotation();
  inline void setDisplayRotation( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::AndroidCaptureResult::Pipeline {
public:
  typedef AndroidCaptureResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Thumbnail::Reader {
public:
  typedef Thumbnail Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasThumbnail() const;
  inline  ::capnp::Data::Reader getThumbnail() const;

  inline  ::cereal::Thumbnail::Encoding getEncoding() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Thumbnail::Builder {
public:
  typedef Thumbnail Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasThumbnail();
  inline  ::capnp::Data::Builder getThumbnail();
  inline void setThumbnail( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initThumbnail(unsigned int size);
  inline void adoptThumbnail(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownThumbnail();

  inline  ::cereal::Thumbnail::Encoding getEncoding();
  inline void setEncoding( ::cereal::Thumbnail::Encoding value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Thumbnail::Pipeline {
public:
  typedef Thumbnail Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSNMEAData::Reader {
public:
  typedef GPSNMEAData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline  ::uint64_t getLocalWallTime() const;

  inline bool hasNmea() const;
  inline  ::capnp::Text::Reader getNmea() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSNMEAData::Builder {
public:
  typedef GPSNMEAData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::uint64_t getLocalWallTime();
  inline void setLocalWallTime( ::uint64_t value);

  inline bool hasNmea();
  inline  ::capnp::Text::Builder getNmea();
  inline void setNmea( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNmea(unsigned int size);
  inline void adoptNmea(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNmea();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSNMEAData::Pipeline {
public:
  typedef GPSNMEAData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::Reader {
public:
  typedef SensorEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int32_t getVersion() const;

  inline  ::int32_t getSensor() const;

  inline  ::int32_t getType() const;

  inline  ::int64_t getTimestamp() const;

  inline bool isAcceleration() const;
  inline bool hasAcceleration() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getAcceleration() const;

  inline bool isMagnetic() const;
  inline bool hasMagnetic() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagnetic() const;

  inline bool isOrientation() const;
  inline bool hasOrientation() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getOrientation() const;

  inline bool isGyro() const;
  inline bool hasGyro() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyro() const;

  inline  ::cereal::SensorEventData::SensorSource getSource() const;

  inline bool isPressure() const;
  inline bool hasPressure() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getPressure() const;

  inline bool getUncalibratedDEPRECATED() const;

  inline bool isMagneticUncalibrated() const;
  inline bool hasMagneticUncalibrated() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagneticUncalibrated() const;

  inline bool isGyroUncalibrated() const;
  inline bool hasGyroUncalibrated() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyroUncalibrated() const;

  inline bool isProximity() const;
  inline float getProximity() const;

  inline bool isLight() const;
  inline float getLight() const;

  inline bool isTemperature() const;
  inline float getTemperature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::Builder {
public:
  typedef SensorEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getSensor();
  inline void setSensor( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool isAcceleration();
  inline bool hasAcceleration();
  inline  ::cereal::SensorEventData::SensorVec::Builder getAcceleration();
  inline void setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownAcceleration();

  inline bool isMagnetic();
  inline bool hasMagnetic();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagnetic();
  inline void setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagnetic();
  inline void adoptMagnetic(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagnetic();

  inline bool isOrientation();
  inline bool hasOrientation();
  inline  ::cereal::SensorEventData::SensorVec::Builder getOrientation();
  inline void setOrientation( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownOrientation();

  inline bool isGyro();
  inline bool hasGyro();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyro();
  inline void setGyro( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyro();
  inline void adoptGyro(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyro();

  inline  ::cereal::SensorEventData::SensorSource getSource();
  inline void setSource( ::cereal::SensorEventData::SensorSource value);

  inline bool isPressure();
  inline bool hasPressure();
  inline  ::cereal::SensorEventData::SensorVec::Builder getPressure();
  inline void setPressure( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initPressure();
  inline void adoptPressure(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownPressure();

  inline bool getUncalibratedDEPRECATED();
  inline void setUncalibratedDEPRECATED(bool value);

  inline bool isMagneticUncalibrated();
  inline bool hasMagneticUncalibrated();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagneticUncalibrated();
  inline void setMagneticUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagneticUncalibrated();
  inline void adoptMagneticUncalibrated(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagneticUncalibrated();

  inline bool isGyroUncalibrated();
  inline bool hasGyroUncalibrated();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyroUncalibrated();
  inline void setGyroUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyroUncalibrated();
  inline void adoptGyroUncalibrated(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyroUncalibrated();

  inline bool isProximity();
  inline float getProximity();
  inline void setProximity(float value);

  inline bool isLight();
  inline float getLight();
  inline void setLight(float value);

  inline bool isTemperature();
  inline float getTemperature();
  inline void setTemperature(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::Pipeline {
public:
  typedef SensorEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::SensorVec::Reader {
public:
  typedef SensorVec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getV() const;

  inline  ::int8_t getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::SensorVec::Builder {
public:
  typedef SensorVec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getV();
  inline void setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownV();

  inline  ::int8_t getStatus();
  inline void setStatus( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::SensorVec::Pipeline {
public:
  typedef SensorVec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GpsLocationData::Reader {
public:
  typedef GpsLocationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags() const;

  inline double getLatitude() const;

  inline double getLongitude() const;

  inline double getAltitude() const;

  inline float getSpeed() const;

  inline float getBearingDeg() const;

  inline float getHorizontalAccuracy() const;

  inline  ::int64_t getUnixTimestampMillis() const;

  inline  ::cereal::GpsLocationData::SensorSource getSource() const;

  inline bool hasVNED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVNED() const;

  inline float getVerticalAccuracy() const;

  inline float getBearingAccuracyDeg() const;

  inline float getSpeedAccuracy() const;

  inline bool getHasFix() const;

  inline  ::int8_t getSatelliteCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GpsLocationData::Builder {
public:
  typedef GpsLocationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags();
  inline void setFlags( ::uint16_t value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getBearingDeg();
  inline void setBearingDeg(float value);

  inline float getHorizontalAccuracy();
  inline void setHorizontalAccuracy(float value);

  inline  ::int64_t getUnixTimestampMillis();
  inline void setUnixTimestampMillis( ::int64_t value);

  inline  ::cereal::GpsLocationData::SensorSource getSource();
  inline void setSource( ::cereal::GpsLocationData::SensorSource value);

  inline bool hasVNED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVNED();
  inline void setVNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVNED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVNED(unsigned int size);
  inline void adoptVNED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVNED();

  inline float getVerticalAccuracy();
  inline void setVerticalAccuracy(float value);

  inline float getBearingAccuracyDeg();
  inline void setBearingAccuracyDeg(float value);

  inline float getSpeedAccuracy();
  inline void setSpeedAccuracy(float value);

  inline bool getHasFix();
  inline void setHasFix(bool value);

  inline  ::int8_t getSatelliteCount();
  inline void setSatelliteCount( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GpsLocationData::Pipeline {
public:
  typedef GpsLocationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CanData::Reader {
public:
  typedef CanData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress() const;

  inline  ::uint16_t getBusTimeDEPRECATED() const;

  inline bool hasDat() const;
  inline  ::capnp::Data::Reader getDat() const;

  inline  ::uint8_t getSrc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CanData::Builder {
public:
  typedef CanData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint16_t getBusTimeDEPRECATED();
  inline void setBusTimeDEPRECATED( ::uint16_t value);

  inline bool hasDat();
  inline  ::capnp::Data::Builder getDat();
  inline void setDat( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDat(unsigned int size);
  inline void adoptDat(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDat();

  inline  ::uint8_t getSrc();
  inline void setSrc( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CanData::Pipeline {
public:
  typedef CanData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::Reader {
public:
  typedef DeviceState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCpu0DEPRECATED() const;

  inline  ::uint16_t getCpu1DEPRECATED() const;

  inline  ::uint16_t getCpu2DEPRECATED() const;

  inline  ::uint16_t getCpu3DEPRECATED() const;

  inline  ::uint16_t getMemDEPRECATED() const;

  inline  ::uint16_t getGpuDEPRECATED() const;

  inline  ::uint32_t getBatDEPRECATED() const;

  inline float getFreeSpacePercent() const;

  inline  ::int16_t getBatteryPercentDEPRECATED() const;

  inline bool hasBatteryStatusDEPRECATED() const;
  inline  ::capnp::Text::Reader getBatteryStatusDEPRECATED() const;

  inline  ::uint16_t getFanSpeedPercentDesired() const;

  inline bool getStarted() const;

  inline bool getUsbOnlineDEPRECATED() const;

  inline  ::uint64_t getStartedMonoTime() const;

  inline  ::cereal::DeviceState::ThermalStatus getThermalStatus() const;

  inline  ::int32_t getBatteryCurrentDEPRECATED() const;

  inline  ::int32_t getBatteryVoltageDEPRECATED() const;

  inline bool getChargingErrorDEPRECATED() const;

  inline bool getChargingDisabledDEPRECATED() const;

  inline  ::int8_t getMemoryUsagePercent() const;

  inline  ::int8_t getCpuUsagePercentDEPRECATED() const;

  inline  ::uint16_t getPa0DEPRECATED() const;

  inline  ::cereal::DeviceState::NetworkType getNetworkType() const;

  inline  ::uint32_t getOffroadPowerUsageUwh() const;

  inline  ::cereal::DeviceState::NetworkStrength getNetworkStrength() const;

  inline  ::uint32_t getCarBatteryCapacityUwh() const;

  inline bool hasCpuTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCpuTempC() const;

  inline bool hasGpuTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGpuTempC() const;

  inline float getMemoryTempC() const;

  inline float getBatteryTempCDEPRECATED() const;

  inline float getAmbientTempCDEPRECATED() const;

  inline bool hasNetworkInfo() const;
  inline  ::cereal::DeviceState::NetworkInfo::Reader getNetworkInfo() const;

  inline  ::uint64_t getLastAthenaPingTime() const;

  inline  ::int8_t getGpuUsagePercent() const;

  inline bool hasCpuUsagePercent() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getCpuUsagePercent() const;

  inline bool hasNvmeTempCDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNvmeTempCDEPRECATED() const;

  inline bool hasModemTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getModemTempC() const;

  inline  ::int8_t getScreenBrightnessPercent() const;

  inline bool hasThermalZones() const;
  inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader getThermalZones() const;

  inline bool hasPmicTempC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPmicTempC() const;

  inline float getPowerDrawW() const;

  inline bool getNetworkMetered() const;

  inline float getSomPowerDrawW() const;

  inline bool hasNetworkStats() const;
  inline  ::cereal::DeviceState::NetworkStats::Reader getNetworkStats() const;

  inline float getMaxTempC() const;

  inline  ::cereal::InitData::DeviceType getDeviceType() const;

  inline float getIntakeTempC() const;

  inline float getExhaustTempC() const;

  inline float getCaseTempC() const;

  inline float getDspTempC() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::Builder {
public:
  typedef DeviceState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCpu0DEPRECATED();
  inline void setCpu0DEPRECATED( ::uint16_t value);

  inline  ::uint16_t getCpu1DEPRECATED();
  inline void setCpu1DEPRECATED( ::uint16_t value);

  inline  ::uint16_t getCpu2DEPRECATED();
  inline void setCpu2DEPRECATED( ::uint16_t value);

  inline  ::uint16_t getCpu3DEPRECATED();
  inline void setCpu3DEPRECATED( ::uint16_t value);

  inline  ::uint16_t getMemDEPRECATED();
  inline void setMemDEPRECATED( ::uint16_t value);

  inline  ::uint16_t getGpuDEPRECATED();
  inline void setGpuDEPRECATED( ::uint16_t value);

  inline  ::uint32_t getBatDEPRECATED();
  inline void setBatDEPRECATED( ::uint32_t value);

  inline float getFreeSpacePercent();
  inline void setFreeSpacePercent(float value);

  inline  ::int16_t getBatteryPercentDEPRECATED();
  inline void setBatteryPercentDEPRECATED( ::int16_t value);

  inline bool hasBatteryStatusDEPRECATED();
  inline  ::capnp::Text::Builder getBatteryStatusDEPRECATED();
  inline void setBatteryStatusDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBatteryStatusDEPRECATED(unsigned int size);
  inline void adoptBatteryStatusDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBatteryStatusDEPRECATED();

  inline  ::uint16_t getFanSpeedPercentDesired();
  inline void setFanSpeedPercentDesired( ::uint16_t value);

  inline bool getStarted();
  inline void setStarted(bool value);

  inline bool getUsbOnlineDEPRECATED();
  inline void setUsbOnlineDEPRECATED(bool value);

  inline  ::uint64_t getStartedMonoTime();
  inline void setStartedMonoTime( ::uint64_t value);

  inline  ::cereal::DeviceState::ThermalStatus getThermalStatus();
  inline void setThermalStatus( ::cereal::DeviceState::ThermalStatus value);

  inline  ::int32_t getBatteryCurrentDEPRECATED();
  inline void setBatteryCurrentDEPRECATED( ::int32_t value);

  inline  ::int32_t getBatteryVoltageDEPRECATED();
  inline void setBatteryVoltageDEPRECATED( ::int32_t value);

  inline bool getChargingErrorDEPRECATED();
  inline void setChargingErrorDEPRECATED(bool value);

  inline bool getChargingDisabledDEPRECATED();
  inline void setChargingDisabledDEPRECATED(bool value);

  inline  ::int8_t getMemoryUsagePercent();
  inline void setMemoryUsagePercent( ::int8_t value);

  inline  ::int8_t getCpuUsagePercentDEPRECATED();
  inline void setCpuUsagePercentDEPRECATED( ::int8_t value);

  inline  ::uint16_t getPa0DEPRECATED();
  inline void setPa0DEPRECATED( ::uint16_t value);

  inline  ::cereal::DeviceState::NetworkType getNetworkType();
  inline void setNetworkType( ::cereal::DeviceState::NetworkType value);

  inline  ::uint32_t getOffroadPowerUsageUwh();
  inline void setOffroadPowerUsageUwh( ::uint32_t value);

  inline  ::cereal::DeviceState::NetworkStrength getNetworkStrength();
  inline void setNetworkStrength( ::cereal::DeviceState::NetworkStrength value);

  inline  ::uint32_t getCarBatteryCapacityUwh();
  inline void setCarBatteryCapacityUwh( ::uint32_t value);

  inline bool hasCpuTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCpuTempC();
  inline void setCpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCpuTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCpuTempC(unsigned int size);
  inline void adoptCpuTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCpuTempC();

  inline bool hasGpuTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGpuTempC();
  inline void setGpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGpuTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGpuTempC(unsigned int size);
  inline void adoptGpuTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGpuTempC();

  inline float getMemoryTempC();
  inline void setMemoryTempC(float value);

  inline float getBatteryTempCDEPRECATED();
  inline void setBatteryTempCDEPRECATED(float value);

  inline float getAmbientTempCDEPRECATED();
  inline void setAmbientTempCDEPRECATED(float value);

  inline bool hasNetworkInfo();
  inline  ::cereal::DeviceState::NetworkInfo::Builder getNetworkInfo();
  inline void setNetworkInfo( ::cereal::DeviceState::NetworkInfo::Reader value);
  inline  ::cereal::DeviceState::NetworkInfo::Builder initNetworkInfo();
  inline void adoptNetworkInfo(::capnp::Orphan< ::cereal::DeviceState::NetworkInfo>&& value);
  inline ::capnp::Orphan< ::cereal::DeviceState::NetworkInfo> disownNetworkInfo();

  inline  ::uint64_t getLastAthenaPingTime();
  inline void setLastAthenaPingTime( ::uint64_t value);

  inline  ::int8_t getGpuUsagePercent();
  inline void setGpuUsagePercent( ::int8_t value);

  inline bool hasCpuUsagePercent();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getCpuUsagePercent();
  inline void setCpuUsagePercent( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCpuUsagePercent(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initCpuUsagePercent(unsigned int size);
  inline void adoptCpuUsagePercent(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownCpuUsagePercent();

  inline bool hasNvmeTempCDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNvmeTempCDEPRECATED();
  inline void setNvmeTempCDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNvmeTempCDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNvmeTempCDEPRECATED(unsigned int size);
  inline void adoptNvmeTempCDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNvmeTempCDEPRECATED();

  inline bool hasModemTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getModemTempC();
  inline void setModemTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setModemTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initModemTempC(unsigned int size);
  inline void adoptModemTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownModemTempC();

  inline  ::int8_t getScreenBrightnessPercent();
  inline void setScreenBrightnessPercent( ::int8_t value);

  inline bool hasThermalZones();
  inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder getThermalZones();
  inline void setThermalZones( ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder initThermalZones(unsigned int size);
  inline void adoptThermalZones(::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>> disownThermalZones();

  inline bool hasPmicTempC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPmicTempC();
  inline void setPmicTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPmicTempC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPmicTempC(unsigned int size);
  inline void adoptPmicTempC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPmicTempC();

  inline float getPowerDrawW();
  inline void setPowerDrawW(float value);

  inline bool getNetworkMetered();
  inline void setNetworkMetered(bool value);

  inline float getSomPowerDrawW();
  inline void setSomPowerDrawW(float value);

  inline bool hasNetworkStats();
  inline  ::cereal::DeviceState::NetworkStats::Builder getNetworkStats();
  inline void setNetworkStats( ::cereal::DeviceState::NetworkStats::Reader value);
  inline  ::cereal::DeviceState::NetworkStats::Builder initNetworkStats();
  inline void adoptNetworkStats(::capnp::Orphan< ::cereal::DeviceState::NetworkStats>&& value);
  inline ::capnp::Orphan< ::cereal::DeviceState::NetworkStats> disownNetworkStats();

  inline float getMaxTempC();
  inline void setMaxTempC(float value);

  inline  ::cereal::InitData::DeviceType getDeviceType();
  inline void setDeviceType( ::cereal::InitData::DeviceType value);

  inline float getIntakeTempC();
  inline void setIntakeTempC(float value);

  inline float getExhaustTempC();
  inline void setExhaustTempC(float value);

  inline float getCaseTempC();
  inline void setCaseTempC(float value);

  inline float getDspTempC();
  inline void setDspTempC(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::Pipeline {
public:
  typedef DeviceState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::DeviceState::NetworkInfo::Pipeline getNetworkInfo();
  inline  ::cereal::DeviceState::NetworkStats::Pipeline getNetworkStats();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::ThermalZone::Reader {
public:
  typedef ThermalZone Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline float getTemp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::ThermalZone::Builder {
public:
  typedef ThermalZone Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline float getTemp();
  inline void setTemp(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::ThermalZone::Pipeline {
public:
  typedef ThermalZone Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::NetworkInfo::Reader {
public:
  typedef NetworkInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTechnology() const;
  inline  ::capnp::Text::Reader getTechnology() const;

  inline bool hasOperator() const;
  inline  ::capnp::Text::Reader getOperator() const;

  inline bool hasBand() const;
  inline  ::capnp::Text::Reader getBand() const;

  inline  ::uint16_t getChannel() const;

  inline bool hasExtra() const;
  inline  ::capnp::Text::Reader getExtra() const;

  inline bool hasState() const;
  inline  ::capnp::Text::Reader getState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::NetworkInfo::Builder {
public:
  typedef NetworkInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTechnology();
  inline  ::capnp::Text::Builder getTechnology();
  inline void setTechnology( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTechnology(unsigned int size);
  inline void adoptTechnology(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTechnology();

  inline bool hasOperator();
  inline  ::capnp::Text::Builder getOperator();
  inline void setOperator( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOperator(unsigned int size);
  inline void adoptOperator(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOperator();

  inline bool hasBand();
  inline  ::capnp::Text::Builder getBand();
  inline void setBand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBand(unsigned int size);
  inline void adoptBand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBand();

  inline  ::uint16_t getChannel();
  inline void setChannel( ::uint16_t value);

  inline bool hasExtra();
  inline  ::capnp::Text::Builder getExtra();
  inline void setExtra( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExtra(unsigned int size);
  inline void adoptExtra(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExtra();

  inline bool hasState();
  inline  ::capnp::Text::Builder getState();
  inline void setState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::NetworkInfo::Pipeline {
public:
  typedef NetworkInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceState::NetworkStats::Reader {
public:
  typedef NetworkStats Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getWwanTx() const;

  inline  ::int64_t getWwanRx() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceState::NetworkStats::Builder {
public:
  typedef NetworkStats Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getWwanTx();
  inline void setWwanTx( ::int64_t value);

  inline  ::int64_t getWwanRx();
  inline void setWwanRx( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceState::NetworkStats::Pipeline {
public:
  typedef NetworkStats Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PandaState::Reader {
public:
  typedef PandaState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltage() const;

  inline  ::uint32_t getCurrent() const;

  inline bool getIgnitionLine() const;

  inline bool getControlsAllowed() const;

  inline bool getGasInterceptorDetectedDEPRECATED() const;

  inline bool getStartedSignalDetectedDEPRECATED() const;

  inline bool getHasGpsDEPRECATED() const;

  inline  ::uint32_t getRxBufferOverflow() const;

  inline  ::uint32_t getTxBufferOverflow() const;

  inline  ::uint32_t getGmlanSendErrsDEPRECATED() const;

  inline  ::cereal::PandaState::PandaType getPandaType() const;

  inline  ::uint16_t getFanSpeedRpmDEPRECATED() const;

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED() const;

  inline bool getIgnitionCan() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModel() const;

  inline  ::cereal::PandaState::FaultStatus getFaultStatus() const;

  inline bool getPowerSaveEnabled() const;

  inline  ::uint32_t getUptime() const;

  inline bool hasFaults() const;
  inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader getFaults() const;

  inline  ::uint32_t getSafetyRxInvalid() const;

  inline  ::int16_t getSafetyParamDEPRECATED() const;

  inline  ::cereal::PandaState::HarnessStatus getHarnessStatus() const;

  inline bool getHeartbeatLost() const;

  inline  ::int16_t getAlternativeExperience() const;

  inline  ::uint32_t getSafetyTxBlocked() const;

  inline float getInterruptLoad() const;

  inline  ::uint32_t getSafetyParam2DEPRECATED() const;

  inline  ::uint16_t getSafetyParam() const;

  inline  ::uint8_t getFanPower() const;

  inline bool hasCanState0() const;
  inline  ::cereal::PandaState::PandaCanState::Reader getCanState0() const;

  inline bool hasCanState1() const;
  inline  ::cereal::PandaState::PandaCanState::Reader getCanState1() const;

  inline bool hasCanState2() const;
  inline  ::cereal::PandaState::PandaCanState::Reader getCanState2() const;

  inline bool getSafetyRxChecksInvalid() const;

  inline  ::uint16_t getSpiErrorCount() const;

  inline  ::uint8_t getFanStallCount() const;

  inline float getSbu1Voltage() const;

  inline float getSbu2Voltage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PandaState::Builder {
public:
  typedef PandaState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltage();
  inline void setVoltage( ::uint32_t value);

  inline  ::uint32_t getCurrent();
  inline void setCurrent( ::uint32_t value);

  inline bool getIgnitionLine();
  inline void setIgnitionLine(bool value);

  inline bool getControlsAllowed();
  inline void setControlsAllowed(bool value);

  inline bool getGasInterceptorDetectedDEPRECATED();
  inline void setGasInterceptorDetectedDEPRECATED(bool value);

  inline bool getStartedSignalDetectedDEPRECATED();
  inline void setStartedSignalDetectedDEPRECATED(bool value);

  inline bool getHasGpsDEPRECATED();
  inline void setHasGpsDEPRECATED(bool value);

  inline  ::uint32_t getRxBufferOverflow();
  inline void setRxBufferOverflow( ::uint32_t value);

  inline  ::uint32_t getTxBufferOverflow();
  inline void setTxBufferOverflow( ::uint32_t value);

  inline  ::uint32_t getGmlanSendErrsDEPRECATED();
  inline void setGmlanSendErrsDEPRECATED( ::uint32_t value);

  inline  ::cereal::PandaState::PandaType getPandaType();
  inline void setPandaType( ::cereal::PandaState::PandaType value);

  inline  ::uint16_t getFanSpeedRpmDEPRECATED();
  inline void setFanSpeedRpmDEPRECATED( ::uint16_t value);

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED();
  inline void setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value);

  inline bool getIgnitionCan();
  inline void setIgnitionCan(bool value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModel();
  inline void setSafetyModel( ::cereal::CarParams::SafetyModel value);

  inline  ::cereal::PandaState::FaultStatus getFaultStatus();
  inline void setFaultStatus( ::cereal::PandaState::FaultStatus value);

  inline bool getPowerSaveEnabled();
  inline void setPowerSaveEnabled(bool value);

  inline  ::uint32_t getUptime();
  inline void setUptime( ::uint32_t value);

  inline bool hasFaults();
  inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder getFaults();
  inline void setFaults( ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader value);
  inline void setFaults(::kj::ArrayPtr<const  ::cereal::PandaState::FaultType> value);
  inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder initFaults(unsigned int size);
  inline void adoptFaults(::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>> disownFaults();

  inline  ::uint32_t getSafetyRxInvalid();
  inline void setSafetyRxInvalid( ::uint32_t value);

  inline  ::int16_t getSafetyParamDEPRECATED();
  inline void setSafetyParamDEPRECATED( ::int16_t value);

  inline  ::cereal::PandaState::HarnessStatus getHarnessStatus();
  inline void setHarnessStatus( ::cereal::PandaState::HarnessStatus value);

  inline bool getHeartbeatLost();
  inline void setHeartbeatLost(bool value);

  inline  ::int16_t getAlternativeExperience();
  inline void setAlternativeExperience( ::int16_t value);

  inline  ::uint32_t getSafetyTxBlocked();
  inline void setSafetyTxBlocked( ::uint32_t value);

  inline float getInterruptLoad();
  inline void setInterruptLoad(float value);

  inline  ::uint32_t getSafetyParam2DEPRECATED();
  inline void setSafetyParam2DEPRECATED( ::uint32_t value);

  inline  ::uint16_t getSafetyParam();
  inline void setSafetyParam( ::uint16_t value);

  inline  ::uint8_t getFanPower();
  inline void setFanPower( ::uint8_t value);

  inline bool hasCanState0();
  inline  ::cereal::PandaState::PandaCanState::Builder getCanState0();
  inline void setCanState0( ::cereal::PandaState::PandaCanState::Reader value);
  inline  ::cereal::PandaState::PandaCanState::Builder initCanState0();
  inline void adoptCanState0(::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> disownCanState0();

  inline bool hasCanState1();
  inline  ::cereal::PandaState::PandaCanState::Builder getCanState1();
  inline void setCanState1( ::cereal::PandaState::PandaCanState::Reader value);
  inline  ::cereal::PandaState::PandaCanState::Builder initCanState1();
  inline void adoptCanState1(::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> disownCanState1();

  inline bool hasCanState2();
  inline  ::cereal::PandaState::PandaCanState::Builder getCanState2();
  inline void setCanState2( ::cereal::PandaState::PandaCanState::Reader value);
  inline  ::cereal::PandaState::PandaCanState::Builder initCanState2();
  inline void adoptCanState2(::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> disownCanState2();

  inline bool getSafetyRxChecksInvalid();
  inline void setSafetyRxChecksInvalid(bool value);

  inline  ::uint16_t getSpiErrorCount();
  inline void setSpiErrorCount( ::uint16_t value);

  inline  ::uint8_t getFanStallCount();
  inline void setFanStallCount( ::uint8_t value);

  inline float getSbu1Voltage();
  inline void setSbu1Voltage(float value);

  inline float getSbu2Voltage();
  inline void setSbu2Voltage(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PandaState::Pipeline {
public:
  typedef PandaState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::PandaState::PandaCanState::Pipeline getCanState0();
  inline  ::cereal::PandaState::PandaCanState::Pipeline getCanState1();
  inline  ::cereal::PandaState::PandaCanState::Pipeline getCanState2();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PandaState::PandaCanState::Reader {
public:
  typedef PandaCanState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getBusOff() const;

  inline  ::uint32_t getBusOffCnt() const;

  inline bool getErrorWarning() const;

  inline bool getErrorPassive() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastError() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastStoredError() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataError() const;

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataStoredError() const;

  inline  ::uint8_t getReceiveErrorCnt() const;

  inline  ::uint8_t getTransmitErrorCnt() const;

  inline  ::uint32_t getTotalErrorCnt() const;

  inline  ::uint32_t getTotalTxLostCnt() const;

  inline  ::uint32_t getTotalRxLostCnt() const;

  inline  ::uint32_t getTotalTxCnt() const;

  inline  ::uint32_t getTotalRxCnt() const;

  inline  ::uint32_t getTotalFwdCnt() const;

  inline  ::uint16_t getCanSpeed() const;

  inline  ::uint16_t getCanDataSpeed() const;

  inline bool getCanfdEnabled() const;

  inline bool getBrsEnabled() const;

  inline bool getCanfdNonIso() const;

  inline  ::uint32_t getIrq0CallRate() const;

  inline  ::uint32_t getIrq1CallRate() const;

  inline  ::uint32_t getIrq2CallRate() const;

  inline  ::uint32_t getCanCoreResetCnt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PandaState::PandaCanState::Builder {
public:
  typedef PandaCanState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getBusOff();
  inline void setBusOff(bool value);

  inline  ::uint32_t getBusOffCnt();
  inline void setBusOffCnt( ::uint32_t value);

  inline bool getErrorWarning();
  inline void setErrorWarning(bool value);

  inline bool getErrorPassive();
  inline void setErrorPassive(bool value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastError();
  inline void setLastError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastStoredError();
  inline void setLastStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataError();
  inline void setLastDataError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::cereal::PandaState::PandaCanState::LecErrorCode getLastDataStoredError();
  inline void setLastDataStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value);

  inline  ::uint8_t getReceiveErrorCnt();
  inline void setReceiveErrorCnt( ::uint8_t value);

  inline  ::uint8_t getTransmitErrorCnt();
  inline void setTransmitErrorCnt( ::uint8_t value);

  inline  ::uint32_t getTotalErrorCnt();
  inline void setTotalErrorCnt( ::uint32_t value);

  inline  ::uint32_t getTotalTxLostCnt();
  inline void setTotalTxLostCnt( ::uint32_t value);

  inline  ::uint32_t getTotalRxLostCnt();
  inline void setTotalRxLostCnt( ::uint32_t value);

  inline  ::uint32_t getTotalTxCnt();
  inline void setTotalTxCnt( ::uint32_t value);

  inline  ::uint32_t getTotalRxCnt();
  inline void setTotalRxCnt( ::uint32_t value);

  inline  ::uint32_t getTotalFwdCnt();
  inline void setTotalFwdCnt( ::uint32_t value);

  inline  ::uint16_t getCanSpeed();
  inline void setCanSpeed( ::uint16_t value);

  inline  ::uint16_t getCanDataSpeed();
  inline void setCanDataSpeed( ::uint16_t value);

  inline bool getCanfdEnabled();
  inline void setCanfdEnabled(bool value);

  inline bool getBrsEnabled();
  inline void setBrsEnabled(bool value);

  inline bool getCanfdNonIso();
  inline void setCanfdNonIso(bool value);

  inline  ::uint32_t getIrq0CallRate();
  inline void setIrq0CallRate( ::uint32_t value);

  inline  ::uint32_t getIrq1CallRate();
  inline void setIrq1CallRate( ::uint32_t value);

  inline  ::uint32_t getIrq2CallRate();
  inline void setIrq2CallRate( ::uint32_t value);

  inline  ::uint32_t getCanCoreResetCnt();
  inline void setCanCoreResetCnt( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PandaState::PandaCanState::Pipeline {
public:
  typedef PandaCanState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PeripheralState::Reader {
public:
  typedef PeripheralState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::PandaState::PandaType getPandaType() const;

  inline  ::uint32_t getVoltage() const;

  inline  ::uint32_t getCurrent() const;

  inline  ::uint16_t getFanSpeedRpm() const;

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PeripheralState::Builder {
public:
  typedef PeripheralState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::PandaState::PandaType getPandaType();
  inline void setPandaType( ::cereal::PandaState::PandaType value);

  inline  ::uint32_t getVoltage();
  inline void setVoltage( ::uint32_t value);

  inline  ::uint32_t getCurrent();
  inline void setCurrent( ::uint32_t value);

  inline  ::uint16_t getFanSpeedRpm();
  inline void setFanSpeedRpm( ::uint16_t value);

  inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED getUsbPowerModeDEPRECATED();
  inline void setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PeripheralState::Pipeline {
public:
  typedef PeripheralState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::Reader {
public:
  typedef RadarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrixDEPRECATED() const;

  inline float getAngleOffsetDEPRECATED() const;

  inline  ::int8_t getCalStatusDEPRECATED() const;

  inline bool hasLeadOne() const;
  inline  ::cereal::RadarState::LeadData::Reader getLeadOne() const;

  inline bool hasLeadTwo() const;
  inline  ::cereal::RadarState::LeadData::Reader getLeadTwo() const;

  inline float getCumLagMsDEPRECATED() const;

  inline  ::uint64_t getMdMonoTime() const;

  inline  ::uint64_t getFtMonoTimeDEPRECATED() const;

  inline  ::int32_t getCalCycleDEPRECATED() const;

  inline  ::int8_t getCalPercDEPRECATED() const;

  inline bool hasCanMonoTimesDEPRECATED() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimesDEPRECATED() const;

  inline  ::uint64_t getCarStateMonoTime() const;

  inline bool hasRadarErrorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader getRadarErrorsDEPRECATED() const;

  inline bool hasRadarErrors() const;
  inline  ::cereal::RadarData::Error::Reader getRadarErrors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::Builder {
public:
  typedef RadarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrixDEPRECATED();
  inline void setWarpMatrixDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrixDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrixDEPRECATED();

  inline float getAngleOffsetDEPRECATED();
  inline void setAngleOffsetDEPRECATED(float value);

  inline  ::int8_t getCalStatusDEPRECATED();
  inline void setCalStatusDEPRECATED( ::int8_t value);

  inline bool hasLeadOne();
  inline  ::cereal::RadarState::LeadData::Builder getLeadOne();
  inline void setLeadOne( ::cereal::RadarState::LeadData::Reader value);
  inline  ::cereal::RadarState::LeadData::Builder initLeadOne();
  inline void adoptLeadOne(::capnp::Orphan< ::cereal::RadarState::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState::LeadData> disownLeadOne();

  inline bool hasLeadTwo();
  inline  ::cereal::RadarState::LeadData::Builder getLeadTwo();
  inline void setLeadTwo( ::cereal::RadarState::LeadData::Reader value);
  inline  ::cereal::RadarState::LeadData::Builder initLeadTwo();
  inline void adoptLeadTwo(::capnp::Orphan< ::cereal::RadarState::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState::LeadData> disownLeadTwo();

  inline float getCumLagMsDEPRECATED();
  inline void setCumLagMsDEPRECATED(float value);

  inline  ::uint64_t getMdMonoTime();
  inline void setMdMonoTime( ::uint64_t value);

  inline  ::uint64_t getFtMonoTimeDEPRECATED();
  inline void setFtMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::int32_t getCalCycleDEPRECATED();
  inline void setCalCycleDEPRECATED( ::int32_t value);

  inline  ::int8_t getCalPercDEPRECATED();
  inline void setCalPercDEPRECATED( ::int8_t value);

  inline bool hasCanMonoTimesDEPRECATED();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimesDEPRECATED();
  inline void setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimesDEPRECATED(unsigned int size);
  inline void adoptCanMonoTimesDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimesDEPRECATED();

  inline  ::uint64_t getCarStateMonoTime();
  inline void setCarStateMonoTime( ::uint64_t value);

  inline bool hasRadarErrorsDEPRECATED();
  inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder getRadarErrorsDEPRECATED();
  inline void setRadarErrorsDEPRECATED( ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader value);
  inline void setRadarErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::RadarData::ErrorDEPRECATED> value);
  inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder initRadarErrorsDEPRECATED(unsigned int size);
  inline void adoptRadarErrorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>> disownRadarErrorsDEPRECATED();

  inline bool hasRadarErrors();
  inline  ::cereal::RadarData::Error::Builder getRadarErrors();
  inline void setRadarErrors( ::cereal::RadarData::Error::Reader value);
  inline  ::cereal::RadarData::Error::Builder initRadarErrors();
  inline void adoptRadarErrors(::capnp::Orphan< ::cereal::RadarData::Error>&& value);
  inline ::capnp::Orphan< ::cereal::RadarData::Error> disownRadarErrors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::Pipeline {
public:
  typedef RadarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::RadarState::LeadData::Pipeline getLeadOne();
  inline  ::cereal::RadarState::LeadData::Pipeline getLeadTwo();
  inline  ::cereal::RadarData::Error::Pipeline getRadarErrors();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getVLead() const;

  inline float getALeadDEPRECATED() const;

  inline float getDPath() const;

  inline float getVLat() const;

  inline float getVLeadK() const;

  inline float getALeadK() const;

  inline bool getFcw() const;

  inline bool getStatus() const;

  inline float getALeadTau() const;

  inline float getModelProb() const;

  inline bool getRadar() const;

  inline  ::int32_t getRadarTrackId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getVLead();
  inline void setVLead(float value);

  inline float getALeadDEPRECATED();
  inline void setALeadDEPRECATED(float value);

  inline float getDPath();
  inline void setDPath(float value);

  inline float getVLat();
  inline void setVLat(float value);

  inline float getVLeadK();
  inline void setVLeadK(float value);

  inline float getALeadK();
  inline void setALeadK(float value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline bool getStatus();
  inline void setStatus(bool value);

  inline float getALeadTau();
  inline void setALeadTau(float value);

  inline float getModelProb();
  inline void setModelProb(float value);

  inline bool getRadar();
  inline void setRadar(bool value);

  inline  ::int32_t getRadarTrackId();
  inline void setRadarTrackId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveCalibrationData::Reader {
public:
  typedef LiveCalibrationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrixDEPRECATED() const;

  inline  ::int8_t getCalStatusDEPRECATED() const;

  inline  ::int32_t getCalCycle() const;

  inline  ::int8_t getCalPerc() const;

  inline bool hasExtrinsicMatrix() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getExtrinsicMatrix() const;

  inline bool hasWarpMatrix2DEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrix2DEPRECATED() const;

  inline bool hasWarpMatrixBigDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWarpMatrixBigDEPRECATED() const;

  inline bool hasRpyCalib() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRpyCalib() const;

  inline bool hasRpyCalibSpread() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRpyCalibSpread() const;

  inline  ::int32_t getValidBlocks() const;

  inline bool hasWideFromDeviceEuler() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWideFromDeviceEuler() const;

  inline  ::cereal::LiveCalibrationData::Status getCalStatus() const;

  inline bool hasHeight() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveCalibrationData::Builder {
public:
  typedef LiveCalibrationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrixDEPRECATED();
  inline void setWarpMatrixDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrixDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrixDEPRECATED();

  inline  ::int8_t getCalStatusDEPRECATED();
  inline void setCalStatusDEPRECATED( ::int8_t value);

  inline  ::int32_t getCalCycle();
  inline void setCalCycle( ::int32_t value);

  inline  ::int8_t getCalPerc();
  inline void setCalPerc( ::int8_t value);

  inline bool hasExtrinsicMatrix();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getExtrinsicMatrix();
  inline void setExtrinsicMatrix( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setExtrinsicMatrix(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initExtrinsicMatrix(unsigned int size);
  inline void adoptExtrinsicMatrix(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownExtrinsicMatrix();

  inline bool hasWarpMatrix2DEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrix2DEPRECATED();
  inline void setWarpMatrix2DEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrix2DEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrix2DEPRECATED(unsigned int size);
  inline void adoptWarpMatrix2DEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrix2DEPRECATED();

  inline bool hasWarpMatrixBigDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWarpMatrixBigDEPRECATED();
  inline void setWarpMatrixBigDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWarpMatrixBigDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWarpMatrixBigDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixBigDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWarpMatrixBigDEPRECATED();

  inline bool hasRpyCalib();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRpyCalib();
  inline void setRpyCalib( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRpyCalib(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRpyCalib(unsigned int size);
  inline void adoptRpyCalib(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRpyCalib();

  inline bool hasRpyCalibSpread();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRpyCalibSpread();
  inline void setRpyCalibSpread( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRpyCalibSpread(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRpyCalibSpread(unsigned int size);
  inline void adoptRpyCalibSpread(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRpyCalibSpread();

  inline  ::int32_t getValidBlocks();
  inline void setValidBlocks( ::int32_t value);

  inline bool hasWideFromDeviceEuler();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWideFromDeviceEuler();
  inline void setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWideFromDeviceEuler(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWideFromDeviceEuler(unsigned int size);
  inline void adoptWideFromDeviceEuler(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWideFromDeviceEuler();

  inline  ::cereal::LiveCalibrationData::Status getCalStatus();
  inline void setCalStatus( ::cereal::LiveCalibrationData::Status value);

  inline bool hasHeight();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getHeight();
  inline void setHeight( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setHeight(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initHeight(unsigned int size);
  inline void adoptHeight(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownHeight();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveCalibrationData::Pipeline {
public:
  typedef LiveCalibrationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveTracksDEPRECATED::Reader {
public:
  typedef LiveTracksDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getTimeStamp() const;

  inline float getStatus() const;

  inline float getCurrentTime() const;

  inline bool getStationary() const;

  inline bool getOncoming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveTracksDEPRECATED::Builder {
public:
  typedef LiveTracksDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getTimeStamp();
  inline void setTimeStamp(float value);

  inline float getStatus();
  inline void setStatus(float value);

  inline float getCurrentTime();
  inline void setCurrentTime(float value);

  inline bool getStationary();
  inline void setStationary(bool value);

  inline bool getOncoming();
  inline void setOncoming(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveTracksDEPRECATED::Pipeline {
public:
  typedef LiveTracksDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SelfdriveState::Reader {
public:
  typedef SelfdriveState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::SelfdriveState::OpenpilotState getState() const;

  inline bool getEnabled() const;

  inline bool getActive() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline  ::cereal::SelfdriveState::AlertStatus getAlertStatus() const;

  inline  ::cereal::SelfdriveState::AlertSize getAlertSize() const;

  inline bool hasAlertType() const;
  inline  ::capnp::Text::Reader getAlertType() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound() const;

  inline bool getEngageable() const;

  inline bool getExperimentalMode() const;

  inline  ::cereal::LongitudinalPersonality getPersonality() const;

  inline  ::cereal::CarControl::HUDControl::VisualAlert getAlertHudVisual() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SelfdriveState::Builder {
public:
  typedef SelfdriveState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::SelfdriveState::OpenpilotState getState();
  inline void setState( ::cereal::SelfdriveState::OpenpilotState value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getActive();
  inline void setActive(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline  ::cereal::SelfdriveState::AlertStatus getAlertStatus();
  inline void setAlertStatus( ::cereal::SelfdriveState::AlertStatus value);

  inline  ::cereal::SelfdriveState::AlertSize getAlertSize();
  inline void setAlertSize( ::cereal::SelfdriveState::AlertSize value);

  inline bool hasAlertType();
  inline  ::capnp::Text::Builder getAlertType();
  inline void setAlertType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertType(unsigned int size);
  inline void adoptAlertType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertType();

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound();
  inline void setAlertSound( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline bool getEngageable();
  inline void setEngageable(bool value);

  inline bool getExperimentalMode();
  inline void setExperimentalMode(bool value);

  inline  ::cereal::LongitudinalPersonality getPersonality();
  inline void setPersonality( ::cereal::LongitudinalPersonality value);

  inline  ::cereal::CarControl::HUDControl::VisualAlert getAlertHudVisual();
  inline void setAlertHudVisual( ::cereal::CarControl::HUDControl::VisualAlert value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SelfdriveState::Pipeline {
public:
  typedef SelfdriveState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::Reader {
public:
  typedef ControlsState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVEgoDEPRECATED() const;

  inline float getAEgoDEPRECATED() const;

  inline float getVPidDEPRECATED() const;

  inline float getVTargetLeadDEPRECATED() const;

  inline float getUpAccelCmd() const;

  inline float getUiAccelCmd() const;

  inline float getYActualDEPRECATED() const;

  inline float getYDesDEPRECATED() const;

  inline float getUpSteerDEPRECATED() const;

  inline float getUiSteerDEPRECATED() const;

  inline float getATargetMinDEPRECATED() const;

  inline float getATargetMaxDEPRECATED() const;

  inline float getJerkFactorDEPRECATED() const;

  inline float getAngleSteersDEPRECATED() const;

  inline  ::int32_t getHudLeadDEPRECATED() const;

  inline float getCumLagMsDEPRECATED() const;

  inline  ::uint64_t getCanMonoTimeDEPRECATED() const;

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED() const;

  inline  ::uint64_t getMdMonoTimeDEPRECATED() const;

  inline bool getEnabledDEPRECATED() const;

  inline bool getSteerOverrideDEPRECATED() const;

  inline bool hasCanMonoTimesDEPRECATED() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimesDEPRECATED() const;

  inline float getVCruiseDEPRECATED() const;

  inline bool getRearViewCamDEPRECATED() const;

  inline bool hasAlertText1DEPRECATED() const;
  inline  ::capnp::Text::Reader getAlertText1DEPRECATED() const;

  inline bool hasAlertText2DEPRECATED() const;
  inline  ::capnp::Text::Reader getAlertText2DEPRECATED() const;

  inline float getAwarenessStatusDEPRECATED() const;

  inline float getAngleModelBiasDEPRECATED() const;

  inline  ::uint64_t getLongitudinalPlanMonoTime() const;

  inline float getSteeringAngleDesiredDegDEPRECATED() const;

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState() const;

  inline  ::cereal::SelfdriveState::OpenpilotState getStateDEPRECATED() const;

  inline float getVEgoRawDEPRECATED() const;

  inline float getUfAccelCmd() const;

  inline float getUfSteerDEPRECATED() const;

  inline float getATargetDEPRECATED() const;

  inline bool getActiveDEPRECATED() const;

  inline float getCurvature() const;

  inline  ::cereal::SelfdriveState::AlertStatus getAlertStatusDEPRECATED() const;

  inline  ::cereal::SelfdriveState::AlertSize getAlertSizeDEPRECATED() const;

  inline bool getGpsPlannerActiveDEPRECATED() const;

  inline bool getEngageableDEPRECATED() const;

  inline float getAlertBlinkingRateDEPRECATED() const;

  inline bool getDriverMonitoringOnDEPRECATED() const;

  inline bool hasAlertTypeDEPRECATED() const;
  inline  ::capnp::Text::Reader getAlertTypeDEPRECATED() const;

  inline bool hasAlertSoundDEPRECATED() const;
  inline  ::capnp::Text::Reader getAlertSoundDEPRECATED() const;

  inline float getVCurvatureDEPRECATED() const;

  inline bool getDecelForTurnDEPRECATED() const;

  inline  ::uint64_t getStartMonoTimeDEPRECATED() const;

  inline bool getMapValidDEPRECATED() const;

  inline  ::uint64_t getLateralPlanMonoTime() const;

  inline bool getForceDecel() const;

  inline typename LateralControlState::Reader getLateralControlState() const;

  inline bool getDecelForModelDEPRECATED() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound2DEPRECATED() const;

  inline  ::uint32_t getCanErrorCounterDEPRECATED() const;

  inline float getDesiredCurvature() const;

  inline float getDesiredCurvatureRateDEPRECATED() const;

  inline float getVCruiseClusterDEPRECATED() const;

  inline bool getExperimentalModeDEPRECATED() const;

  inline  ::cereal::LongitudinalPersonality getPersonalityDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::Builder {
public:
  typedef ControlsState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVEgoDEPRECATED();
  inline void setVEgoDEPRECATED(float value);

  inline float getAEgoDEPRECATED();
  inline void setAEgoDEPRECATED(float value);

  inline float getVPidDEPRECATED();
  inline void setVPidDEPRECATED(float value);

  inline float getVTargetLeadDEPRECATED();
  inline void setVTargetLeadDEPRECATED(float value);

  inline float getUpAccelCmd();
  inline void setUpAccelCmd(float value);

  inline float getUiAccelCmd();
  inline void setUiAccelCmd(float value);

  inline float getYActualDEPRECATED();
  inline void setYActualDEPRECATED(float value);

  inline float getYDesDEPRECATED();
  inline void setYDesDEPRECATED(float value);

  inline float getUpSteerDEPRECATED();
  inline void setUpSteerDEPRECATED(float value);

  inline float getUiSteerDEPRECATED();
  inline void setUiSteerDEPRECATED(float value);

  inline float getATargetMinDEPRECATED();
  inline void setATargetMinDEPRECATED(float value);

  inline float getATargetMaxDEPRECATED();
  inline void setATargetMaxDEPRECATED(float value);

  inline float getJerkFactorDEPRECATED();
  inline void setJerkFactorDEPRECATED(float value);

  inline float getAngleSteersDEPRECATED();
  inline void setAngleSteersDEPRECATED(float value);

  inline  ::int32_t getHudLeadDEPRECATED();
  inline void setHudLeadDEPRECATED( ::int32_t value);

  inline float getCumLagMsDEPRECATED();
  inline void setCumLagMsDEPRECATED(float value);

  inline  ::uint64_t getCanMonoTimeDEPRECATED();
  inline void setCanMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED();
  inline void setRadarStateMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getMdMonoTimeDEPRECATED();
  inline void setMdMonoTimeDEPRECATED( ::uint64_t value);

  inline bool getEnabledDEPRECATED();
  inline void setEnabledDEPRECATED(bool value);

  inline bool getSteerOverrideDEPRECATED();
  inline void setSteerOverrideDEPRECATED(bool value);

  inline bool hasCanMonoTimesDEPRECATED();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimesDEPRECATED();
  inline void setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimesDEPRECATED(unsigned int size);
  inline void adoptCanMonoTimesDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimesDEPRECATED();

  inline float getVCruiseDEPRECATED();
  inline void setVCruiseDEPRECATED(float value);

  inline bool getRearViewCamDEPRECATED();
  inline void setRearViewCamDEPRECATED(bool value);

  inline bool hasAlertText1DEPRECATED();
  inline  ::capnp::Text::Builder getAlertText1DEPRECATED();
  inline void setAlertText1DEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1DEPRECATED(unsigned int size);
  inline void adoptAlertText1DEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1DEPRECATED();

  inline bool hasAlertText2DEPRECATED();
  inline  ::capnp::Text::Builder getAlertText2DEPRECATED();
  inline void setAlertText2DEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2DEPRECATED(unsigned int size);
  inline void adoptAlertText2DEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2DEPRECATED();

  inline float getAwarenessStatusDEPRECATED();
  inline void setAwarenessStatusDEPRECATED(float value);

  inline float getAngleModelBiasDEPRECATED();
  inline void setAngleModelBiasDEPRECATED(float value);

  inline  ::uint64_t getLongitudinalPlanMonoTime();
  inline void setLongitudinalPlanMonoTime( ::uint64_t value);

  inline float getSteeringAngleDesiredDegDEPRECATED();
  inline void setSteeringAngleDesiredDegDEPRECATED(float value);

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState();
  inline void setLongControlState( ::cereal::CarControl::Actuators::LongControlState value);

  inline  ::cereal::SelfdriveState::OpenpilotState getStateDEPRECATED();
  inline void setStateDEPRECATED( ::cereal::SelfdriveState::OpenpilotState value);

  inline float getVEgoRawDEPRECATED();
  inline void setVEgoRawDEPRECATED(float value);

  inline float getUfAccelCmd();
  inline void setUfAccelCmd(float value);

  inline float getUfSteerDEPRECATED();
  inline void setUfSteerDEPRECATED(float value);

  inline float getATargetDEPRECATED();
  inline void setATargetDEPRECATED(float value);

  inline bool getActiveDEPRECATED();
  inline void setActiveDEPRECATED(bool value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline  ::cereal::SelfdriveState::AlertStatus getAlertStatusDEPRECATED();
  inline void setAlertStatusDEPRECATED( ::cereal::SelfdriveState::AlertStatus value);

  inline  ::cereal::SelfdriveState::AlertSize getAlertSizeDEPRECATED();
  inline void setAlertSizeDEPRECATED( ::cereal::SelfdriveState::AlertSize value);

  inline bool getGpsPlannerActiveDEPRECATED();
  inline void setGpsPlannerActiveDEPRECATED(bool value);

  inline bool getEngageableDEPRECATED();
  inline void setEngageableDEPRECATED(bool value);

  inline float getAlertBlinkingRateDEPRECATED();
  inline void setAlertBlinkingRateDEPRECATED(float value);

  inline bool getDriverMonitoringOnDEPRECATED();
  inline void setDriverMonitoringOnDEPRECATED(bool value);

  inline bool hasAlertTypeDEPRECATED();
  inline  ::capnp::Text::Builder getAlertTypeDEPRECATED();
  inline void setAlertTypeDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertTypeDEPRECATED(unsigned int size);
  inline void adoptAlertTypeDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertTypeDEPRECATED();

  inline bool hasAlertSoundDEPRECATED();
  inline  ::capnp::Text::Builder getAlertSoundDEPRECATED();
  inline void setAlertSoundDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertSoundDEPRECATED(unsigned int size);
  inline void adoptAlertSoundDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertSoundDEPRECATED();

  inline float getVCurvatureDEPRECATED();
  inline void setVCurvatureDEPRECATED(float value);

  inline bool getDecelForTurnDEPRECATED();
  inline void setDecelForTurnDEPRECATED(bool value);

  inline  ::uint64_t getStartMonoTimeDEPRECATED();
  inline void setStartMonoTimeDEPRECATED( ::uint64_t value);

  inline bool getMapValidDEPRECATED();
  inline void setMapValidDEPRECATED(bool value);

  inline  ::uint64_t getLateralPlanMonoTime();
  inline void setLateralPlanMonoTime( ::uint64_t value);

  inline bool getForceDecel();
  inline void setForceDecel(bool value);

  inline typename LateralControlState::Builder getLateralControlState();
  inline typename LateralControlState::Builder initLateralControlState();

  inline bool getDecelForModelDEPRECATED();
  inline void setDecelForModelDEPRECATED(bool value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound2DEPRECATED();
  inline void setAlertSound2DEPRECATED( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline  ::uint32_t getCanErrorCounterDEPRECATED();
  inline void setCanErrorCounterDEPRECATED( ::uint32_t value);

  inline float getDesiredCurvature();
  inline void setDesiredCurvature(float value);

  inline float getDesiredCurvatureRateDEPRECATED();
  inline void setDesiredCurvatureRateDEPRECATED(float value);

  inline float getVCruiseClusterDEPRECATED();
  inline void setVCruiseClusterDEPRECATED(float value);

  inline bool getExperimentalModeDEPRECATED();
  inline void setExperimentalModeDEPRECATED(bool value);

  inline  ::cereal::LongitudinalPersonality getPersonalityDEPRECATED();
  inline void setPersonalityDEPRECATED( ::cereal::LongitudinalPersonality value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::Pipeline {
public:
  typedef ControlsState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename LateralControlState::Pipeline getLateralControlState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralINDIState::Reader {
public:
  typedef LateralINDIState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getSteeringRateDeg() const;

  inline float getSteeringAccelDeg() const;

  inline float getRateSetPoint() const;

  inline float getAccelSetPoint() const;

  inline float getAccelError() const;

  inline float getDelayedOutput() const;

  inline float getDelta() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

  inline float getSteeringRateDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralINDIState::Builder {
public:
  typedef LateralINDIState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getSteeringRateDeg();
  inline void setSteeringRateDeg(float value);

  inline float getSteeringAccelDeg();
  inline void setSteeringAccelDeg(float value);

  inline float getRateSetPoint();
  inline void setRateSetPoint(float value);

  inline float getAccelSetPoint();
  inline void setAccelSetPoint(float value);

  inline float getAccelError();
  inline void setAccelError(float value);

  inline float getDelayedOutput();
  inline void setDelayedOutput(float value);

  inline float getDelta();
  inline void setDelta(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

  inline float getSteeringRateDesiredDeg();
  inline void setSteeringRateDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralINDIState::Pipeline {
public:
  typedef LateralINDIState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralPIDState::Reader {
public:
  typedef LateralPIDState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getSteeringRateDeg() const;

  inline float getAngleError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralPIDState::Builder {
public:
  typedef LateralPIDState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getSteeringRateDeg();
  inline void setSteeringRateDeg(float value);

  inline float getAngleError();
  inline void setAngleError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralPIDState::Pipeline {
public:
  typedef LateralPIDState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralTorqueState::Reader {
public:
  typedef LateralTorqueState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getD() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getErrorRate() const;

  inline float getActualLateralAccel() const;

  inline float getDesiredLateralAccel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralTorqueState::Builder {
public:
  typedef LateralTorqueState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getError();
  inline void setError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getD();
  inline void setD(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getErrorRate();
  inline void setErrorRate(float value);

  inline float getActualLateralAccel();
  inline void setActualLateralAccel(float value);

  inline float getDesiredLateralAccel();
  inline void setDesiredLateralAccel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralTorqueState::Pipeline {
public:
  typedef LateralTorqueState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralLQRState::Reader {
public:
  typedef LateralLQRState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getI() const;

  inline float getOutput() const;

  inline float getLqrOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralLQRState::Builder {
public:
  typedef LateralLQRState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getI();
  inline void setI(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline float getLqrOutput();
  inline void setLqrOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralLQRState::Pipeline {
public:
  typedef LateralLQRState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralAngleState::Reader {
public:
  typedef LateralAngleState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

  inline float getSteeringAngleDesiredDeg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralAngleState::Builder {
public:
  typedef LateralAngleState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

  inline float getSteeringAngleDesiredDeg();
  inline void setSteeringAngleDesiredDeg(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralAngleState::Pipeline {
public:
  typedef LateralAngleState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralCurvatureState::Reader {
public:
  typedef LateralCurvatureState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getActualCurvature() const;

  inline float getDesiredCurvature() const;

  inline float getError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralCurvatureState::Builder {
public:
  typedef LateralCurvatureState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getActualCurvature();
  inline void setActualCurvature(float value);

  inline float getDesiredCurvature();
  inline void setDesiredCurvature(float value);

  inline float getError();
  inline void setError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralCurvatureState::Pipeline {
public:
  typedef LateralCurvatureState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralDebugState::Reader {
public:
  typedef LateralDebugState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteeringAngleDeg() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralDebugState::Builder {
public:
  typedef LateralDebugState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralDebugState::Pipeline {
public:
  typedef LateralDebugState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralControlState::Reader {
public:
  typedef LateralControlState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isIndiStateDEPRECATED() const;
  inline bool hasIndiStateDEPRECATED() const;
  inline  ::cereal::ControlsState::LateralINDIState::Reader getIndiStateDEPRECATED() const;

  inline bool isPidState() const;
  inline bool hasPidState() const;
  inline  ::cereal::ControlsState::LateralPIDState::Reader getPidState() const;

  inline bool isLqrStateDEPRECATED() const;
  inline bool hasLqrStateDEPRECATED() const;
  inline  ::cereal::ControlsState::LateralLQRState::Reader getLqrStateDEPRECATED() const;

  inline bool isAngleState() const;
  inline bool hasAngleState() const;
  inline  ::cereal::ControlsState::LateralAngleState::Reader getAngleState() const;

  inline bool isDebugState() const;
  inline bool hasDebugState() const;
  inline  ::cereal::ControlsState::LateralDebugState::Reader getDebugState() const;

  inline bool isTorqueState() const;
  inline bool hasTorqueState() const;
  inline  ::cereal::ControlsState::LateralTorqueState::Reader getTorqueState() const;

  inline bool isCurvatureStateDEPRECATED() const;
  inline bool hasCurvatureStateDEPRECATED() const;
  inline  ::cereal::ControlsState::LateralCurvatureState::Reader getCurvatureStateDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralControlState::Builder {
public:
  typedef LateralControlState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isIndiStateDEPRECATED();
  inline bool hasIndiStateDEPRECATED();
  inline  ::cereal::ControlsState::LateralINDIState::Builder getIndiStateDEPRECATED();
  inline void setIndiStateDEPRECATED( ::cereal::ControlsState::LateralINDIState::Reader value);
  inline  ::cereal::ControlsState::LateralINDIState::Builder initIndiStateDEPRECATED();
  inline void adoptIndiStateDEPRECATED(::capnp::Orphan< ::cereal::ControlsState::LateralINDIState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState> disownIndiStateDEPRECATED();

  inline bool isPidState();
  inline bool hasPidState();
  inline  ::cereal::ControlsState::LateralPIDState::Builder getPidState();
  inline void setPidState( ::cereal::ControlsState::LateralPIDState::Reader value);
  inline  ::cereal::ControlsState::LateralPIDState::Builder initPidState();
  inline void adoptPidState(::capnp::Orphan< ::cereal::ControlsState::LateralPIDState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState> disownPidState();

  inline bool isLqrStateDEPRECATED();
  inline bool hasLqrStateDEPRECATED();
  inline  ::cereal::ControlsState::LateralLQRState::Builder getLqrStateDEPRECATED();
  inline void setLqrStateDEPRECATED( ::cereal::ControlsState::LateralLQRState::Reader value);
  inline  ::cereal::ControlsState::LateralLQRState::Builder initLqrStateDEPRECATED();
  inline void adoptLqrStateDEPRECATED(::capnp::Orphan< ::cereal::ControlsState::LateralLQRState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState> disownLqrStateDEPRECATED();

  inline bool isAngleState();
  inline bool hasAngleState();
  inline  ::cereal::ControlsState::LateralAngleState::Builder getAngleState();
  inline void setAngleState( ::cereal::ControlsState::LateralAngleState::Reader value);
  inline  ::cereal::ControlsState::LateralAngleState::Builder initAngleState();
  inline void adoptAngleState(::capnp::Orphan< ::cereal::ControlsState::LateralAngleState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralAngleState> disownAngleState();

  inline bool isDebugState();
  inline bool hasDebugState();
  inline  ::cereal::ControlsState::LateralDebugState::Builder getDebugState();
  inline void setDebugState( ::cereal::ControlsState::LateralDebugState::Reader value);
  inline  ::cereal::ControlsState::LateralDebugState::Builder initDebugState();
  inline void adoptDebugState(::capnp::Orphan< ::cereal::ControlsState::LateralDebugState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralDebugState> disownDebugState();

  inline bool isTorqueState();
  inline bool hasTorqueState();
  inline  ::cereal::ControlsState::LateralTorqueState::Builder getTorqueState();
  inline void setTorqueState( ::cereal::ControlsState::LateralTorqueState::Reader value);
  inline  ::cereal::ControlsState::LateralTorqueState::Builder initTorqueState();
  inline void adoptTorqueState(::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState> disownTorqueState();

  inline bool isCurvatureStateDEPRECATED();
  inline bool hasCurvatureStateDEPRECATED();
  inline  ::cereal::ControlsState::LateralCurvatureState::Builder getCurvatureStateDEPRECATED();
  inline void setCurvatureStateDEPRECATED( ::cereal::ControlsState::LateralCurvatureState::Reader value);
  inline  ::cereal::ControlsState::LateralCurvatureState::Builder initCurvatureStateDEPRECATED();
  inline void adoptCurvatureStateDEPRECATED(::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState> disownCurvatureStateDEPRECATED();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralControlState::Pipeline {
public:
  typedef LateralControlState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingModelData::Reader {
public:
  typedef DrivingModelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getFrameIdExtra() const;

  inline bool hasAction() const;
  inline  ::cereal::ModelDataV2::Action::Reader getAction() const;

  inline bool hasLaneLineMeta() const;
  inline  ::cereal::DrivingModelData::LaneLineMeta::Reader getLaneLineMeta() const;

  inline bool hasMeta() const;
  inline  ::cereal::DrivingModelData::MetaData::Reader getMeta() const;

  inline bool hasPath() const;
  inline  ::cereal::DrivingModelData::PolyPath::Reader getPath() const;

  inline float getFrameDropPerc() const;

  inline float getModelExecutionTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingModelData::Builder {
public:
  typedef DrivingModelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getFrameIdExtra();
  inline void setFrameIdExtra( ::uint32_t value);

  inline bool hasAction();
  inline  ::cereal::ModelDataV2::Action::Builder getAction();
  inline void setAction( ::cereal::ModelDataV2::Action::Reader value);
  inline  ::cereal::ModelDataV2::Action::Builder initAction();
  inline void adoptAction(::capnp::Orphan< ::cereal::ModelDataV2::Action>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::Action> disownAction();

  inline bool hasLaneLineMeta();
  inline  ::cereal::DrivingModelData::LaneLineMeta::Builder getLaneLineMeta();
  inline void setLaneLineMeta( ::cereal::DrivingModelData::LaneLineMeta::Reader value);
  inline  ::cereal::DrivingModelData::LaneLineMeta::Builder initLaneLineMeta();
  inline void adoptLaneLineMeta(::capnp::Orphan< ::cereal::DrivingModelData::LaneLineMeta>&& value);
  inline ::capnp::Orphan< ::cereal::DrivingModelData::LaneLineMeta> disownLaneLineMeta();

  inline bool hasMeta();
  inline  ::cereal::DrivingModelData::MetaData::Builder getMeta();
  inline void setMeta( ::cereal::DrivingModelData::MetaData::Reader value);
  inline  ::cereal::DrivingModelData::MetaData::Builder initMeta();
  inline void adoptMeta(::capnp::Orphan< ::cereal::DrivingModelData::MetaData>&& value);
  inline ::capnp::Orphan< ::cereal::DrivingModelData::MetaData> disownMeta();

  inline bool hasPath();
  inline  ::cereal::DrivingModelData::PolyPath::Builder getPath();
  inline void setPath( ::cereal::DrivingModelData::PolyPath::Reader value);
  inline  ::cereal::DrivingModelData::PolyPath::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::cereal::DrivingModelData::PolyPath>&& value);
  inline ::capnp::Orphan< ::cereal::DrivingModelData::PolyPath> disownPath();

  inline float getFrameDropPerc();
  inline void setFrameDropPerc(float value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingModelData::Pipeline {
public:
  typedef DrivingModelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelDataV2::Action::Pipeline getAction();
  inline  ::cereal::DrivingModelData::LaneLineMeta::Pipeline getLaneLineMeta();
  inline  ::cereal::DrivingModelData::MetaData::Pipeline getMeta();
  inline  ::cereal::DrivingModelData::PolyPath::Pipeline getPath();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingModelData::PolyPath::Reader {
public:
  typedef PolyPath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasXCoefficients() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXCoefficients() const;

  inline bool hasYCoefficients() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYCoefficients() const;

  inline bool hasZCoefficients() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getZCoefficients() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingModelData::PolyPath::Builder {
public:
  typedef PolyPath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasXCoefficients();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXCoefficients();
  inline void setXCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXCoefficients(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXCoefficients(unsigned int size);
  inline void adoptXCoefficients(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXCoefficients();

  inline bool hasYCoefficients();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYCoefficients();
  inline void setYCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYCoefficients(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYCoefficients(unsigned int size);
  inline void adoptYCoefficients(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYCoefficients();

  inline bool hasZCoefficients();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getZCoefficients();
  inline void setZCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setZCoefficients(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initZCoefficients(unsigned int size);
  inline void adoptZCoefficients(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownZCoefficients();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingModelData::PolyPath::Pipeline {
public:
  typedef PolyPath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingModelData::LaneLineMeta::Reader {
public:
  typedef LaneLineMeta Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLeftY() const;

  inline float getRightY() const;

  inline float getLeftProb() const;

  inline float getRightProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingModelData::LaneLineMeta::Builder {
public:
  typedef LaneLineMeta Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLeftY();
  inline void setLeftY(float value);

  inline float getRightY();
  inline void setRightY(float value);

  inline float getLeftProb();
  inline void setLeftProb(float value);

  inline float getRightProb();
  inline void setRightProb(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingModelData::LaneLineMeta::Pipeline {
public:
  typedef LaneLineMeta Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingModelData::MetaData::Reader {
public:
  typedef MetaData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::LaneChangeState getLaneChangeState() const;

  inline  ::cereal::LaneChangeDirection getLaneChangeDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingModelData::MetaData::Builder {
public:
  typedef MetaData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::LaneChangeState getLaneChangeState();
  inline void setLaneChangeState( ::cereal::LaneChangeState value);

  inline  ::cereal::LaneChangeDirection getLaneChangeDirection();
  inline void setLaneChangeDirection( ::cereal::LaneChangeDirection value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingModelData::MetaData::Pipeline {
public:
  typedef MetaData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class XYZTData::Reader {
public:
  typedef XYZTData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasZ() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getZ() const;

  inline bool hasT() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getT() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

  inline bool hasZStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getZStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class XYZTData::Builder {
public:
  typedef XYZTData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasZ();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getZ();
  inline void setZ( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setZ(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initZ(unsigned int size);
  inline void adoptZ(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownZ();

  inline bool hasT();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getT();
  inline void setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setT(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownT();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

  inline bool hasZStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getZStd();
  inline void setZStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setZStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initZStd(unsigned int size);
  inline void adoptZStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownZStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class XYZTData::Pipeline {
public:
  typedef XYZTData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::Reader {
public:
  typedef ModelDataV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getFrameAge() const;

  inline float getFrameDropPerc() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasPosition() const;
  inline  ::cereal::XYZTData::Reader getPosition() const;

  inline bool hasOrientation() const;
  inline  ::cereal::XYZTData::Reader getOrientation() const;

  inline bool hasVelocity() const;
  inline  ::cereal::XYZTData::Reader getVelocity() const;

  inline bool hasOrientationRate() const;
  inline  ::cereal::XYZTData::Reader getOrientationRate() const;

  inline bool hasLaneLines() const;
  inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader getLaneLines() const;

  inline bool hasLaneLineProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLaneLineProbs() const;

  inline bool hasRoadEdges() const;
  inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader getRoadEdges() const;

  inline bool hasLeads() const;
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader getLeads() const;

  inline bool hasMeta() const;
  inline  ::cereal::ModelDataV2::MetaData::Reader getMeta() const;

  inline bool hasLaneLineStds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLaneLineStds() const;

  inline bool hasRoadEdgeStds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadEdgeStds() const;

  inline float getModelExecutionTime() const;

  inline bool hasRawPredictions() const;
  inline  ::capnp::Data::Reader getRawPredictions() const;

  inline float getGpuExecutionTimeDEPRECATED() const;

  inline bool hasLeadsV3() const;
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader getLeadsV3() const;

  inline bool hasAcceleration() const;
  inline  ::cereal::XYZTData::Reader getAcceleration() const;

  inline  ::uint32_t getFrameIdExtra() const;

  inline bool hasTemporalPoseDEPRECATED() const;
  inline  ::cereal::ModelDataV2::Pose::Reader getTemporalPoseDEPRECATED() const;

  inline bool getNavEnabledDEPRECATED() const;

  inline  ::cereal::ModelDataV2::ConfidenceClass getConfidence() const;

  inline  ::uint64_t getLocationMonoTimeDEPRECATED() const;

  inline bool hasLateralPlannerSolutionDEPRECATED() const;
  inline  ::cereal::ModelDataV2::LateralPlannerSolution::Reader getLateralPlannerSolutionDEPRECATED() const;

  inline bool hasAction() const;
  inline  ::cereal::ModelDataV2::Action::Reader getAction() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::Builder {
public:
  typedef ModelDataV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getFrameAge();
  inline void setFrameAge( ::uint32_t value);

  inline float getFrameDropPerc();
  inline void setFrameDropPerc(float value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasPosition();
  inline  ::cereal::XYZTData::Builder getPosition();
  inline void setPosition( ::cereal::XYZTData::Reader value);
  inline  ::cereal::XYZTData::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::cereal::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::XYZTData> disownPosition();

  inline bool hasOrientation();
  inline  ::cereal::XYZTData::Builder getOrientation();
  inline void setOrientation( ::cereal::XYZTData::Reader value);
  inline  ::cereal::XYZTData::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::cereal::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::XYZTData> disownOrientation();

  inline bool hasVelocity();
  inline  ::cereal::XYZTData::Builder getVelocity();
  inline void setVelocity( ::cereal::XYZTData::Reader value);
  inline  ::cereal::XYZTData::Builder initVelocity();
  inline void adoptVelocity(::capnp::Orphan< ::cereal::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::XYZTData> disownVelocity();

  inline bool hasOrientationRate();
  inline  ::cereal::XYZTData::Builder getOrientationRate();
  inline void setOrientationRate( ::cereal::XYZTData::Reader value);
  inline  ::cereal::XYZTData::Builder initOrientationRate();
  inline void adoptOrientationRate(::capnp::Orphan< ::cereal::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::XYZTData> disownOrientationRate();

  inline bool hasLaneLines();
  inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder getLaneLines();
  inline void setLaneLines( ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder initLaneLines(unsigned int size);
  inline void adoptLaneLines(::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>> disownLaneLines();

  inline bool hasLaneLineProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLaneLineProbs();
  inline void setLaneLineProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneLineProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLaneLineProbs(unsigned int size);
  inline void adoptLaneLineProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLaneLineProbs();

  inline bool hasRoadEdges();
  inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder getRoadEdges();
  inline void setRoadEdges( ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder initRoadEdges(unsigned int size);
  inline void adoptRoadEdges(::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>> disownRoadEdges();

  inline bool hasLeads();
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder getLeads();
  inline void setLeads( ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder initLeads(unsigned int size);
  inline void adoptLeads(::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>> disownLeads();

  inline bool hasMeta();
  inline  ::cereal::ModelDataV2::MetaData::Builder getMeta();
  inline void setMeta( ::cereal::ModelDataV2::MetaData::Reader value);
  inline  ::cereal::ModelDataV2::MetaData::Builder initMeta();
  inline void adoptMeta(::capnp::Orphan< ::cereal::ModelDataV2::MetaData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::MetaData> disownMeta();

  inline bool hasLaneLineStds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLaneLineStds();
  inline void setLaneLineStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneLineStds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLaneLineStds(unsigned int size);
  inline void adoptLaneLineStds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLaneLineStds();

  inline bool hasRoadEdgeStds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadEdgeStds();
  inline void setRoadEdgeStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadEdgeStds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadEdgeStds(unsigned int size);
  inline void adoptRoadEdgeStds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadEdgeStds();

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline bool hasRawPredictions();
  inline  ::capnp::Data::Builder getRawPredictions();
  inline void setRawPredictions( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawPredictions(unsigned int size);
  inline void adoptRawPredictions(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawPredictions();

  inline float getGpuExecutionTimeDEPRECATED();
  inline void setGpuExecutionTimeDEPRECATED(float value);

  inline bool hasLeadsV3();
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder getLeadsV3();
  inline void setLeadsV3( ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder initLeadsV3(unsigned int size);
  inline void adoptLeadsV3(::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>> disownLeadsV3();

  inline bool hasAcceleration();
  inline  ::cereal::XYZTData::Builder getAcceleration();
  inline void setAcceleration( ::cereal::XYZTData::Reader value);
  inline  ::cereal::XYZTData::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::cereal::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::XYZTData> disownAcceleration();

  inline  ::uint32_t getFrameIdExtra();
  inline void setFrameIdExtra( ::uint32_t value);

  inline bool hasTemporalPoseDEPRECATED();
  inline  ::cereal::ModelDataV2::Pose::Builder getTemporalPoseDEPRECATED();
  inline void setTemporalPoseDEPRECATED( ::cereal::ModelDataV2::Pose::Reader value);
  inline  ::cereal::ModelDataV2::Pose::Builder initTemporalPoseDEPRECATED();
  inline void adoptTemporalPoseDEPRECATED(::capnp::Orphan< ::cereal::ModelDataV2::Pose>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::Pose> disownTemporalPoseDEPRECATED();

  inline bool getNavEnabledDEPRECATED();
  inline void setNavEnabledDEPRECATED(bool value);

  inline  ::cereal::ModelDataV2::ConfidenceClass getConfidence();
  inline void setConfidence( ::cereal::ModelDataV2::ConfidenceClass value);

  inline  ::uint64_t getLocationMonoTimeDEPRECATED();
  inline void setLocationMonoTimeDEPRECATED( ::uint64_t value);

  inline bool hasLateralPlannerSolutionDEPRECATED();
  inline  ::cereal::ModelDataV2::LateralPlannerSolution::Builder getLateralPlannerSolutionDEPRECATED();
  inline void setLateralPlannerSolutionDEPRECATED( ::cereal::ModelDataV2::LateralPlannerSolution::Reader value);
  inline  ::cereal::ModelDataV2::LateralPlannerSolution::Builder initLateralPlannerSolutionDEPRECATED();
  inline void adoptLateralPlannerSolutionDEPRECATED(::capnp::Orphan< ::cereal::ModelDataV2::LateralPlannerSolution>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::LateralPlannerSolution> disownLateralPlannerSolutionDEPRECATED();

  inline bool hasAction();
  inline  ::cereal::ModelDataV2::Action::Builder getAction();
  inline void setAction( ::cereal::ModelDataV2::Action::Reader value);
  inline  ::cereal::ModelDataV2::Action::Builder initAction();
  inline void adoptAction(::capnp::Orphan< ::cereal::ModelDataV2::Action>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::Action> disownAction();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::Pipeline {
public:
  typedef ModelDataV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::XYZTData::Pipeline getPosition();
  inline  ::cereal::XYZTData::Pipeline getOrientation();
  inline  ::cereal::XYZTData::Pipeline getVelocity();
  inline  ::cereal::XYZTData::Pipeline getOrientationRate();
  inline  ::cereal::ModelDataV2::MetaData::Pipeline getMeta();
  inline  ::cereal::XYZTData::Pipeline getAcceleration();
  inline  ::cereal::ModelDataV2::Pose::Pipeline getTemporalPoseDEPRECATED();
  inline  ::cereal::ModelDataV2::LateralPlannerSolution::Pipeline getLateralPlannerSolutionDEPRECATED();
  inline  ::cereal::ModelDataV2::Action::Pipeline getAction();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::LeadDataV2::Reader {
public:
  typedef LeadDataV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getProb() const;

  inline float getT() const;

  inline bool hasXyva() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXyva() const;

  inline bool hasXyvaStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXyvaStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::LeadDataV2::Builder {
public:
  typedef LeadDataV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getProb();
  inline void setProb(float value);

  inline float getT();
  inline void setT(float value);

  inline bool hasXyva();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXyva();
  inline void setXyva( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXyva(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXyva(unsigned int size);
  inline void adoptXyva(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXyva();

  inline bool hasXyvaStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXyvaStd();
  inline void setXyvaStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXyvaStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXyvaStd(unsigned int size);
  inline void adoptXyvaStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXyvaStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::LeadDataV2::Pipeline {
public:
  typedef LeadDataV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::LeadDataV3::Reader {
public:
  typedef LeadDataV3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getProb() const;

  inline float getProbTime() const;

  inline bool hasT() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getT() const;

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

  inline bool hasV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getV() const;

  inline bool hasVStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVStd() const;

  inline bool hasA() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getA() const;

  inline bool hasAStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::LeadDataV3::Builder {
public:
  typedef LeadDataV3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getProb();
  inline void setProb(float value);

  inline float getProbTime();
  inline void setProbTime(float value);

  inline bool hasT();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getT();
  inline void setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setT(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownT();

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

  inline bool hasV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getV();
  inline void setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownV();

  inline bool hasVStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVStd();
  inline void setVStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVStd(unsigned int size);
  inline void adoptVStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVStd();

  inline bool hasA();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getA();
  inline void setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setA(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownA();

  inline bool hasAStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAStd();
  inline void setAStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAStd(unsigned int size);
  inline void adoptAStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::LeadDataV3::Pipeline {
public:
  typedef LeadDataV3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::MetaData::Reader {
public:
  typedef MetaData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getEngagedProb() const;

  inline bool hasDesirePrediction() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesirePrediction() const;

  inline float getBrakeDisengageProbDEPRECATED() const;

  inline float getGasDisengageProbDEPRECATED() const;

  inline float getSteerOverrideProbDEPRECATED() const;

  inline bool hasDesireState() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesireState() const;

  inline bool hasDisengagePredictions() const;
  inline  ::cereal::ModelDataV2::DisengagePredictions::Reader getDisengagePredictions() const;

  inline bool getHardBrakePredicted() const;

  inline  ::cereal::LaneChangeState getLaneChangeState() const;

  inline  ::cereal::LaneChangeDirection getLaneChangeDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::MetaData::Builder {
public:
  typedef MetaData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getEngagedProb();
  inline void setEngagedProb(float value);

  inline bool hasDesirePrediction();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesirePrediction();
  inline void setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesirePrediction(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesirePrediction(unsigned int size);
  inline void adoptDesirePrediction(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesirePrediction();

  inline float getBrakeDisengageProbDEPRECATED();
  inline void setBrakeDisengageProbDEPRECATED(float value);

  inline float getGasDisengageProbDEPRECATED();
  inline void setGasDisengageProbDEPRECATED(float value);

  inline float getSteerOverrideProbDEPRECATED();
  inline void setSteerOverrideProbDEPRECATED(float value);

  inline bool hasDesireState();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesireState();
  inline void setDesireState( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesireState(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesireState(unsigned int size);
  inline void adoptDesireState(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesireState();

  inline bool hasDisengagePredictions();
  inline  ::cereal::ModelDataV2::DisengagePredictions::Builder getDisengagePredictions();
  inline void setDisengagePredictions( ::cereal::ModelDataV2::DisengagePredictions::Reader value);
  inline  ::cereal::ModelDataV2::DisengagePredictions::Builder initDisengagePredictions();
  inline void adoptDisengagePredictions(::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions> disownDisengagePredictions();

  inline bool getHardBrakePredicted();
  inline void setHardBrakePredicted(bool value);

  inline  ::cereal::LaneChangeState getLaneChangeState();
  inline void setLaneChangeState( ::cereal::LaneChangeState value);

  inline  ::cereal::LaneChangeDirection getLaneChangeDirection();
  inline void setLaneChangeDirection( ::cereal::LaneChangeDirection value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::MetaData::Pipeline {
public:
  typedef MetaData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelDataV2::DisengagePredictions::Pipeline getDisengagePredictions();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::DisengagePredictions::Reader {
public:
  typedef DisengagePredictions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasT() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getT() const;

  inline bool hasBrakeDisengageProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakeDisengageProbs() const;

  inline bool hasGasDisengageProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasDisengageProbs() const;

  inline bool hasSteerOverrideProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteerOverrideProbs() const;

  inline bool hasBrake3MetersPerSecondSquaredProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrake3MetersPerSecondSquaredProbs() const;

  inline bool hasBrake4MetersPerSecondSquaredProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrake4MetersPerSecondSquaredProbs() const;

  inline bool hasBrake5MetersPerSecondSquaredProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrake5MetersPerSecondSquaredProbs() const;

  inline bool hasGasPressProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasPressProbs() const;

  inline bool hasBrakePressProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakePressProbs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::DisengagePredictions::Builder {
public:
  typedef DisengagePredictions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasT();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getT();
  inline void setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setT(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownT();

  inline bool hasBrakeDisengageProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakeDisengageProbs();
  inline void setBrakeDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakeDisengageProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakeDisengageProbs(unsigned int size);
  inline void adoptBrakeDisengageProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakeDisengageProbs();

  inline bool hasGasDisengageProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasDisengageProbs();
  inline void setGasDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasDisengageProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasDisengageProbs(unsigned int size);
  inline void adoptGasDisengageProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasDisengageProbs();

  inline bool hasSteerOverrideProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteerOverrideProbs();
  inline void setSteerOverrideProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteerOverrideProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteerOverrideProbs(unsigned int size);
  inline void adoptSteerOverrideProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteerOverrideProbs();

  inline bool hasBrake3MetersPerSecondSquaredProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrake3MetersPerSecondSquaredProbs();
  inline void setBrake3MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrake3MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrake3MetersPerSecondSquaredProbs(unsigned int size);
  inline void adoptBrake3MetersPerSecondSquaredProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrake3MetersPerSecondSquaredProbs();

  inline bool hasBrake4MetersPerSecondSquaredProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrake4MetersPerSecondSquaredProbs();
  inline void setBrake4MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrake4MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrake4MetersPerSecondSquaredProbs(unsigned int size);
  inline void adoptBrake4MetersPerSecondSquaredProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrake4MetersPerSecondSquaredProbs();

  inline bool hasBrake5MetersPerSecondSquaredProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrake5MetersPerSecondSquaredProbs();
  inline void setBrake5MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrake5MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrake5MetersPerSecondSquaredProbs(unsigned int size);
  inline void adoptBrake5MetersPerSecondSquaredProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrake5MetersPerSecondSquaredProbs();

  inline bool hasGasPressProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasPressProbs();
  inline void setGasPressProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasPressProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasPressProbs(unsigned int size);
  inline void adoptGasPressProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasPressProbs();

  inline bool hasBrakePressProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakePressProbs();
  inline void setBrakePressProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakePressProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakePressProbs(unsigned int size);
  inline void adoptBrakePressProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakePressProbs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::DisengagePredictions::Pipeline {
public:
  typedef DisengagePredictions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::Pose::Reader {
public:
  typedef Pose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRotStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::Pose::Builder {
public:
  typedef Pose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTrans();
  inline void setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRot();
  inline void setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRotStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::Pose::Pipeline {
public:
  typedef Pose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::LateralPlannerSolution::Reader {
public:
  typedef LateralPlannerSolution Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasYaw() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYaw() const;

  inline bool hasYawRate() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYawRate() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

  inline bool hasYawStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYawStd() const;

  inline bool hasYawRateStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYawRateStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::LateralPlannerSolution::Builder {
public:
  typedef LateralPlannerSolution Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasYaw();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYaw();
  inline void setYaw( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYaw(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYaw(unsigned int size);
  inline void adoptYaw(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYaw();

  inline bool hasYawRate();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYawRate();
  inline void setYawRate( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYawRate(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYawRate(unsigned int size);
  inline void adoptYawRate(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYawRate();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

  inline bool hasYawStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYawStd();
  inline void setYawStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYawStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYawStd(unsigned int size);
  inline void adoptYawStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYawStd();

  inline bool hasYawRateStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYawRateStd();
  inline void setYawRateStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYawRateStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYawRateStd(unsigned int size);
  inline void adoptYawRateStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYawRateStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::LateralPlannerSolution::Pipeline {
public:
  typedef LateralPlannerSolution Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2::Action::Reader {
public:
  typedef Action Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDesiredCurvature() const;

  inline float getDesiredAcceleration() const;

  inline bool getShouldStop() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2::Action::Builder {
public:
  typedef Action Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDesiredCurvature();
  inline void setDesiredCurvature(float value);

  inline float getDesiredAcceleration();
  inline void setDesiredAcceleration(float value);

  inline bool getShouldStop();
  inline void setShouldStop(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2::Action::Pipeline {
public:
  typedef Action Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EncodeIndex::Reader {
public:
  typedef EncodeIndex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::cereal::EncodeIndex::Type getType() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::int32_t getSegmentNum() const;

  inline  ::uint32_t getSegmentId() const;

  inline  ::uint32_t getSegmentIdEncode() const;

  inline  ::uint64_t getTimestampSof() const;

  inline  ::uint64_t getTimestampEof() const;

  inline  ::uint32_t getFlags() const;

  inline  ::uint32_t getLen() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EncodeIndex::Builder {
public:
  typedef EncodeIndex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::cereal::EncodeIndex::Type getType();
  inline void setType( ::cereal::EncodeIndex::Type value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::int32_t getSegmentNum();
  inline void setSegmentNum( ::int32_t value);

  inline  ::uint32_t getSegmentId();
  inline void setSegmentId( ::uint32_t value);

  inline  ::uint32_t getSegmentIdEncode();
  inline void setSegmentIdEncode( ::uint32_t value);

  inline  ::uint64_t getTimestampSof();
  inline void setTimestampSof( ::uint64_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::uint32_t getLen();
  inline void setLen( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EncodeIndex::Pipeline {
public:
  typedef EncodeIndex Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidLogEntry::Reader {
public:
  typedef AndroidLogEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId() const;

  inline  ::uint64_t getTs() const;

  inline  ::uint8_t getPriority() const;

  inline  ::int32_t getPid() const;

  inline  ::int32_t getTid() const;

  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidLogEntry::Builder {
public:
  typedef AndroidLogEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId();
  inline void setId( ::uint8_t value);

  inline  ::uint64_t getTs();
  inline void setTs( ::uint64_t value);

  inline  ::uint8_t getPriority();
  inline void setPriority( ::uint8_t value);

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline  ::int32_t getTid();
  inline void setTid( ::int32_t value);

  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidLogEntry::Pipeline {
public:
  typedef AndroidLogEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverAssistance::Reader {
public:
  typedef DriverAssistance Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLeftLaneDeparture() const;

  inline bool getRightLaneDeparture() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverAssistance::Builder {
public:
  typedef DriverAssistance Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLeftLaneDeparture();
  inline void setLeftLaneDeparture(bool value);

  inline bool getRightLaneDeparture();
  inline void setRightLaneDeparture(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverAssistance::Pipeline {
public:
  typedef DriverAssistance Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlan::Reader {
public:
  typedef LongitudinalPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLateralValidDEPRECATED() const;

  inline bool hasDPolyDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDPolyDEPRECATED() const;

  inline bool getLongitudinalValidDEPRECATED() const;

  inline float getVTargetDEPRECATED() const;

  inline float getATargetMinDEPRECATED() const;

  inline float getATargetMaxDEPRECATED() const;

  inline float getJerkFactorDEPRECATED() const;

  inline bool getHasLead() const;

  inline bool getFcw() const;

  inline  ::uint64_t getModelMonoTime() const;

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED() const;

  inline float getLaneWidthDEPRECATED() const;

  inline bool hasGpsTrajectoryDEPRECATED() const;
  inline  ::cereal::LongitudinalPlan::GpsTrajectory::Reader getGpsTrajectoryDEPRECATED() const;

  inline bool hasEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getEventsDEPRECATED() const;

  inline float getVTargetFutureDEPRECATED() const;

  inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource getLongitudinalPlanSource() const;

  inline float getVCruiseDEPRECATED() const;

  inline float getACruiseDEPRECATED() const;

  inline float getATarget() const;

  inline bool getGpsPlannerActiveDEPRECATED() const;

  inline float getVMaxDEPRECATED() const;

  inline float getVCurvatureDEPRECATED() const;

  inline bool getDecelForTurnDEPRECATED() const;

  inline bool getHasLeftLaneDEPRECATED() const;

  inline bool getHasRightLaneDEPRECATED() const;

  inline bool getMapValidDEPRECATED() const;

  inline float getVStartDEPRECATED() const;

  inline float getAStartDEPRECATED() const;

  inline bool getRadarValidDEPRECATED() const;

  inline float getProcessingDelay() const;

  inline bool getRadarCanErrorDEPRECATED() const;

  inline bool getCommIssueDEPRECATED() const;

  inline bool hasAccels() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAccels() const;

  inline bool hasSpeeds() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSpeeds() const;

  inline bool hasJerks() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getJerks() const;

  inline float getSolverExecutionTime() const;

  inline  ::cereal::LongitudinalPersonality getPersonalityDEPRECATED() const;

  inline bool getShouldStop() const;

  inline bool getAllowThrottle() const;

  inline bool getAllowBrake() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlan::Builder {
public:
  typedef LongitudinalPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLateralValidDEPRECATED();
  inline void setLateralValidDEPRECATED(bool value);

  inline bool hasDPolyDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDPolyDEPRECATED();
  inline void setDPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDPolyDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDPolyDEPRECATED(unsigned int size);
  inline void adoptDPolyDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDPolyDEPRECATED();

  inline bool getLongitudinalValidDEPRECATED();
  inline void setLongitudinalValidDEPRECATED(bool value);

  inline float getVTargetDEPRECATED();
  inline void setVTargetDEPRECATED(float value);

  inline float getATargetMinDEPRECATED();
  inline void setATargetMinDEPRECATED(float value);

  inline float getATargetMaxDEPRECATED();
  inline void setATargetMaxDEPRECATED(float value);

  inline float getJerkFactorDEPRECATED();
  inline void setJerkFactorDEPRECATED(float value);

  inline bool getHasLead();
  inline void setHasLead(bool value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline  ::uint64_t getModelMonoTime();
  inline void setModelMonoTime( ::uint64_t value);

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED();
  inline void setRadarStateMonoTimeDEPRECATED( ::uint64_t value);

  inline float getLaneWidthDEPRECATED();
  inline void setLaneWidthDEPRECATED(float value);

  inline bool hasGpsTrajectoryDEPRECATED();
  inline  ::cereal::LongitudinalPlan::GpsTrajectory::Builder getGpsTrajectoryDEPRECATED();
  inline void setGpsTrajectoryDEPRECATED( ::cereal::LongitudinalPlan::GpsTrajectory::Reader value);
  inline  ::cereal::LongitudinalPlan::GpsTrajectory::Builder initGpsTrajectoryDEPRECATED();
  inline void adoptGpsTrajectoryDEPRECATED(::capnp::Orphan< ::cereal::LongitudinalPlan::GpsTrajectory>&& value);
  inline ::capnp::Orphan< ::cereal::LongitudinalPlan::GpsTrajectory> disownGpsTrajectoryDEPRECATED();

  inline bool hasEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getEventsDEPRECATED();
  inline void setEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initEventsDEPRECATED(unsigned int size);
  inline void adoptEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> disownEventsDEPRECATED();

  inline float getVTargetFutureDEPRECATED();
  inline void setVTargetFutureDEPRECATED(float value);

  inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource getLongitudinalPlanSource();
  inline void setLongitudinalPlanSource( ::cereal::LongitudinalPlan::LongitudinalPlanSource value);

  inline float getVCruiseDEPRECATED();
  inline void setVCruiseDEPRECATED(float value);

  inline float getACruiseDEPRECATED();
  inline void setACruiseDEPRECATED(float value);

  inline float getATarget();
  inline void setATarget(float value);

  inline bool getGpsPlannerActiveDEPRECATED();
  inline void setGpsPlannerActiveDEPRECATED(bool value);

  inline float getVMaxDEPRECATED();
  inline void setVMaxDEPRECATED(float value);

  inline float getVCurvatureDEPRECATED();
  inline void setVCurvatureDEPRECATED(float value);

  inline bool getDecelForTurnDEPRECATED();
  inline void setDecelForTurnDEPRECATED(bool value);

  inline bool getHasLeftLaneDEPRECATED();
  inline void setHasLeftLaneDEPRECATED(bool value);

  inline bool getHasRightLaneDEPRECATED();
  inline void setHasRightLaneDEPRECATED(bool value);

  inline bool getMapValidDEPRECATED();
  inline void setMapValidDEPRECATED(bool value);

  inline float getVStartDEPRECATED();
  inline void setVStartDEPRECATED(float value);

  inline float getAStartDEPRECATED();
  inline void setAStartDEPRECATED(float value);

  inline bool getRadarValidDEPRECATED();
  inline void setRadarValidDEPRECATED(bool value);

  inline float getProcessingDelay();
  inline void setProcessingDelay(float value);

  inline bool getRadarCanErrorDEPRECATED();
  inline void setRadarCanErrorDEPRECATED(bool value);

  inline bool getCommIssueDEPRECATED();
  inline void setCommIssueDEPRECATED(bool value);

  inline bool hasAccels();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAccels();
  inline void setAccels( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAccels(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAccels(unsigned int size);
  inline void adoptAccels(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAccels();

  inline bool hasSpeeds();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSpeeds();
  inline void setSpeeds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpeeds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSpeeds(unsigned int size);
  inline void adoptSpeeds(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSpeeds();

  inline bool hasJerks();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getJerks();
  inline void setJerks( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setJerks(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initJerks(unsigned int size);
  inline void adoptJerks(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownJerks();

  inline float getSolverExecutionTime();
  inline void setSolverExecutionTime(float value);

  inline  ::cereal::LongitudinalPersonality getPersonalityDEPRECATED();
  inline void setPersonalityDEPRECATED( ::cereal::LongitudinalPersonality value);

  inline bool getShouldStop();
  inline void setShouldStop(bool value);

  inline bool getAllowThrottle();
  inline void setAllowThrottle(bool value);

  inline bool getAllowBrake();
  inline void setAllowBrake(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlan::Pipeline {
public:
  typedef LongitudinalPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LongitudinalPlan::GpsTrajectory::Pipeline getGpsTrajectoryDEPRECATED();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlan::GpsTrajectory::Reader {
public:
  typedef GpsTrajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlan::GpsTrajectory::Builder {
public:
  typedef GpsTrajectory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlan::GpsTrajectory::Pipeline {
public:
  typedef GpsTrajectory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiPlan::Reader {
public:
  typedef UiPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::cereal::XYZTData::Reader getPosition() const;

  inline bool hasAccel() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAccel() const;

  inline  ::uint32_t getFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiPlan::Builder {
public:
  typedef UiPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::cereal::XYZTData::Builder getPosition();
  inline void setPosition( ::cereal::XYZTData::Reader value);
  inline  ::cereal::XYZTData::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::cereal::XYZTData>&& value);
  inline ::capnp::Orphan< ::cereal::XYZTData> disownPosition();

  inline bool hasAccel();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAccel();
  inline void setAccel( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAccel(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAccel(unsigned int size);
  inline void adoptAccel(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAccel();

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiPlan::Pipeline {
public:
  typedef UiPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::XYZTData::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LateralPlan::Reader {
public:
  typedef LateralPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLaneWidthDEPRECATED() const;

  inline bool hasDPolyDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDPolyDEPRECATED() const;

  inline bool hasCPolyDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCPolyDEPRECATED() const;

  inline float getCProbDEPRECATED() const;

  inline bool hasLPolyDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLPolyDEPRECATED() const;

  inline float getLProbDEPRECATED() const;

  inline bool hasRPolyDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRPolyDEPRECATED() const;

  inline float getRProbDEPRECATED() const;

  inline float getSteeringAngleDegDEPRECATED() const;

  inline bool getMpcSolutionValid() const;

  inline bool getParamsValidDEPRECATED() const;

  inline float getAngleOffsetDegDEPRECATED() const;

  inline bool getModelValidDEPRECATED() const;

  inline float getSteeringRateDegDEPRECATED() const;

  inline bool getSensorValidDEPRECATED() const;

  inline bool getCommIssueDEPRECATED() const;

  inline bool getPosenetValidDEPRECATED() const;

  inline  ::cereal::Desire getDesire() const;

  inline  ::cereal::LaneChangeState getLaneChangeState() const;

  inline  ::cereal::LaneChangeDirection getLaneChangeDirection() const;

  inline bool hasDPathPoints() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDPathPoints() const;

  inline float getDProbDEPRECATED() const;

  inline float getCurvatureDEPRECATED() const;

  inline float getCurvatureRateDEPRECATED() const;

  inline float getRawCurvatureDEPRECATED() const;

  inline float getRawCurvatureRateDEPRECATED() const;

  inline bool hasPsis() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPsis() const;

  inline bool hasCurvatures() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCurvatures() const;

  inline bool hasCurvatureRates() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCurvatureRates() const;

  inline bool getUseLaneLines() const;

  inline float getSolverExecutionTime() const;

  inline  ::uint64_t getModelMonoTime() const;

  inline float getSolverCost() const;

  inline bool hasSolverState() const;
  inline  ::cereal::LateralPlan::SolverState::Reader getSolverState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LateralPlan::Builder {
public:
  typedef LateralPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLaneWidthDEPRECATED();
  inline void setLaneWidthDEPRECATED(float value);

  inline bool hasDPolyDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDPolyDEPRECATED();
  inline void setDPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDPolyDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDPolyDEPRECATED(unsigned int size);
  inline void adoptDPolyDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDPolyDEPRECATED();

  inline bool hasCPolyDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCPolyDEPRECATED();
  inline void setCPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCPolyDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCPolyDEPRECATED(unsigned int size);
  inline void adoptCPolyDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCPolyDEPRECATED();

  inline float getCProbDEPRECATED();
  inline void setCProbDEPRECATED(float value);

  inline bool hasLPolyDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLPolyDEPRECATED();
  inline void setLPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLPolyDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLPolyDEPRECATED(unsigned int size);
  inline void adoptLPolyDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLPolyDEPRECATED();

  inline float getLProbDEPRECATED();
  inline void setLProbDEPRECATED(float value);

  inline bool hasRPolyDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRPolyDEPRECATED();
  inline void setRPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRPolyDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRPolyDEPRECATED(unsigned int size);
  inline void adoptRPolyDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRPolyDEPRECATED();

  inline float getRProbDEPRECATED();
  inline void setRProbDEPRECATED(float value);

  inline float getSteeringAngleDegDEPRECATED();
  inline void setSteeringAngleDegDEPRECATED(float value);

  inline bool getMpcSolutionValid();
  inline void setMpcSolutionValid(bool value);

  inline bool getParamsValidDEPRECATED();
  inline void setParamsValidDEPRECATED(bool value);

  inline float getAngleOffsetDegDEPRECATED();
  inline void setAngleOffsetDegDEPRECATED(float value);

  inline bool getModelValidDEPRECATED();
  inline void setModelValidDEPRECATED(bool value);

  inline float getSteeringRateDegDEPRECATED();
  inline void setSteeringRateDegDEPRECATED(float value);

  inline bool getSensorValidDEPRECATED();
  inline void setSensorValidDEPRECATED(bool value);

  inline bool getCommIssueDEPRECATED();
  inline void setCommIssueDEPRECATED(bool value);

  inline bool getPosenetValidDEPRECATED();
  inline void setPosenetValidDEPRECATED(bool value);

  inline  ::cereal::Desire getDesire();
  inline void setDesire( ::cereal::Desire value);

  inline  ::cereal::LaneChangeState getLaneChangeState();
  inline void setLaneChangeState( ::cereal::LaneChangeState value);

  inline  ::cereal::LaneChangeDirection getLaneChangeDirection();
  inline void setLaneChangeDirection( ::cereal::LaneChangeDirection value);

  inline bool hasDPathPoints();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDPathPoints();
  inline void setDPathPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDPathPoints(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDPathPoints(unsigned int size);
  inline void adoptDPathPoints(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDPathPoints();

  inline float getDProbDEPRECATED();
  inline void setDProbDEPRECATED(float value);

  inline float getCurvatureDEPRECATED();
  inline void setCurvatureDEPRECATED(float value);

  inline float getCurvatureRateDEPRECATED();
  inline void setCurvatureRateDEPRECATED(float value);

  inline float getRawCurvatureDEPRECATED();
  inline void setRawCurvatureDEPRECATED(float value);

  inline float getRawCurvatureRateDEPRECATED();
  inline void setRawCurvatureRateDEPRECATED(float value);

  inline bool hasPsis();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPsis();
  inline void setPsis( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPsis(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPsis(unsigned int size);
  inline void adoptPsis(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPsis();

  inline bool hasCurvatures();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCurvatures();
  inline void setCurvatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCurvatures(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCurvatures(unsigned int size);
  inline void adoptCurvatures(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCurvatures();

  inline bool hasCurvatureRates();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCurvatureRates();
  inline void setCurvatureRates( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCurvatureRates(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCurvatureRates(unsigned int size);
  inline void adoptCurvatureRates(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCurvatureRates();

  inline bool getUseLaneLines();
  inline void setUseLaneLines(bool value);

  inline float getSolverExecutionTime();
  inline void setSolverExecutionTime(float value);

  inline  ::uint64_t getModelMonoTime();
  inline void setModelMonoTime( ::uint64_t value);

  inline float getSolverCost();
  inline void setSolverCost(float value);

  inline bool hasSolverState();
  inline  ::cereal::LateralPlan::SolverState::Builder getSolverState();
  inline void setSolverState( ::cereal::LateralPlan::SolverState::Reader value);
  inline  ::cereal::LateralPlan::SolverState::Builder initSolverState();
  inline void adoptSolverState(::capnp::Orphan< ::cereal::LateralPlan::SolverState>&& value);
  inline ::capnp::Orphan< ::cereal::LateralPlan::SolverState> disownSolverState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LateralPlan::Pipeline {
public:
  typedef LateralPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LateralPlan::SolverState::Pipeline getSolverState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LateralPlan::SolverState::Reader {
public:
  typedef SolverState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getX() const;

  inline bool hasU() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getU() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LateralPlan::SolverState::Builder {
public:
  typedef SolverState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getX();
  inline void setX( ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setX(::kj::ArrayPtr<const  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownX();

  inline bool hasU();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getU();
  inline void setU( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setU(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initU(unsigned int size);
  inline void adoptU(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownU();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LateralPlan::SolverState::Pipeline {
public:
  typedef SolverState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationKalman::Reader {
public:
  typedef LiveLocationKalman Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPositionECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getPositionECEF() const;

  inline bool hasPositionGeodetic() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getPositionGeodetic() const;

  inline bool hasVelocityECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityECEF() const;

  inline bool hasVelocityNED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityNED() const;

  inline bool hasVelocityDevice() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityDevice() const;

  inline bool hasAccelerationDevice() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAccelerationDevice() const;

  inline bool hasOrientationECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getOrientationECEF() const;

  inline bool hasOrientationNED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getOrientationNED() const;

  inline bool hasAngularVelocityDevice() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAngularVelocityDevice() const;

  inline bool hasCalibratedOrientationNED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getCalibratedOrientationNED() const;

  inline bool hasVelocityCalibrated() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityCalibrated() const;

  inline bool hasAccelerationCalibrated() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAccelerationCalibrated() const;

  inline bool hasAngularVelocityCalibrated() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getAngularVelocityCalibrated() const;

  inline  ::int32_t getGpsWeek() const;

  inline double getGpsTimeOfWeek() const;

  inline  ::cereal::LiveLocationKalman::Status getStatus() const;

  inline  ::int64_t getUnixTimestampMillis() const;

  inline bool getInputsOK() const;

  inline bool getPosenetOK() const;

  inline bool getGpsOK() const;

  inline bool hasCalibratedOrientationECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getCalibratedOrientationECEF() const;

  inline bool getSensorsOK() const;

  inline bool getDeviceStable() const;

  inline double getTimeSinceReset() const;

  inline bool getExcessiveResets() const;

  inline float getTimeToFirstFix() const;

  inline bool hasFilterState() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getFilterState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationKalman::Builder {
public:
  typedef LiveLocationKalman Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getPositionECEF();
  inline void setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initPositionECEF();
  inline void adoptPositionECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownPositionECEF();

  inline bool hasPositionGeodetic();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getPositionGeodetic();
  inline void setPositionGeodetic( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initPositionGeodetic();
  inline void adoptPositionGeodetic(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownPositionGeodetic();

  inline bool hasVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityECEF();
  inline void setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityECEF();
  inline void adoptVelocityECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityECEF();

  inline bool hasVelocityNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityNED();
  inline void setVelocityNED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityNED();
  inline void adoptVelocityNED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityNED();

  inline bool hasVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityDevice();
  inline void setVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityDevice();
  inline void adoptVelocityDevice(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityDevice();

  inline bool hasAccelerationDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAccelerationDevice();
  inline void setAccelerationDevice( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAccelerationDevice();
  inline void adoptAccelerationDevice(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAccelerationDevice();

  inline bool hasOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getOrientationECEF();
  inline void setOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initOrientationECEF();
  inline void adoptOrientationECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownOrientationECEF();

  inline bool hasOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getOrientationNED();
  inline void setOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initOrientationNED();
  inline void adoptOrientationNED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownOrientationNED();

  inline bool hasAngularVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAngularVelocityDevice();
  inline void setAngularVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAngularVelocityDevice();
  inline void adoptAngularVelocityDevice(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAngularVelocityDevice();

  inline bool hasCalibratedOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getCalibratedOrientationNED();
  inline void setCalibratedOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initCalibratedOrientationNED();
  inline void adoptCalibratedOrientationNED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownCalibratedOrientationNED();

  inline bool hasVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityCalibrated();
  inline void setVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityCalibrated();
  inline void adoptVelocityCalibrated(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityCalibrated();

  inline bool hasAccelerationCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAccelerationCalibrated();
  inline void setAccelerationCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAccelerationCalibrated();
  inline void adoptAccelerationCalibrated(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAccelerationCalibrated();

  inline bool hasAngularVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getAngularVelocityCalibrated();
  inline void setAngularVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initAngularVelocityCalibrated();
  inline void adoptAngularVelocityCalibrated(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownAngularVelocityCalibrated();

  inline  ::int32_t getGpsWeek();
  inline void setGpsWeek( ::int32_t value);

  inline double getGpsTimeOfWeek();
  inline void setGpsTimeOfWeek(double value);

  inline  ::cereal::LiveLocationKalman::Status getStatus();
  inline void setStatus( ::cereal::LiveLocationKalman::Status value);

  inline  ::int64_t getUnixTimestampMillis();
  inline void setUnixTimestampMillis( ::int64_t value);

  inline bool getInputsOK();
  inline void setInputsOK(bool value);

  inline bool getPosenetOK();
  inline void setPosenetOK(bool value);

  inline bool getGpsOK();
  inline void setGpsOK(bool value);

  inline bool hasCalibratedOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getCalibratedOrientationECEF();
  inline void setCalibratedOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initCalibratedOrientationECEF();
  inline void adoptCalibratedOrientationECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownCalibratedOrientationECEF();

  inline bool getSensorsOK();
  inline void setSensorsOK(bool value);

  inline bool getDeviceStable();
  inline void setDeviceStable(bool value);

  inline double getTimeSinceReset();
  inline void setTimeSinceReset(double value);

  inline bool getExcessiveResets();
  inline void setExcessiveResets(bool value);

  inline float getTimeToFirstFix();
  inline void setTimeToFirstFix(float value);

  inline bool hasFilterState();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getFilterState();
  inline void setFilterState( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initFilterState();
  inline void adoptFilterState(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownFilterState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationKalman::Pipeline {
public:
  typedef LiveLocationKalman Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getPositionGeodetic();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAccelerationDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAngularVelocityDevice();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getCalibratedOrientationNED();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAccelerationCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getAngularVelocityCalibrated();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getCalibratedOrientationECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getFilterState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationKalman::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getValue() const;

  inline bool hasStd() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStd() const;

  inline bool getValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationKalman::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getValue();
  inline void setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValue(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownValue();

  inline bool hasStd();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStd();
  inline void setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStd(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStd(unsigned int size);
  inline void adoptStd(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStd();

  inline bool getValid();
  inline void setValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationKalman::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LivePose::Reader {
public:
  typedef LivePose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOrientationNED() const;
  inline  ::cereal::LivePose::XYZMeasurement::Reader getOrientationNED() const;

  inline bool hasVelocityDevice() const;
  inline  ::cereal::LivePose::XYZMeasurement::Reader getVelocityDevice() const;

  inline bool hasAccelerationDevice() const;
  inline  ::cereal::LivePose::XYZMeasurement::Reader getAccelerationDevice() const;

  inline bool hasAngularVelocityDevice() const;
  inline  ::cereal::LivePose::XYZMeasurement::Reader getAngularVelocityDevice() const;

  inline bool getInputsOK() const;

  inline bool getPosenetOK() const;

  inline bool getSensorsOK() const;

  inline bool hasDebugFilterState() const;
  inline  ::cereal::LivePose::FilterState::Reader getDebugFilterState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LivePose::Builder {
public:
  typedef LivePose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOrientationNED();
  inline  ::cereal::LivePose::XYZMeasurement::Builder getOrientationNED();
  inline void setOrientationNED( ::cereal::LivePose::XYZMeasurement::Reader value);
  inline  ::cereal::LivePose::XYZMeasurement::Builder initOrientationNED();
  inline void adoptOrientationNED(::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value);
  inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> disownOrientationNED();

  inline bool hasVelocityDevice();
  inline  ::cereal::LivePose::XYZMeasurement::Builder getVelocityDevice();
  inline void setVelocityDevice( ::cereal::LivePose::XYZMeasurement::Reader value);
  inline  ::cereal::LivePose::XYZMeasurement::Builder initVelocityDevice();
  inline void adoptVelocityDevice(::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value);
  inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> disownVelocityDevice();

  inline bool hasAccelerationDevice();
  inline  ::cereal::LivePose::XYZMeasurement::Builder getAccelerationDevice();
  inline void setAccelerationDevice( ::cereal::LivePose::XYZMeasurement::Reader value);
  inline  ::cereal::LivePose::XYZMeasurement::Builder initAccelerationDevice();
  inline void adoptAccelerationDevice(::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value);
  inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> disownAccelerationDevice();

  inline bool hasAngularVelocityDevice();
  inline  ::cereal::LivePose::XYZMeasurement::Builder getAngularVelocityDevice();
  inline void setAngularVelocityDevice( ::cereal::LivePose::XYZMeasurement::Reader value);
  inline  ::cereal::LivePose::XYZMeasurement::Builder initAngularVelocityDevice();
  inline void adoptAngularVelocityDevice(::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value);
  inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> disownAngularVelocityDevice();

  inline bool getInputsOK();
  inline void setInputsOK(bool value);

  inline bool getPosenetOK();
  inline void setPosenetOK(bool value);

  inline bool getSensorsOK();
  inline void setSensorsOK(bool value);

  inline bool hasDebugFilterState();
  inline  ::cereal::LivePose::FilterState::Builder getDebugFilterState();
  inline void setDebugFilterState( ::cereal::LivePose::FilterState::Reader value);
  inline  ::cereal::LivePose::FilterState::Builder initDebugFilterState();
  inline void adoptDebugFilterState(::capnp::Orphan< ::cereal::LivePose::FilterState>&& value);
  inline ::capnp::Orphan< ::cereal::LivePose::FilterState> disownDebugFilterState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LivePose::Pipeline {
public:
  typedef LivePose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LivePose::XYZMeasurement::Pipeline getOrientationNED();
  inline  ::cereal::LivePose::XYZMeasurement::Pipeline getVelocityDevice();
  inline  ::cereal::LivePose::XYZMeasurement::Pipeline getAccelerationDevice();
  inline  ::cereal::LivePose::XYZMeasurement::Pipeline getAngularVelocityDevice();
  inline  ::cereal::LivePose::FilterState::Pipeline getDebugFilterState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LivePose::XYZMeasurement::Reader {
public:
  typedef XYZMeasurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

  inline float getXStd() const;

  inline float getYStd() const;

  inline float getZStd() const;

  inline bool getValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LivePose::XYZMeasurement::Builder {
public:
  typedef XYZMeasurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

  inline float getXStd();
  inline void setXStd(float value);

  inline float getYStd();
  inline void setYStd(float value);

  inline float getZStd();
  inline void setZStd(float value);

  inline bool getValid();
  inline void setValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LivePose::XYZMeasurement::Pipeline {
public:
  typedef XYZMeasurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LivePose::FilterState::Reader {
public:
  typedef FilterState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getValue() const;

  inline bool hasStd() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStd() const;

  inline bool getValid() const;

  inline bool hasObservations() const;
  inline  ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Reader getObservations() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LivePose::FilterState::Builder {
public:
  typedef FilterState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getValue();
  inline void setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValue(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownValue();

  inline bool hasStd();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStd();
  inline void setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStd(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStd(unsigned int size);
  inline void adoptStd(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStd();

  inline bool getValid();
  inline void setValid(bool value);

  inline bool hasObservations();
  inline  ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Builder getObservations();
  inline void setObservations( ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Builder initObservations(unsigned int size);
  inline void adoptObservations(::capnp::Orphan< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>> disownObservations();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LivePose::FilterState::Pipeline {
public:
  typedef FilterState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LivePose::FilterState::Observation::Reader {
public:
  typedef Observation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getKind() const;

  inline bool hasValue() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getValue() const;

  inline bool hasError() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LivePose::FilterState::Observation::Builder {
public:
  typedef Observation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getKind();
  inline void setKind( ::int32_t value);

  inline bool hasValue();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getValue();
  inline void setValue( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValue(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownValue();

  inline bool hasError();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getError();
  inline void setError( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setError(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initError(unsigned int size);
  inline void adoptError(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownError();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LivePose::FilterState::Observation::Pipeline {
public:
  typedef Observation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Reader {
public:
  typedef ProcLog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCpuTimes() const;
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader getCpuTimes() const;

  inline bool hasMem() const;
  inline  ::cereal::ProcLog::Mem::Reader getMem() const;

  inline bool hasProcs() const;
  inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader getProcs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Builder {
public:
  typedef ProcLog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCpuTimes();
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder getCpuTimes();
  inline void setCpuTimes( ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder initCpuTimes(unsigned int size);
  inline void adoptCpuTimes(::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>> disownCpuTimes();

  inline bool hasMem();
  inline  ::cereal::ProcLog::Mem::Builder getMem();
  inline void setMem( ::cereal::ProcLog::Mem::Reader value);
  inline  ::cereal::ProcLog::Mem::Builder initMem();
  inline void adoptMem(::capnp::Orphan< ::cereal::ProcLog::Mem>&& value);
  inline ::capnp::Orphan< ::cereal::ProcLog::Mem> disownMem();

  inline bool hasProcs();
  inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder getProcs();
  inline void setProcs( ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder initProcs(unsigned int size);
  inline void adoptProcs(::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>> disownProcs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Pipeline {
public:
  typedef ProcLog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ProcLog::Mem::Pipeline getMem();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Process::Reader {
public:
  typedef Process Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint8_t getState() const;

  inline  ::int32_t getPpid() const;

  inline float getCpuUser() const;

  inline float getCpuSystem() const;

  inline float getCpuChildrenUser() const;

  inline float getCpuChildrenSystem() const;

  inline  ::int64_t getPriority() const;

  inline  ::int32_t getNice() const;

  inline  ::int32_t getNumThreads() const;

  inline double getStartTime() const;

  inline  ::uint64_t getMemVms() const;

  inline  ::uint64_t getMemRss() const;

  inline  ::int32_t getProcessor() const;

  inline bool hasCmdline() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCmdline() const;

  inline bool hasExe() const;
  inline  ::capnp::Text::Reader getExe() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Process::Builder {
public:
  typedef Process Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint8_t getState();
  inline void setState( ::uint8_t value);

  inline  ::int32_t getPpid();
  inline void setPpid( ::int32_t value);

  inline float getCpuUser();
  inline void setCpuUser(float value);

  inline float getCpuSystem();
  inline void setCpuSystem(float value);

  inline float getCpuChildrenUser();
  inline void setCpuChildrenUser(float value);

  inline float getCpuChildrenSystem();
  inline void setCpuChildrenSystem(float value);

  inline  ::int64_t getPriority();
  inline void setPriority( ::int64_t value);

  inline  ::int32_t getNice();
  inline void setNice( ::int32_t value);

  inline  ::int32_t getNumThreads();
  inline void setNumThreads( ::int32_t value);

  inline double getStartTime();
  inline void setStartTime(double value);

  inline  ::uint64_t getMemVms();
  inline void setMemVms( ::uint64_t value);

  inline  ::uint64_t getMemRss();
  inline void setMemRss( ::uint64_t value);

  inline  ::int32_t getProcessor();
  inline void setProcessor( ::int32_t value);

  inline bool hasCmdline();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCmdline();
  inline void setCmdline( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCmdline(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCmdline(unsigned int size);
  inline void adoptCmdline(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCmdline();

  inline bool hasExe();
  inline  ::capnp::Text::Builder getExe();
  inline void setExe( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExe(unsigned int size);
  inline void adoptExe(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExe();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Process::Pipeline {
public:
  typedef Process Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::CPUTimes::Reader {
public:
  typedef CPUTimes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCpuNum() const;

  inline float getUser() const;

  inline float getNice() const;

  inline float getSystem() const;

  inline float getIdle() const;

  inline float getIowait() const;

  inline float getIrq() const;

  inline float getSoftirq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::CPUTimes::Builder {
public:
  typedef CPUTimes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCpuNum();
  inline void setCpuNum( ::int64_t value);

  inline float getUser();
  inline void setUser(float value);

  inline float getNice();
  inline void setNice(float value);

  inline float getSystem();
  inline void setSystem(float value);

  inline float getIdle();
  inline void setIdle(float value);

  inline float getIowait();
  inline void setIowait(float value);

  inline float getIrq();
  inline void setIrq(float value);

  inline float getSoftirq();
  inline void setSoftirq(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::CPUTimes::Pipeline {
public:
  typedef CPUTimes Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Mem::Reader {
public:
  typedef Mem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTotal() const;

  inline  ::uint64_t getFree() const;

  inline  ::uint64_t getAvailable() const;

  inline  ::uint64_t getBuffers() const;

  inline  ::uint64_t getCached() const;

  inline  ::uint64_t getActive() const;

  inline  ::uint64_t getInactive() const;

  inline  ::uint64_t getShared() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Mem::Builder {
public:
  typedef Mem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTotal();
  inline void setTotal( ::uint64_t value);

  inline  ::uint64_t getFree();
  inline void setFree( ::uint64_t value);

  inline  ::uint64_t getAvailable();
  inline void setAvailable( ::uint64_t value);

  inline  ::uint64_t getBuffers();
  inline void setBuffers( ::uint64_t value);

  inline  ::uint64_t getCached();
  inline void setCached( ::uint64_t value);

  inline  ::uint64_t getActive();
  inline void setActive( ::uint64_t value);

  inline  ::uint64_t getInactive();
  inline void setInactive( ::uint64_t value);

  inline  ::uint64_t getShared();
  inline void setShared( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Mem::Pipeline {
public:
  typedef Mem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::Reader {
public:
  typedef GnssMeasurements Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getMeasTime() const;

  inline  ::int16_t getGpsWeek() const;

  inline double getGpsTimeOfWeek() const;

  inline bool hasCorrectedMeasurements() const;
  inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader getCorrectedMeasurements() const;

  inline bool hasKalmanPositionECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getKalmanPositionECEF() const;

  inline bool hasKalmanVelocityECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getKalmanVelocityECEF() const;

  inline bool hasPositionECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getPositionECEF() const;

  inline bool hasVelocityECEF() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getVelocityECEF() const;

  inline float getTimeToFirstFix() const;

  inline bool hasEphemerisStatuses() const;
  inline  ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Reader getEphemerisStatuses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::Builder {
public:
  typedef GnssMeasurements Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getMeasTime();
  inline void setMeasTime( ::uint64_t value);

  inline  ::int16_t getGpsWeek();
  inline void setGpsWeek( ::int16_t value);

  inline double getGpsTimeOfWeek();
  inline void setGpsTimeOfWeek(double value);

  inline bool hasCorrectedMeasurements();
  inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder getCorrectedMeasurements();
  inline void setCorrectedMeasurements( ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder initCorrectedMeasurements(unsigned int size);
  inline void adoptCorrectedMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>> disownCorrectedMeasurements();

  inline bool hasKalmanPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getKalmanPositionECEF();
  inline void setKalmanPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initKalmanPositionECEF();
  inline void adoptKalmanPositionECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownKalmanPositionECEF();

  inline bool hasKalmanVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getKalmanVelocityECEF();
  inline void setKalmanVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initKalmanVelocityECEF();
  inline void adoptKalmanVelocityECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownKalmanVelocityECEF();

  inline bool hasPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getPositionECEF();
  inline void setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initPositionECEF();
  inline void adoptPositionECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownPositionECEF();

  inline bool hasVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getVelocityECEF();
  inline void setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initVelocityECEF();
  inline void adoptVelocityECEF(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownVelocityECEF();

  inline float getTimeToFirstFix();
  inline void setTimeToFirstFix(float value);

  inline bool hasEphemerisStatuses();
  inline  ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Builder getEphemerisStatuses();
  inline void setEphemerisStatuses( ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Builder initEphemerisStatuses(unsigned int size);
  inline void adoptEphemerisStatuses(::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>> disownEphemerisStatuses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::Pipeline {
public:
  typedef GnssMeasurements Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getKalmanPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getKalmanVelocityECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getPositionECEF();
  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getVelocityECEF();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::EphemerisStatus::Reader {
public:
  typedef EphemerisStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::ConstellationId getConstellationId() const;

  inline  ::uint8_t getSvId() const;

  inline  ::cereal::GnssMeasurements::EphemerisType getType() const;

  inline  ::cereal::GnssMeasurements::EphemerisSource getSource() const;

  inline  ::uint16_t getGpsWeek() const;

  inline double getTow() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::EphemerisStatus::Builder {
public:
  typedef EphemerisStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::ConstellationId getConstellationId();
  inline void setConstellationId( ::cereal::GnssMeasurements::ConstellationId value);

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::cereal::GnssMeasurements::EphemerisType getType();
  inline void setType( ::cereal::GnssMeasurements::EphemerisType value);

  inline  ::cereal::GnssMeasurements::EphemerisSource getSource();
  inline void setSource( ::cereal::GnssMeasurements::EphemerisSource value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline double getTow();
  inline void setTow(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::EphemerisStatus::Pipeline {
public:
  typedef EphemerisStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::CorrectedMeasurement::Reader {
public:
  typedef CorrectedMeasurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::ConstellationId getConstellationId() const;

  inline  ::uint8_t getSvId() const;

  inline  ::int8_t getGlonassFrequency() const;

  inline double getPseudorange() const;

  inline double getPseudorangeStd() const;

  inline double getPseudorangeRate() const;

  inline double getPseudorangeRateStd() const;

  inline bool hasSatPos() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getSatPos() const;

  inline bool hasSatVel() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getSatVel() const;

  inline bool hasEphemerisSourceDEPRECATED() const;
  inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Reader getEphemerisSourceDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::CorrectedMeasurement::Builder {
public:
  typedef CorrectedMeasurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::ConstellationId getConstellationId();
  inline void setConstellationId( ::cereal::GnssMeasurements::ConstellationId value);

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::int8_t getGlonassFrequency();
  inline void setGlonassFrequency( ::int8_t value);

  inline double getPseudorange();
  inline void setPseudorange(double value);

  inline double getPseudorangeStd();
  inline void setPseudorangeStd(double value);

  inline double getPseudorangeRate();
  inline void setPseudorangeRate(double value);

  inline double getPseudorangeRateStd();
  inline void setPseudorangeRateStd(double value);

  inline bool hasSatPos();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getSatPos();
  inline void setSatPos( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSatPos(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initSatPos(unsigned int size);
  inline void adoptSatPos(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownSatPos();

  inline bool hasSatVel();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getSatVel();
  inline void setSatVel( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSatVel(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initSatVel(unsigned int size);
  inline void adoptSatVel(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownSatVel();

  inline bool hasEphemerisSourceDEPRECATED();
  inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Builder getEphemerisSourceDEPRECATED();
  inline void setEphemerisSourceDEPRECATED( ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Reader value);
  inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Builder initEphemerisSourceDEPRECATED();
  inline void adoptEphemerisSourceDEPRECATED(::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED> disownEphemerisSourceDEPRECATED();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::CorrectedMeasurement::Pipeline {
public:
  typedef CorrectedMeasurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Pipeline getEphemerisSourceDEPRECATED();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GnssMeasurements::EphemerisSourceDEPRECATED::Reader {
public:
  typedef EphemerisSourceDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::EphemerisType getType() const;

  inline  ::int16_t getGpsWeek() const;

  inline  ::int32_t getGpsTimeOfWeek() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GnssMeasurements::EphemerisSourceDEPRECATED::Builder {
public:
  typedef EphemerisSourceDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::GnssMeasurements::EphemerisType getType();
  inline void setType( ::cereal::GnssMeasurements::EphemerisType value);

  inline  ::int16_t getGpsWeek();
  inline void setGpsWeek( ::int16_t value);

  inline  ::int32_t getGpsTimeOfWeek();
  inline void setGpsTimeOfWeek( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GnssMeasurements::EphemerisSourceDEPRECATED::Pipeline {
public:
  typedef EphemerisSourceDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::Reader {
public:
  typedef UbloxGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMeasurementReport() const;
  inline bool hasMeasurementReport() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::Reader getMeasurementReport() const;

  inline bool isEphemeris() const;
  inline bool hasEphemeris() const;
  inline  ::cereal::UbloxGnss::Ephemeris::Reader getEphemeris() const;

  inline bool isIonoData() const;
  inline bool hasIonoData() const;
  inline  ::cereal::UbloxGnss::IonoData::Reader getIonoData() const;

  inline bool isHwStatus() const;
  inline bool hasHwStatus() const;
  inline  ::cereal::UbloxGnss::HwStatus::Reader getHwStatus() const;

  inline bool isHwStatus2() const;
  inline bool hasHwStatus2() const;
  inline  ::cereal::UbloxGnss::HwStatus2::Reader getHwStatus2() const;

  inline bool isGlonassEphemeris() const;
  inline bool hasGlonassEphemeris() const;
  inline  ::cereal::UbloxGnss::GlonassEphemeris::Reader getGlonassEphemeris() const;

  inline bool isSatReport() const;
  inline bool hasSatReport() const;
  inline  ::cereal::UbloxGnss::SatReport::Reader getSatReport() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::Builder {
public:
  typedef UbloxGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMeasurementReport();
  inline bool hasMeasurementReport();
  inline  ::cereal::UbloxGnss::MeasurementReport::Builder getMeasurementReport();
  inline void setMeasurementReport( ::cereal::UbloxGnss::MeasurementReport::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::Builder initMeasurementReport();
  inline void adoptMeasurementReport(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport> disownMeasurementReport();

  inline bool isEphemeris();
  inline bool hasEphemeris();
  inline  ::cereal::UbloxGnss::Ephemeris::Builder getEphemeris();
  inline void setEphemeris( ::cereal::UbloxGnss::Ephemeris::Reader value);
  inline  ::cereal::UbloxGnss::Ephemeris::Builder initEphemeris();
  inline void adoptEphemeris(::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris> disownEphemeris();

  inline bool isIonoData();
  inline bool hasIonoData();
  inline  ::cereal::UbloxGnss::IonoData::Builder getIonoData();
  inline void setIonoData( ::cereal::UbloxGnss::IonoData::Reader value);
  inline  ::cereal::UbloxGnss::IonoData::Builder initIonoData();
  inline void adoptIonoData(::capnp::Orphan< ::cereal::UbloxGnss::IonoData>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::IonoData> disownIonoData();

  inline bool isHwStatus();
  inline bool hasHwStatus();
  inline  ::cereal::UbloxGnss::HwStatus::Builder getHwStatus();
  inline void setHwStatus( ::cereal::UbloxGnss::HwStatus::Reader value);
  inline  ::cereal::UbloxGnss::HwStatus::Builder initHwStatus();
  inline void adoptHwStatus(::capnp::Orphan< ::cereal::UbloxGnss::HwStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus> disownHwStatus();

  inline bool isHwStatus2();
  inline bool hasHwStatus2();
  inline  ::cereal::UbloxGnss::HwStatus2::Builder getHwStatus2();
  inline void setHwStatus2( ::cereal::UbloxGnss::HwStatus2::Reader value);
  inline  ::cereal::UbloxGnss::HwStatus2::Builder initHwStatus2();
  inline void adoptHwStatus2(::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2> disownHwStatus2();

  inline bool isGlonassEphemeris();
  inline bool hasGlonassEphemeris();
  inline  ::cereal::UbloxGnss::GlonassEphemeris::Builder getGlonassEphemeris();
  inline void setGlonassEphemeris( ::cereal::UbloxGnss::GlonassEphemeris::Reader value);
  inline  ::cereal::UbloxGnss::GlonassEphemeris::Builder initGlonassEphemeris();
  inline void adoptGlonassEphemeris(::capnp::Orphan< ::cereal::UbloxGnss::GlonassEphemeris>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::GlonassEphemeris> disownGlonassEphemeris();

  inline bool isSatReport();
  inline bool hasSatReport();
  inline  ::cereal::UbloxGnss::SatReport::Builder getSatReport();
  inline void setSatReport( ::cereal::UbloxGnss::SatReport::Reader value);
  inline  ::cereal::UbloxGnss::SatReport::Builder initSatReport();
  inline void adoptSatReport(::capnp::Orphan< ::cereal::UbloxGnss::SatReport>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::SatReport> disownSatReport();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::Pipeline {
public:
  typedef UbloxGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::SatReport::Reader {
public:
  typedef SatReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getITow() const;

  inline bool hasSvs() const;
  inline  ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Reader getSvs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::SatReport::Builder {
public:
  typedef SatReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getITow();
  inline void setITow( ::uint32_t value);

  inline bool hasSvs();
  inline  ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Builder getSvs();
  inline void setSvs( ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Builder initSvs(unsigned int size);
  inline void adoptSvs(::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>> disownSvs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::SatReport::Pipeline {
public:
  typedef SatReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::SatReport::SatInfo::Reader {
public:
  typedef SatInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline  ::uint8_t getGnssId() const;

  inline  ::uint32_t getFlagsBitfield() const;

  inline  ::uint8_t getCno() const;

  inline  ::int8_t getElevationDeg() const;

  inline  ::int16_t getAzimuthDeg() const;

  inline float getPseudorangeResidual() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::SatReport::SatInfo::Builder {
public:
  typedef SatInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::uint8_t getGnssId();
  inline void setGnssId( ::uint8_t value);

  inline  ::uint32_t getFlagsBitfield();
  inline void setFlagsBitfield( ::uint32_t value);

  inline  ::uint8_t getCno();
  inline void setCno( ::uint8_t value);

  inline  ::int8_t getElevationDeg();
  inline void setElevationDeg( ::int8_t value);

  inline  ::int16_t getAzimuthDeg();
  inline void setAzimuthDeg( ::int16_t value);

  inline float getPseudorangeResidual();
  inline void setPseudorangeResidual(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::SatReport::SatInfo::Pipeline {
public:
  typedef SatInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Reader {
public:
  typedef MeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRcvTow() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint16_t getLeapSeconds() const;

  inline bool hasReceiverStatus() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader getReceiverStatus() const;

  inline  ::uint8_t getNumMeas() const;

  inline bool hasMeasurements() const;
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader getMeasurements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Builder {
public:
  typedef MeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRcvTow();
  inline void setRcvTow(double value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint16_t getLeapSeconds();
  inline void setLeapSeconds( ::uint16_t value);

  inline bool hasReceiverStatus();
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder getReceiverStatus();
  inline void setReceiverStatus( ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder initReceiverStatus();
  inline void adoptReceiverStatus(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus> disownReceiverStatus();

  inline  ::uint8_t getNumMeas();
  inline void setNumMeas( ::uint8_t value);

  inline bool hasMeasurements();
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder getMeasurements();
  inline void setMeasurements( ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder initMeasurements(unsigned int size);
  inline void adoptMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>> disownMeasurements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Pipeline {
public:
  typedef MeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline getReceiverStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::ReceiverStatus::Reader {
public:
  typedef ReceiverStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLeapSecValid() const;

  inline bool getClkReset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::ReceiverStatus::Builder {
public:
  typedef ReceiverStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLeapSecValid();
  inline void setLeapSecValid(bool value);

  inline bool getClkReset();
  inline void setClkReset(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline {
public:
  typedef ReceiverStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline bool hasTrackingStatus() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader getTrackingStatus() const;

  inline double getPseudorange() const;

  inline double getCarrierCycles() const;

  inline float getDoppler() const;

  inline  ::uint8_t getGnssId() const;

  inline  ::uint8_t getGlonassFrequencyIndex() const;

  inline  ::uint16_t getLocktime() const;

  inline  ::uint8_t getCno() const;

  inline float getPseudorangeStdev() const;

  inline float getCarrierPhaseStdev() const;

  inline float getDopplerStdev() const;

  inline  ::uint8_t getSigId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline bool hasTrackingStatus();
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder getTrackingStatus();
  inline void setTrackingStatus( ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder initTrackingStatus();
  inline void adoptTrackingStatus(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus> disownTrackingStatus();

  inline double getPseudorange();
  inline void setPseudorange(double value);

  inline double getCarrierCycles();
  inline void setCarrierCycles(double value);

  inline float getDoppler();
  inline void setDoppler(float value);

  inline  ::uint8_t getGnssId();
  inline void setGnssId( ::uint8_t value);

  inline  ::uint8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::uint8_t value);

  inline  ::uint16_t getLocktime();
  inline void setLocktime( ::uint16_t value);

  inline  ::uint8_t getCno();
  inline void setCno( ::uint8_t value);

  inline float getPseudorangeStdev();
  inline void setPseudorangeStdev(float value);

  inline float getCarrierPhaseStdev();
  inline void setCarrierPhaseStdev(float value);

  inline float getDopplerStdev();
  inline void setDopplerStdev(float value);

  inline  ::uint8_t getSigId();
  inline void setSigId( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline getTrackingStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader {
public:
  typedef TrackingStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPseudorangeValid() const;

  inline bool getCarrierPhaseValid() const;

  inline bool getHalfCycleValid() const;

  inline bool getHalfCycleSubtracted() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder {
public:
  typedef TrackingStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPseudorangeValid();
  inline void setPseudorangeValid(bool value);

  inline bool getCarrierPhaseValid();
  inline void setCarrierPhaseValid(bool value);

  inline bool getHalfCycleValid();
  inline void setHalfCycleValid(bool value);

  inline bool getHalfCycleSubtracted();
  inline void setHalfCycleSubtracted(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline {
public:
  typedef TrackingStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::Ephemeris::Reader {
public:
  typedef Ephemeris Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId() const;

  inline  ::uint16_t getYear() const;

  inline  ::uint16_t getMonth() const;

  inline  ::uint16_t getDay() const;

  inline  ::uint16_t getHour() const;

  inline  ::uint16_t getMinute() const;

  inline float getSecond() const;

  inline double getAf0() const;

  inline double getAf1() const;

  inline double getAf2() const;

  inline double getIode() const;

  inline double getCrs() const;

  inline double getDeltaN() const;

  inline double getM0() const;

  inline double getCuc() const;

  inline double getEcc() const;

  inline double getCus() const;

  inline double getA() const;

  inline double getToe() const;

  inline double getCic() const;

  inline double getOmega0() const;

  inline double getCis() const;

  inline double getI0() const;

  inline double getCrc() const;

  inline double getOmega() const;

  inline double getOmegaDot() const;

  inline double getIDot() const;

  inline double getCodesL2() const;

  inline double getGpsWeekDEPRECATED() const;

  inline double getL2() const;

  inline double getSvAcc() const;

  inline double getSvHealth() const;

  inline double getTgd() const;

  inline double getIodc() const;

  inline double getTransmissionTime() const;

  inline double getFitInterval() const;

  inline double getToc() const;

  inline bool getIonoCoeffsValid() const;

  inline bool hasIonoAlpha() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoAlpha() const;

  inline bool hasIonoBeta() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoBeta() const;

  inline  ::uint32_t getTowCount() const;

  inline  ::uint16_t getToeWeek() const;

  inline  ::uint16_t getTocWeek() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::Ephemeris::Builder {
public:
  typedef Ephemeris Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId();
  inline void setSvId( ::uint16_t value);

  inline  ::uint16_t getYear();
  inline void setYear( ::uint16_t value);

  inline  ::uint16_t getMonth();
  inline void setMonth( ::uint16_t value);

  inline  ::uint16_t getDay();
  inline void setDay( ::uint16_t value);

  inline  ::uint16_t getHour();
  inline void setHour( ::uint16_t value);

  inline  ::uint16_t getMinute();
  inline void setMinute( ::uint16_t value);

  inline float getSecond();
  inline void setSecond(float value);

  inline double getAf0();
  inline void setAf0(double value);

  inline double getAf1();
  inline void setAf1(double value);

  inline double getAf2();
  inline void setAf2(double value);

  inline double getIode();
  inline void setIode(double value);

  inline double getCrs();
  inline void setCrs(double value);

  inline double getDeltaN();
  inline void setDeltaN(double value);

  inline double getM0();
  inline void setM0(double value);

  inline double getCuc();
  inline void setCuc(double value);

  inline double getEcc();
  inline void setEcc(double value);

  inline double getCus();
  inline void setCus(double value);

  inline double getA();
  inline void setA(double value);

  inline double getToe();
  inline void setToe(double value);

  inline double getCic();
  inline void setCic(double value);

  inline double getOmega0();
  inline void setOmega0(double value);

  inline double getCis();
  inline void setCis(double value);

  inline double getI0();
  inline void setI0(double value);

  inline double getCrc();
  inline void setCrc(double value);

  inline double getOmega();
  inline void setOmega(double value);

  inline double getOmegaDot();
  inline void setOmegaDot(double value);

  inline double getIDot();
  inline void setIDot(double value);

  inline double getCodesL2();
  inline void setCodesL2(double value);

  inline double getGpsWeekDEPRECATED();
  inline void setGpsWeekDEPRECATED(double value);

  inline double getL2();
  inline void setL2(double value);

  inline double getSvAcc();
  inline void setSvAcc(double value);

  inline double getSvHealth();
  inline void setSvHealth(double value);

  inline double getTgd();
  inline void setTgd(double value);

  inline double getIodc();
  inline void setIodc(double value);

  inline double getTransmissionTime();
  inline void setTransmissionTime(double value);

  inline double getFitInterval();
  inline void setFitInterval(double value);

  inline double getToc();
  inline void setToc(double value);

  inline bool getIonoCoeffsValid();
  inline void setIonoCoeffsValid(bool value);

  inline bool hasIonoAlpha();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoAlpha();
  inline void setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoAlpha(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoAlpha(unsigned int size);
  inline void adoptIonoAlpha(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoAlpha();

  inline bool hasIonoBeta();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoBeta();
  inline void setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoBeta(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoBeta(unsigned int size);
  inline void adoptIonoBeta(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoBeta();

  inline  ::uint32_t getTowCount();
  inline void setTowCount( ::uint32_t value);

  inline  ::uint16_t getToeWeek();
  inline void setToeWeek( ::uint16_t value);

  inline  ::uint16_t getTocWeek();
  inline void setTocWeek( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::Ephemeris::Pipeline {
public:
  typedef Ephemeris Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::IonoData::Reader {
public:
  typedef IonoData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSvHealth() const;

  inline double getTow() const;

  inline double getGpsWeek() const;

  inline bool hasIonoAlpha() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoAlpha() const;

  inline bool hasIonoBeta() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getIonoBeta() const;

  inline bool getHealthValid() const;

  inline bool getIonoCoeffsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::IonoData::Builder {
public:
  typedef IonoData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSvHealth();
  inline void setSvHealth( ::uint32_t value);

  inline double getTow();
  inline void setTow(double value);

  inline double getGpsWeek();
  inline void setGpsWeek(double value);

  inline bool hasIonoAlpha();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoAlpha();
  inline void setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoAlpha(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoAlpha(unsigned int size);
  inline void adoptIonoAlpha(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoAlpha();

  inline bool hasIonoBeta();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getIonoBeta();
  inline void setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIonoBeta(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initIonoBeta(unsigned int size);
  inline void adoptIonoBeta(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownIonoBeta();

  inline bool getHealthValid();
  inline void setHealthValid(bool value);

  inline bool getIonoCoeffsValid();
  inline void setIonoCoeffsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::IonoData::Pipeline {
public:
  typedef IonoData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::HwStatus::Reader {
public:
  typedef HwStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getNoisePerMS() const;

  inline  ::uint16_t getAgcCnt() const;

  inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState getAStatus() const;

  inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus getAPower() const;

  inline  ::uint8_t getJamInd() const;

  inline  ::uint8_t getFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::HwStatus::Builder {
public:
  typedef HwStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getNoisePerMS();
  inline void setNoisePerMS( ::uint16_t value);

  inline  ::uint16_t getAgcCnt();
  inline void setAgcCnt( ::uint16_t value);

  inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState getAStatus();
  inline void setAStatus( ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState value);

  inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus getAPower();
  inline void setAPower( ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus value);

  inline  ::uint8_t getJamInd();
  inline void setJamInd( ::uint8_t value);

  inline  ::uint8_t getFlags();
  inline void setFlags( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::HwStatus::Pipeline {
public:
  typedef HwStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::HwStatus2::Reader {
public:
  typedef HwStatus2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getOfsI() const;

  inline  ::uint8_t getMagI() const;

  inline  ::int8_t getOfsQ() const;

  inline  ::uint8_t getMagQ() const;

  inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource getCfgSource() const;

  inline  ::uint32_t getLowLevCfg() const;

  inline  ::uint32_t getPostStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::HwStatus2::Builder {
public:
  typedef HwStatus2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getOfsI();
  inline void setOfsI( ::int8_t value);

  inline  ::uint8_t getMagI();
  inline void setMagI( ::uint8_t value);

  inline  ::int8_t getOfsQ();
  inline void setOfsQ( ::int8_t value);

  inline  ::uint8_t getMagQ();
  inline void setMagQ( ::uint8_t value);

  inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource getCfgSource();
  inline void setCfgSource( ::cereal::UbloxGnss::HwStatus2::ConfigSource value);

  inline  ::uint32_t getLowLevCfg();
  inline void setLowLevCfg( ::uint32_t value);

  inline  ::uint32_t getPostStatus();
  inline void setPostStatus( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::HwStatus2::Pipeline {
public:
  typedef HwStatus2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::GlonassEphemeris::Reader {
public:
  typedef GlonassEphemeris Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId() const;

  inline  ::uint16_t getYear() const;

  inline  ::uint16_t getDayInYear() const;

  inline  ::uint16_t getHour() const;

  inline  ::uint16_t getMinute() const;

  inline float getSecond() const;

  inline double getX() const;

  inline double getXVel() const;

  inline double getXAccel() const;

  inline double getY() const;

  inline double getYVel() const;

  inline double getYAccel() const;

  inline double getZ() const;

  inline double getZVel() const;

  inline double getZAccel() const;

  inline  ::uint8_t getSvType() const;

  inline float getSvURA() const;

  inline  ::uint8_t getAge() const;

  inline  ::uint8_t getSvHealth() const;

  inline  ::uint16_t getTkDEPRECATED() const;

  inline  ::uint16_t getTb() const;

  inline double getTauN() const;

  inline double getDeltaTauN() const;

  inline double getGammaN() const;

  inline  ::uint8_t getP1() const;

  inline  ::uint8_t getP2() const;

  inline  ::uint8_t getP3() const;

  inline  ::uint8_t getP4() const;

  inline  ::uint32_t getFreqNumDEPRECATED() const;

  inline  ::uint8_t getN4() const;

  inline  ::uint16_t getNt() const;

  inline  ::int16_t getFreqNum() const;

  inline  ::uint32_t getTkSeconds() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::GlonassEphemeris::Builder {
public:
  typedef GlonassEphemeris Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId();
  inline void setSvId( ::uint16_t value);

  inline  ::uint16_t getYear();
  inline void setYear( ::uint16_t value);

  inline  ::uint16_t getDayInYear();
  inline void setDayInYear( ::uint16_t value);

  inline  ::uint16_t getHour();
  inline void setHour( ::uint16_t value);

  inline  ::uint16_t getMinute();
  inline void setMinute( ::uint16_t value);

  inline float getSecond();
  inline void setSecond(float value);

  inline double getX();
  inline void setX(double value);

  inline double getXVel();
  inline void setXVel(double value);

  inline double getXAccel();
  inline void setXAccel(double value);

  inline double getY();
  inline void setY(double value);

  inline double getYVel();
  inline void setYVel(double value);

  inline double getYAccel();
  inline void setYAccel(double value);

  inline double getZ();
  inline void setZ(double value);

  inline double getZVel();
  inline void setZVel(double value);

  inline double getZAccel();
  inline void setZAccel(double value);

  inline  ::uint8_t getSvType();
  inline void setSvType( ::uint8_t value);

  inline float getSvURA();
  inline void setSvURA(float value);

  inline  ::uint8_t getAge();
  inline void setAge( ::uint8_t value);

  inline  ::uint8_t getSvHealth();
  inline void setSvHealth( ::uint8_t value);

  inline  ::uint16_t getTkDEPRECATED();
  inline void setTkDEPRECATED( ::uint16_t value);

  inline  ::uint16_t getTb();
  inline void setTb( ::uint16_t value);

  inline double getTauN();
  inline void setTauN(double value);

  inline double getDeltaTauN();
  inline void setDeltaTauN(double value);

  inline double getGammaN();
  inline void setGammaN(double value);

  inline  ::uint8_t getP1();
  inline void setP1( ::uint8_t value);

  inline  ::uint8_t getP2();
  inline void setP2( ::uint8_t value);

  inline  ::uint8_t getP3();
  inline void setP3( ::uint8_t value);

  inline  ::uint8_t getP4();
  inline void setP4( ::uint8_t value);

  inline  ::uint32_t getFreqNumDEPRECATED();
  inline void setFreqNumDEPRECATED( ::uint32_t value);

  inline  ::uint8_t getN4();
  inline void setN4( ::uint8_t value);

  inline  ::uint16_t getNt();
  inline void setNt( ::uint16_t value);

  inline  ::int16_t getFreqNum();
  inline void setFreqNum( ::int16_t value);

  inline  ::uint32_t getTkSeconds();
  inline void setTkSeconds( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::GlonassEphemeris::Pipeline {
public:
  typedef GlonassEphemeris Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::Reader {
public:
  typedef QcomGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getLogTs() const;

  inline bool isMeasurementReport() const;
  inline bool hasMeasurementReport() const;
  inline  ::cereal::QcomGnss::MeasurementReport::Reader getMeasurementReport() const;

  inline bool isClockReport() const;
  inline bool hasClockReport() const;
  inline  ::cereal::QcomGnss::ClockReport::Reader getClockReport() const;

  inline bool isDrMeasurementReport() const;
  inline bool hasDrMeasurementReport() const;
  inline  ::cereal::QcomGnss::DrMeasurementReport::Reader getDrMeasurementReport() const;

  inline bool isDrSvPoly() const;
  inline bool hasDrSvPoly() const;
  inline  ::cereal::QcomGnss::DrSvPolyReport::Reader getDrSvPoly() const;

  inline bool isRawLog() const;
  inline bool hasRawLog() const;
  inline  ::capnp::Data::Reader getRawLog() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::Builder {
public:
  typedef QcomGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getLogTs();
  inline void setLogTs( ::uint64_t value);

  inline bool isMeasurementReport();
  inline bool hasMeasurementReport();
  inline  ::cereal::QcomGnss::MeasurementReport::Builder getMeasurementReport();
  inline void setMeasurementReport( ::cereal::QcomGnss::MeasurementReport::Reader value);
  inline  ::cereal::QcomGnss::MeasurementReport::Builder initMeasurementReport();
  inline void adoptMeasurementReport(::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport> disownMeasurementReport();

  inline bool isClockReport();
  inline bool hasClockReport();
  inline  ::cereal::QcomGnss::ClockReport::Builder getClockReport();
  inline void setClockReport( ::cereal::QcomGnss::ClockReport::Reader value);
  inline  ::cereal::QcomGnss::ClockReport::Builder initClockReport();
  inline void adoptClockReport(::capnp::Orphan< ::cereal::QcomGnss::ClockReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::ClockReport> disownClockReport();

  inline bool isDrMeasurementReport();
  inline bool hasDrMeasurementReport();
  inline  ::cereal::QcomGnss::DrMeasurementReport::Builder getDrMeasurementReport();
  inline void setDrMeasurementReport( ::cereal::QcomGnss::DrMeasurementReport::Reader value);
  inline  ::cereal::QcomGnss::DrMeasurementReport::Builder initDrMeasurementReport();
  inline void adoptDrMeasurementReport(::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport> disownDrMeasurementReport();

  inline bool isDrSvPoly();
  inline bool hasDrSvPoly();
  inline  ::cereal::QcomGnss::DrSvPolyReport::Builder getDrSvPoly();
  inline void setDrSvPoly( ::cereal::QcomGnss::DrSvPolyReport::Reader value);
  inline  ::cereal::QcomGnss::DrSvPolyReport::Builder initDrSvPoly();
  inline void adoptDrSvPoly(::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport> disownDrSvPoly();

  inline bool isRawLog();
  inline bool hasRawLog();
  inline  ::capnp::Data::Builder getRawLog();
  inline void setRawLog( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawLog(unsigned int size);
  inline void adoptRawLog(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawLog();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::Pipeline {
public:
  typedef QcomGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::MeasurementStatus::Reader {
public:
  typedef MeasurementStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSubMillisecondIsValid() const;

  inline bool getSubBitTimeIsKnown() const;

  inline bool getSatelliteTimeIsKnown() const;

  inline bool getBitEdgeConfirmedFromSignal() const;

  inline bool getMeasuredVelocity() const;

  inline bool getFineOrCoarseVelocity() const;

  inline bool getLockPointValid() const;

  inline bool getLockPointPositive() const;

  inline bool getLastUpdateFromDifference() const;

  inline bool getLastUpdateFromVelocityDifference() const;

  inline bool getStrongIndicationOfCrossCorelation() const;

  inline bool getTentativeMeasurement() const;

  inline bool getMeasurementNotUsable() const;

  inline bool getSirCheckIsNeeded() const;

  inline bool getProbationMode() const;

  inline bool getGlonassMeanderBitEdgeValid() const;

  inline bool getGlonassTimeMarkValid() const;

  inline bool getGpsRoundRobinRxDiversity() const;

  inline bool getGpsRxDiversity() const;

  inline bool getGpsLowBandwidthRxDiversityCombined() const;

  inline bool getGpsHighBandwidthNu4() const;

  inline bool getGpsHighBandwidthNu8() const;

  inline bool getGpsHighBandwidthUniform() const;

  inline bool getMultipathIndicator() const;

  inline bool getImdJammingIndicator() const;

  inline bool getLteB13TxJammingIndicator() const;

  inline bool getFreshMeasurementIndicator() const;

  inline bool getMultipathEstimateIsValid() const;

  inline bool getDirectionIsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::MeasurementStatus::Builder {
public:
  typedef MeasurementStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSubMillisecondIsValid();
  inline void setSubMillisecondIsValid(bool value);

  inline bool getSubBitTimeIsKnown();
  inline void setSubBitTimeIsKnown(bool value);

  inline bool getSatelliteTimeIsKnown();
  inline void setSatelliteTimeIsKnown(bool value);

  inline bool getBitEdgeConfirmedFromSignal();
  inline void setBitEdgeConfirmedFromSignal(bool value);

  inline bool getMeasuredVelocity();
  inline void setMeasuredVelocity(bool value);

  inline bool getFineOrCoarseVelocity();
  inline void setFineOrCoarseVelocity(bool value);

  inline bool getLockPointValid();
  inline void setLockPointValid(bool value);

  inline bool getLockPointPositive();
  inline void setLockPointPositive(bool value);

  inline bool getLastUpdateFromDifference();
  inline void setLastUpdateFromDifference(bool value);

  inline bool getLastUpdateFromVelocityDifference();
  inline void setLastUpdateFromVelocityDifference(bool value);

  inline bool getStrongIndicationOfCrossCorelation();
  inline void setStrongIndicationOfCrossCorelation(bool value);

  inline bool getTentativeMeasurement();
  inline void setTentativeMeasurement(bool value);

  inline bool getMeasurementNotUsable();
  inline void setMeasurementNotUsable(bool value);

  inline bool getSirCheckIsNeeded();
  inline void setSirCheckIsNeeded(bool value);

  inline bool getProbationMode();
  inline void setProbationMode(bool value);

  inline bool getGlonassMeanderBitEdgeValid();
  inline void setGlonassMeanderBitEdgeValid(bool value);

  inline bool getGlonassTimeMarkValid();
  inline void setGlonassTimeMarkValid(bool value);

  inline bool getGpsRoundRobinRxDiversity();
  inline void setGpsRoundRobinRxDiversity(bool value);

  inline bool getGpsRxDiversity();
  inline void setGpsRxDiversity(bool value);

  inline bool getGpsLowBandwidthRxDiversityCombined();
  inline void setGpsLowBandwidthRxDiversityCombined(bool value);

  inline bool getGpsHighBandwidthNu4();
  inline void setGpsHighBandwidthNu4(bool value);

  inline bool getGpsHighBandwidthNu8();
  inline void setGpsHighBandwidthNu8(bool value);

  inline bool getGpsHighBandwidthUniform();
  inline void setGpsHighBandwidthUniform(bool value);

  inline bool getMultipathIndicator();
  inline void setMultipathIndicator(bool value);

  inline bool getImdJammingIndicator();
  inline void setImdJammingIndicator(bool value);

  inline bool getLteB13TxJammingIndicator();
  inline void setLteB13TxJammingIndicator(bool value);

  inline bool getFreshMeasurementIndicator();
  inline void setFreshMeasurementIndicator(bool value);

  inline bool getMultipathEstimateIsValid();
  inline void setMultipathEstimateIsValid(bool value);

  inline bool getDirectionIsValid();
  inline void setDirectionIsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::MeasurementStatus::Pipeline {
public:
  typedef MeasurementStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::MeasurementReport::Reader {
public:
  typedef MeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::QcomGnss::MeasurementSource getSource() const;

  inline  ::uint32_t getFCount() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint8_t getGlonassCycleNumber() const;

  inline  ::uint16_t getGlonassNumberOfDays() const;

  inline  ::uint32_t getMilliseconds() const;

  inline float getTimeBias() const;

  inline float getClockTimeUncertainty() const;

  inline float getClockFrequencyBias() const;

  inline float getClockFrequencyUncertainty() const;

  inline bool hasSv() const;
  inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader getSv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::MeasurementReport::Builder {
public:
  typedef MeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::QcomGnss::MeasurementSource getSource();
  inline void setSource( ::cereal::QcomGnss::MeasurementSource value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint8_t getGlonassCycleNumber();
  inline void setGlonassCycleNumber( ::uint8_t value);

  inline  ::uint16_t getGlonassNumberOfDays();
  inline void setGlonassNumberOfDays( ::uint16_t value);

  inline  ::uint32_t getMilliseconds();
  inline void setMilliseconds( ::uint32_t value);

  inline float getTimeBias();
  inline void setTimeBias(float value);

  inline float getClockTimeUncertainty();
  inline void setClockTimeUncertainty(float value);

  inline float getClockFrequencyBias();
  inline void setClockFrequencyBias(float value);

  inline float getClockFrequencyUncertainty();
  inline void setClockFrequencyUncertainty(float value);

  inline bool hasSv();
  inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder getSv();
  inline void setSv( ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder initSv(unsigned int size);
  inline void adoptSv(::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>> disownSv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::MeasurementReport::Pipeline {
public:
  typedef MeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::MeasurementReport::SV::Reader {
public:
  typedef SV Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline  ::int8_t getGlonassFrequencyIndex() const;

  inline  ::cereal::QcomGnss::SVObservationState getObservationState() const;

  inline  ::uint8_t getObservations() const;

  inline  ::uint8_t getGoodObservations() const;

  inline  ::uint16_t getGpsParityErrorCount() const;

  inline  ::uint8_t getGlonassHemmingErrorCount() const;

  inline  ::uint8_t getFilterStages() const;

  inline  ::uint16_t getCarrierNoise() const;

  inline  ::int16_t getLatency() const;

  inline  ::uint8_t getPredetectInterval() const;

  inline  ::uint16_t getPostdetections() const;

  inline  ::uint32_t getUnfilteredMeasurementIntegral() const;

  inline float getUnfilteredMeasurementFraction() const;

  inline float getUnfilteredTimeUncertainty() const;

  inline float getUnfilteredSpeed() const;

  inline float getUnfilteredSpeedUncertainty() const;

  inline bool hasMeasurementStatus() const;
  inline  ::cereal::QcomGnss::MeasurementStatus::Reader getMeasurementStatus() const;

  inline  ::uint32_t getMultipathEstimate() const;

  inline float getAzimuth() const;

  inline float getElevation() const;

  inline  ::int32_t getCarrierPhaseCyclesIntegral() const;

  inline  ::uint16_t getCarrierPhaseCyclesFraction() const;

  inline float getFineSpeed() const;

  inline float getFineSpeedUncertainty() const;

  inline  ::uint8_t getCycleSlipCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::MeasurementReport::SV::Builder {
public:
  typedef SV Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::int8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::int8_t value);

  inline  ::cereal::QcomGnss::SVObservationState getObservationState();
  inline void setObservationState( ::cereal::QcomGnss::SVObservationState value);

  inline  ::uint8_t getObservations();
  inline void setObservations( ::uint8_t value);

  inline  ::uint8_t getGoodObservations();
  inline void setGoodObservations( ::uint8_t value);

  inline  ::uint16_t getGpsParityErrorCount();
  inline void setGpsParityErrorCount( ::uint16_t value);

  inline  ::uint8_t getGlonassHemmingErrorCount();
  inline void setGlonassHemmingErrorCount( ::uint8_t value);

  inline  ::uint8_t getFilterStages();
  inline void setFilterStages( ::uint8_t value);

  inline  ::uint16_t getCarrierNoise();
  inline void setCarrierNoise( ::uint16_t value);

  inline  ::int16_t getLatency();
  inline void setLatency( ::int16_t value);

  inline  ::uint8_t getPredetectInterval();
  inline void setPredetectInterval( ::uint8_t value);

  inline  ::uint16_t getPostdetections();
  inline void setPostdetections( ::uint16_t value);

  inline  ::uint32_t getUnfilteredMeasurementIntegral();
  inline void setUnfilteredMeasurementIntegral( ::uint32_t value);

  inline float getUnfilteredMeasurementFraction();
  inline void setUnfilteredMeasurementFraction(float value);

  inline float getUnfilteredTimeUncertainty();
  inline void setUnfilteredTimeUncertainty(float value);

  inline float getUnfilteredSpeed();
  inline void setUnfilteredSpeed(float value);

  inline float getUnfilteredSpeedUncertainty();
  inline void setUnfilteredSpeedUncertainty(float value);

  inline bool hasMeasurementStatus();
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder getMeasurementStatus();
  inline void setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value);
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder initMeasurementStatus();
  inline void adoptMeasurementStatus(::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> disownMeasurementStatus();

  inline  ::uint32_t getMultipathEstimate();
  inline void setMultipathEstimate( ::uint32_t value);

  inline float getAzimuth();
  inline void setAzimuth(float value);

  inline float getElevation();
  inline void setElevation(float value);

  inline  ::int32_t getCarrierPhaseCyclesIntegral();
  inline void setCarrierPhaseCyclesIntegral( ::int32_t value);

  inline  ::uint16_t getCarrierPhaseCyclesFraction();
  inline void setCarrierPhaseCyclesFraction( ::uint16_t value);

  inline float getFineSpeed();
  inline void setFineSpeed(float value);

  inline float getFineSpeedUncertainty();
  inline void setFineSpeedUncertainty(float value);

  inline  ::uint8_t getCycleSlipCount();
  inline void setCycleSlipCount( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::MeasurementReport::SV::Pipeline {
public:
  typedef SV Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline getMeasurementStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::ClockReport::Reader {
public:
  typedef ClockReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHasFCount() const;

  inline  ::uint32_t getFCount() const;

  inline bool getHasGpsWeek() const;

  inline  ::uint16_t getGpsWeek() const;

  inline bool getHasGpsMilliseconds() const;

  inline  ::uint32_t getGpsMilliseconds() const;

  inline float getGpsTimeBias() const;

  inline float getGpsClockTimeUncertainty() const;

  inline  ::uint8_t getGpsClockSource() const;

  inline bool getHasGlonassYear() const;

  inline  ::uint8_t getGlonassYear() const;

  inline bool getHasGlonassDay() const;

  inline  ::uint16_t getGlonassDay() const;

  inline bool getHasGlonassMilliseconds() const;

  inline  ::uint32_t getGlonassMilliseconds() const;

  inline float getGlonassTimeBias() const;

  inline float getGlonassClockTimeUncertainty() const;

  inline  ::uint8_t getGlonassClockSource() const;

  inline  ::uint16_t getBdsWeek() const;

  inline  ::uint32_t getBdsMilliseconds() const;

  inline float getBdsTimeBias() const;

  inline float getBdsClockTimeUncertainty() const;

  inline  ::uint8_t getBdsClockSource() const;

  inline  ::uint16_t getGalWeek() const;

  inline  ::uint32_t getGalMilliseconds() const;

  inline float getGalTimeBias() const;

  inline float getGalClockTimeUncertainty() const;

  inline  ::uint8_t getGalClockSource() const;

  inline float getClockFrequencyBias() const;

  inline float getClockFrequencyUncertainty() const;

  inline  ::uint8_t getFrequencySource() const;

  inline  ::uint8_t getGpsLeapSeconds() const;

  inline  ::uint8_t getGpsLeapSecondsUncertainty() const;

  inline  ::uint8_t getGpsLeapSecondsSource() const;

  inline float getGpsToGlonassTimeBiasMilliseconds() const;

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty() const;

  inline float getGpsToBdsTimeBiasMilliseconds() const;

  inline float getGpsToBdsTimeBiasMillisecondsUncertainty() const;

  inline float getBdsToGloTimeBiasMilliseconds() const;

  inline float getBdsToGloTimeBiasMillisecondsUncertainty() const;

  inline float getGpsToGalTimeBiasMilliseconds() const;

  inline float getGpsToGalTimeBiasMillisecondsUncertainty() const;

  inline float getGalToGloTimeBiasMilliseconds() const;

  inline float getGalToGloTimeBiasMillisecondsUncertainty() const;

  inline float getGalToBdsTimeBiasMilliseconds() const;

  inline float getGalToBdsTimeBiasMillisecondsUncertainty() const;

  inline bool getHasRtcTime() const;

  inline  ::uint32_t getSystemRtcTime() const;

  inline  ::uint32_t getFCountOffset() const;

  inline  ::uint32_t getLpmRtcCount() const;

  inline  ::uint32_t getClockResets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::ClockReport::Builder {
public:
  typedef ClockReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHasFCount();
  inline void setHasFCount(bool value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline bool getHasGpsWeek();
  inline void setHasGpsWeek(bool value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline bool getHasGpsMilliseconds();
  inline void setHasGpsMilliseconds(bool value);

  inline  ::uint32_t getGpsMilliseconds();
  inline void setGpsMilliseconds( ::uint32_t value);

  inline float getGpsTimeBias();
  inline void setGpsTimeBias(float value);

  inline float getGpsClockTimeUncertainty();
  inline void setGpsClockTimeUncertainty(float value);

  inline  ::uint8_t getGpsClockSource();
  inline void setGpsClockSource( ::uint8_t value);

  inline bool getHasGlonassYear();
  inline void setHasGlonassYear(bool value);

  inline  ::uint8_t getGlonassYear();
  inline void setGlonassYear( ::uint8_t value);

  inline bool getHasGlonassDay();
  inline void setHasGlonassDay(bool value);

  inline  ::uint16_t getGlonassDay();
  inline void setGlonassDay( ::uint16_t value);

  inline bool getHasGlonassMilliseconds();
  inline void setHasGlonassMilliseconds(bool value);

  inline  ::uint32_t getGlonassMilliseconds();
  inline void setGlonassMilliseconds( ::uint32_t value);

  inline float getGlonassTimeBias();
  inline void setGlonassTimeBias(float value);

  inline float getGlonassClockTimeUncertainty();
  inline void setGlonassClockTimeUncertainty(float value);

  inline  ::uint8_t getGlonassClockSource();
  inline void setGlonassClockSource( ::uint8_t value);

  inline  ::uint16_t getBdsWeek();
  inline void setBdsWeek( ::uint16_t value);

  inline  ::uint32_t getBdsMilliseconds();
  inline void setBdsMilliseconds( ::uint32_t value);

  inline float getBdsTimeBias();
  inline void setBdsTimeBias(float value);

  inline float getBdsClockTimeUncertainty();
  inline void setBdsClockTimeUncertainty(float value);

  inline  ::uint8_t getBdsClockSource();
  inline void setBdsClockSource( ::uint8_t value);

  inline  ::uint16_t getGalWeek();
  inline void setGalWeek( ::uint16_t value);

  inline  ::uint32_t getGalMilliseconds();
  inline void setGalMilliseconds( ::uint32_t value);

  inline float getGalTimeBias();
  inline void setGalTimeBias(float value);

  inline float getGalClockTimeUncertainty();
  inline void setGalClockTimeUncertainty(float value);

  inline  ::uint8_t getGalClockSource();
  inline void setGalClockSource( ::uint8_t value);

  inline float getClockFrequencyBias();
  inline void setClockFrequencyBias(float value);

  inline float getClockFrequencyUncertainty();
  inline void setClockFrequencyUncertainty(float value);

  inline  ::uint8_t getFrequencySource();
  inline void setFrequencySource( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSeconds();
  inline void setGpsLeapSeconds( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSecondsUncertainty();
  inline void setGpsLeapSecondsUncertainty( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSecondsSource();
  inline void setGpsLeapSecondsSource( ::uint8_t value);

  inline float getGpsToGlonassTimeBiasMilliseconds();
  inline void setGpsToGlonassTimeBiasMilliseconds(float value);

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty();
  inline void setGpsToGlonassTimeBiasMillisecondsUncertainty(float value);

  inline float getGpsToBdsTimeBiasMilliseconds();
  inline void setGpsToBdsTimeBiasMilliseconds(float value);

  inline float getGpsToBdsTimeBiasMillisecondsUncertainty();
  inline void setGpsToBdsTimeBiasMillisecondsUncertainty(float value);

  inline float getBdsToGloTimeBiasMilliseconds();
  inline void setBdsToGloTimeBiasMilliseconds(float value);

  inline float getBdsToGloTimeBiasMillisecondsUncertainty();
  inline void setBdsToGloTimeBiasMillisecondsUncertainty(float value);

  inline float getGpsToGalTimeBiasMilliseconds();
  inline void setGpsToGalTimeBiasMilliseconds(float value);

  inline float getGpsToGalTimeBiasMillisecondsUncertainty();
  inline void setGpsToGalTimeBiasMillisecondsUncertainty(float value);

  inline float getGalToGloTimeBiasMilliseconds();
  inline void setGalToGloTimeBiasMilliseconds(float value);

  inline float getGalToGloTimeBiasMillisecondsUncertainty();
  inline void setGalToGloTimeBiasMillisecondsUncertainty(float value);

  inline float getGalToBdsTimeBiasMilliseconds();
  inline void setGalToBdsTimeBiasMilliseconds(float value);

  inline float getGalToBdsTimeBiasMillisecondsUncertainty();
  inline void setGalToBdsTimeBiasMillisecondsUncertainty(float value);

  inline bool getHasRtcTime();
  inline void setHasRtcTime(bool value);

  inline  ::uint32_t getSystemRtcTime();
  inline void setSystemRtcTime( ::uint32_t value);

  inline  ::uint32_t getFCountOffset();
  inline void setFCountOffset( ::uint32_t value);

  inline  ::uint32_t getLpmRtcCount();
  inline void setLpmRtcCount( ::uint32_t value);

  inline  ::uint32_t getClockResets();
  inline void setClockResets( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::ClockReport::Pipeline {
public:
  typedef ClockReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::DrMeasurementReport::Reader {
public:
  typedef DrMeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getReason() const;

  inline  ::uint8_t getSeqNum() const;

  inline  ::uint8_t getSeqMax() const;

  inline  ::uint16_t getRfLoss() const;

  inline bool getSystemRtcValid() const;

  inline  ::uint32_t getFCount() const;

  inline  ::uint32_t getClockResets() const;

  inline  ::uint64_t getSystemRtcTime() const;

  inline  ::uint8_t getGpsLeapSeconds() const;

  inline  ::uint8_t getGpsLeapSecondsUncertainty() const;

  inline float getGpsToGlonassTimeBiasMilliseconds() const;

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint32_t getGpsMilliseconds() const;

  inline  ::uint32_t getGpsTimeBiasMs() const;

  inline  ::uint32_t getGpsClockTimeUncertaintyMs() const;

  inline  ::uint8_t getGpsClockSource() const;

  inline  ::uint8_t getGlonassClockSource() const;

  inline  ::uint8_t getGlonassYear() const;

  inline  ::uint16_t getGlonassDay() const;

  inline  ::uint32_t getGlonassMilliseconds() const;

  inline float getGlonassTimeBias() const;

  inline float getGlonassClockTimeUncertainty() const;

  inline float getClockFrequencyBias() const;

  inline float getClockFrequencyUncertainty() const;

  inline  ::uint8_t getFrequencySource() const;

  inline  ::cereal::QcomGnss::MeasurementSource getSource() const;

  inline bool hasSv() const;
  inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader getSv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::DrMeasurementReport::Builder {
public:
  typedef DrMeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getReason();
  inline void setReason( ::uint8_t value);

  inline  ::uint8_t getSeqNum();
  inline void setSeqNum( ::uint8_t value);

  inline  ::uint8_t getSeqMax();
  inline void setSeqMax( ::uint8_t value);

  inline  ::uint16_t getRfLoss();
  inline void setRfLoss( ::uint16_t value);

  inline bool getSystemRtcValid();
  inline void setSystemRtcValid(bool value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline  ::uint32_t getClockResets();
  inline void setClockResets( ::uint32_t value);

  inline  ::uint64_t getSystemRtcTime();
  inline void setSystemRtcTime( ::uint64_t value);

  inline  ::uint8_t getGpsLeapSeconds();
  inline void setGpsLeapSeconds( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSecondsUncertainty();
  inline void setGpsLeapSecondsUncertainty( ::uint8_t value);

  inline float getGpsToGlonassTimeBiasMilliseconds();
  inline void setGpsToGlonassTimeBiasMilliseconds(float value);

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty();
  inline void setGpsToGlonassTimeBiasMillisecondsUncertainty(float value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint32_t getGpsMilliseconds();
  inline void setGpsMilliseconds( ::uint32_t value);

  inline  ::uint32_t getGpsTimeBiasMs();
  inline void setGpsTimeBiasMs( ::uint32_t value);

  inline  ::uint32_t getGpsClockTimeUncertaintyMs();
  inline void setGpsClockTimeUncertaintyMs( ::uint32_t value);

  inline  ::uint8_t getGpsClockSource();
  inline void setGpsClockSource( ::uint8_t value);

  inline  ::uint8_t getGlonassClockSource();
  inline void setGlonassClockSource( ::uint8_t value);

  inline  ::uint8_t getGlonassYear();
  inline void setGlonassYear( ::uint8_t value);

  inline  ::uint16_t getGlonassDay();
  inline void setGlonassDay( ::uint16_t value);

  inline  ::uint32_t getGlonassMilliseconds();
  inline void setGlonassMilliseconds( ::uint32_t value);

  inline float getGlonassTimeBias();
  inline void setGlonassTimeBias(float value);

  inline float getGlonassClockTimeUncertainty();
  inline void setGlonassClockTimeUncertainty(float value);

  inline float getClockFrequencyBias();
  inline void setClockFrequencyBias(float value);

  inline float getClockFrequencyUncertainty();
  inline void setClockFrequencyUncertainty(float value);

  inline  ::uint8_t getFrequencySource();
  inline void setFrequencySource( ::uint8_t value);

  inline  ::cereal::QcomGnss::MeasurementSource getSource();
  inline void setSource( ::cereal::QcomGnss::MeasurementSource value);

  inline bool hasSv();
  inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder getSv();
  inline void setSv( ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder initSv(unsigned int size);
  inline void adoptSv(::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>> disownSv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::DrMeasurementReport::Pipeline {
public:
  typedef DrMeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::DrMeasurementReport::SV::Reader {
public:
  typedef SV Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline  ::int8_t getGlonassFrequencyIndex() const;

  inline  ::cereal::QcomGnss::SVObservationState getObservationState() const;

  inline  ::uint8_t getObservations() const;

  inline  ::uint8_t getGoodObservations() const;

  inline  ::uint8_t getFilterStages() const;

  inline  ::uint8_t getPredetectInterval() const;

  inline  ::uint8_t getCycleSlipCount() const;

  inline  ::uint16_t getPostdetections() const;

  inline bool hasMeasurementStatus() const;
  inline  ::cereal::QcomGnss::MeasurementStatus::Reader getMeasurementStatus() const;

  inline  ::uint16_t getCarrierNoise() const;

  inline  ::uint16_t getRfLoss() const;

  inline  ::int16_t getLatency() const;

  inline float getFilteredMeasurementFraction() const;

  inline  ::uint32_t getFilteredMeasurementIntegral() const;

  inline float getFilteredTimeUncertainty() const;

  inline float getFilteredSpeed() const;

  inline float getFilteredSpeedUncertainty() const;

  inline float getUnfilteredMeasurementFraction() const;

  inline  ::uint32_t getUnfilteredMeasurementIntegral() const;

  inline float getUnfilteredTimeUncertainty() const;

  inline float getUnfilteredSpeed() const;

  inline float getUnfilteredSpeedUncertainty() const;

  inline  ::uint32_t getMultipathEstimate() const;

  inline float getAzimuth() const;

  inline float getElevation() const;

  inline float getDopplerAcceleration() const;

  inline float getFineSpeed() const;

  inline float getFineSpeedUncertainty() const;

  inline double getCarrierPhase() const;

  inline  ::uint32_t getFCount() const;

  inline  ::uint16_t getParityErrorCount() const;

  inline bool getGoodParity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::DrMeasurementReport::SV::Builder {
public:
  typedef SV Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::int8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::int8_t value);

  inline  ::cereal::QcomGnss::SVObservationState getObservationState();
  inline void setObservationState( ::cereal::QcomGnss::SVObservationState value);

  inline  ::uint8_t getObservations();
  inline void setObservations( ::uint8_t value);

  inline  ::uint8_t getGoodObservations();
  inline void setGoodObservations( ::uint8_t value);

  inline  ::uint8_t getFilterStages();
  inline void setFilterStages( ::uint8_t value);

  inline  ::uint8_t getPredetectInterval();
  inline void setPredetectInterval( ::uint8_t value);

  inline  ::uint8_t getCycleSlipCount();
  inline void setCycleSlipCount( ::uint8_t value);

  inline  ::uint16_t getPostdetections();
  inline void setPostdetections( ::uint16_t value);

  inline bool hasMeasurementStatus();
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder getMeasurementStatus();
  inline void setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value);
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder initMeasurementStatus();
  inline void adoptMeasurementStatus(::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> disownMeasurementStatus();

  inline  ::uint16_t getCarrierNoise();
  inline void setCarrierNoise( ::uint16_t value);

  inline  ::uint16_t getRfLoss();
  inline void setRfLoss( ::uint16_t value);

  inline  ::int16_t getLatency();
  inline void setLatency( ::int16_t value);

  inline float getFilteredMeasurementFraction();
  inline void setFilteredMeasurementFraction(float value);

  inline  ::uint32_t getFilteredMeasurementIntegral();
  inline void setFilteredMeasurementIntegral( ::uint32_t value);

  inline float getFilteredTimeUncertainty();
  inline void setFilteredTimeUncertainty(float value);

  inline float getFilteredSpeed();
  inline void setFilteredSpeed(float value);

  inline float getFilteredSpeedUncertainty();
  inline void setFilteredSpeedUncertainty(float value);

  inline float getUnfilteredMeasurementFraction();
  inline void setUnfilteredMeasurementFraction(float value);

  inline  ::uint32_t getUnfilteredMeasurementIntegral();
  inline void setUnfilteredMeasurementIntegral( ::uint32_t value);

  inline float getUnfilteredTimeUncertainty();
  inline void setUnfilteredTimeUncertainty(float value);

  inline float getUnfilteredSpeed();
  inline void setUnfilteredSpeed(float value);

  inline float getUnfilteredSpeedUncertainty();
  inline void setUnfilteredSpeedUncertainty(float value);

  inline  ::uint32_t getMultipathEstimate();
  inline void setMultipathEstimate( ::uint32_t value);

  inline float getAzimuth();
  inline void setAzimuth(float value);

  inline float getElevation();
  inline void setElevation(float value);

  inline float getDopplerAcceleration();
  inline void setDopplerAcceleration(float value);

  inline float getFineSpeed();
  inline void setFineSpeed(float value);

  inline float getFineSpeedUncertainty();
  inline void setFineSpeedUncertainty(float value);

  inline double getCarrierPhase();
  inline void setCarrierPhase(double value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline  ::uint16_t getParityErrorCount();
  inline void setParityErrorCount( ::uint16_t value);

  inline bool getGoodParity();
  inline void setGoodParity(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::DrMeasurementReport::SV::Pipeline {
public:
  typedef SV Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline getMeasurementStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::DrSvPolyReport::Reader {
public:
  typedef DrSvPolyReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId() const;

  inline  ::int8_t getFrequencyIndex() const;

  inline bool getHasPosition() const;

  inline bool getHasIono() const;

  inline bool getHasTropo() const;

  inline bool getHasElevation() const;

  inline bool getPolyFromXtra() const;

  inline bool getHasSbasIono() const;

  inline  ::uint16_t getIode() const;

  inline double getT0() const;

  inline bool hasXyz0() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getXyz0() const;

  inline bool hasXyzN() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getXyzN() const;

  inline bool hasOther() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOther() const;

  inline float getPositionUncertainty() const;

  inline float getIonoDelay() const;

  inline float getIonoDot() const;

  inline float getSbasIonoDelay() const;

  inline float getSbasIonoDot() const;

  inline float getTropoDelay() const;

  inline float getElevation() const;

  inline float getElevationDot() const;

  inline float getElevationUncertainty() const;

  inline bool hasVelocityCoeff() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getVelocityCoeff() const;

  inline  ::uint16_t getGpsWeek() const;

  inline double getGpsTow() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::DrSvPolyReport::Builder {
public:
  typedef DrSvPolyReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId();
  inline void setSvId( ::uint16_t value);

  inline  ::int8_t getFrequencyIndex();
  inline void setFrequencyIndex( ::int8_t value);

  inline bool getHasPosition();
  inline void setHasPosition(bool value);

  inline bool getHasIono();
  inline void setHasIono(bool value);

  inline bool getHasTropo();
  inline void setHasTropo(bool value);

  inline bool getHasElevation();
  inline void setHasElevation(bool value);

  inline bool getPolyFromXtra();
  inline void setPolyFromXtra(bool value);

  inline bool getHasSbasIono();
  inline void setHasSbasIono(bool value);

  inline  ::uint16_t getIode();
  inline void setIode( ::uint16_t value);

  inline double getT0();
  inline void setT0(double value);

  inline bool hasXyz0();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getXyz0();
  inline void setXyz0( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXyz0(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initXyz0(unsigned int size);
  inline void adoptXyz0(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownXyz0();

  inline bool hasXyzN();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getXyzN();
  inline void setXyzN( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXyzN(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initXyzN(unsigned int size);
  inline void adoptXyzN(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownXyzN();

  inline bool hasOther();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOther();
  inline void setOther( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOther(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOther(unsigned int size);
  inline void adoptOther(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOther();

  inline float getPositionUncertainty();
  inline void setPositionUncertainty(float value);

  inline float getIonoDelay();
  inline void setIonoDelay(float value);

  inline float getIonoDot();
  inline void setIonoDot(float value);

  inline float getSbasIonoDelay();
  inline void setSbasIonoDelay(float value);

  inline float getSbasIonoDot();
  inline void setSbasIonoDot(float value);

  inline float getTropoDelay();
  inline void setTropoDelay(float value);

  inline float getElevation();
  inline void setElevation(float value);

  inline float getElevationDot();
  inline void setElevationDot(float value);

  inline float getElevationUncertainty();
  inline void setElevationUncertainty(float value);

  inline bool hasVelocityCoeff();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getVelocityCoeff();
  inline void setVelocityCoeff( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVelocityCoeff(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initVelocityCoeff(unsigned int size);
  inline void adoptVelocityCoeff(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownVelocityCoeff();

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline double getGpsTow();
  inline void setGpsTow(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::DrSvPolyReport::Pipeline {
public:
  typedef DrSvPolyReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clocks::Reader {
public:
  typedef Clocks Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBootTimeNanosDEPRECATED() const;

  inline  ::uint64_t getMonotonicNanosDEPRECATED() const;

  inline  ::uint64_t getMonotonicRawNanosDEPRECATD() const;

  inline  ::uint64_t getWallTimeNanos() const;

  inline  ::uint64_t getModemUptimeMillisDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clocks::Builder {
public:
  typedef Clocks Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBootTimeNanosDEPRECATED();
  inline void setBootTimeNanosDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getMonotonicNanosDEPRECATED();
  inline void setMonotonicNanosDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getMonotonicRawNanosDEPRECATD();
  inline void setMonotonicRawNanosDEPRECATD( ::uint64_t value);

  inline  ::uint64_t getWallTimeNanos();
  inline void setWallTimeNanos( ::uint64_t value);

  inline  ::uint64_t getModemUptimeMillisDEPRECATED();
  inline void setModemUptimeMillisDEPRECATED( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clocks::Pipeline {
public:
  typedef Clocks Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveMpcData::Reader {
public:
  typedef LiveMpcData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasPsi() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPsi() const;

  inline bool hasCurvature() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCurvature() const;

  inline  ::uint32_t getQpIterations() const;

  inline  ::uint64_t getCalculationTime() const;

  inline double getCost() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveMpcData::Builder {
public:
  typedef LiveMpcData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasPsi();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPsi();
  inline void setPsi( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPsi(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPsi(unsigned int size);
  inline void adoptPsi(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPsi();

  inline bool hasCurvature();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCurvature();
  inline void setCurvature( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCurvature(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCurvature(unsigned int size);
  inline void adoptCurvature(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCurvature();

  inline  ::uint32_t getQpIterations();
  inline void setQpIterations( ::uint32_t value);

  inline  ::uint64_t getCalculationTime();
  inline void setCalculationTime( ::uint64_t value);

  inline double getCost();
  inline void setCost(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveMpcData::Pipeline {
public:
  typedef LiveMpcData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLongitudinalMpcData::Reader {
public:
  typedef LiveLongitudinalMpcData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasXEgo() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXEgo() const;

  inline bool hasVEgo() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVEgo() const;

  inline bool hasAEgo() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAEgo() const;

  inline bool hasXLead() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXLead() const;

  inline bool hasVLead() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVLead() const;

  inline bool hasALead() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getALead() const;

  inline float getALeadTau() const;

  inline  ::uint32_t getQpIterations() const;

  inline  ::uint32_t getMpcId() const;

  inline  ::uint64_t getCalculationTime() const;

  inline double getCost() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLongitudinalMpcData::Builder {
public:
  typedef LiveLongitudinalMpcData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasXEgo();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXEgo();
  inline void setXEgo( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXEgo(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXEgo(unsigned int size);
  inline void adoptXEgo(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXEgo();

  inline bool hasVEgo();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVEgo();
  inline void setVEgo( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVEgo(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVEgo(unsigned int size);
  inline void adoptVEgo(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVEgo();

  inline bool hasAEgo();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAEgo();
  inline void setAEgo( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAEgo(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAEgo(unsigned int size);
  inline void adoptAEgo(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAEgo();

  inline bool hasXLead();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXLead();
  inline void setXLead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXLead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXLead(unsigned int size);
  inline void adoptXLead(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXLead();

  inline bool hasVLead();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVLead();
  inline void setVLead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVLead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVLead(unsigned int size);
  inline void adoptVLead(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVLead();

  inline bool hasALead();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getALead();
  inline void setALead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setALead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initALead(unsigned int size);
  inline void adoptALead(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownALead();

  inline float getALeadTau();
  inline void setALeadTau(float value);

  inline  ::uint32_t getQpIterations();
  inline void setQpIterations( ::uint32_t value);

  inline  ::uint32_t getMpcId();
  inline void setMpcId( ::uint32_t value);

  inline  ::uint64_t getCalculationTime();
  inline void setCalculationTime( ::uint64_t value);

  inline double getCost();
  inline void setCost(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLongitudinalMpcData::Pipeline {
public:
  typedef LiveLongitudinalMpcData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Joystick::Reader {
public:
  typedef Joystick Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAxes() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAxes() const;

  inline bool hasButtons() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getButtons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Joystick::Builder {
public:
  typedef Joystick Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAxes();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAxes();
  inline void setAxes( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAxes(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAxes(unsigned int size);
  inline void adoptAxes(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAxes();

  inline bool hasButtons();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getButtons();
  inline void setButtons( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setButtons(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initButtons(unsigned int size);
  inline void adoptButtons(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownButtons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Joystick::Pipeline {
public:
  typedef Joystick Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverStateV2::Reader {
public:
  typedef DriverStateV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline float getModelExecutionTime() const;

  inline float getDspExecutionTimeDEPRECATED() const;

  inline bool hasRawPredictions() const;
  inline  ::capnp::Data::Reader getRawPredictions() const;

  inline float getPoorVisionProb() const;

  inline float getWheelOnRightProb() const;

  inline bool hasLeftDriverData() const;
  inline  ::cereal::DriverStateV2::DriverData::Reader getLeftDriverData() const;

  inline bool hasRightDriverData() const;
  inline  ::cereal::DriverStateV2::DriverData::Reader getRightDriverData() const;

  inline float getGpuExecutionTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverStateV2::Builder {
public:
  typedef DriverStateV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline float getDspExecutionTimeDEPRECATED();
  inline void setDspExecutionTimeDEPRECATED(float value);

  inline bool hasRawPredictions();
  inline  ::capnp::Data::Builder getRawPredictions();
  inline void setRawPredictions( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawPredictions(unsigned int size);
  inline void adoptRawPredictions(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawPredictions();

  inline float getPoorVisionProb();
  inline void setPoorVisionProb(float value);

  inline float getWheelOnRightProb();
  inline void setWheelOnRightProb(float value);

  inline bool hasLeftDriverData();
  inline  ::cereal::DriverStateV2::DriverData::Builder getLeftDriverData();
  inline void setLeftDriverData( ::cereal::DriverStateV2::DriverData::Reader value);
  inline  ::cereal::DriverStateV2::DriverData::Builder initLeftDriverData();
  inline void adoptLeftDriverData(::capnp::Orphan< ::cereal::DriverStateV2::DriverData>&& value);
  inline ::capnp::Orphan< ::cereal::DriverStateV2::DriverData> disownLeftDriverData();

  inline bool hasRightDriverData();
  inline  ::cereal::DriverStateV2::DriverData::Builder getRightDriverData();
  inline void setRightDriverData( ::cereal::DriverStateV2::DriverData::Reader value);
  inline  ::cereal::DriverStateV2::DriverData::Builder initRightDriverData();
  inline void adoptRightDriverData(::capnp::Orphan< ::cereal::DriverStateV2::DriverData>&& value);
  inline ::capnp::Orphan< ::cereal::DriverStateV2::DriverData> disownRightDriverData();

  inline float getGpuExecutionTime();
  inline void setGpuExecutionTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverStateV2::Pipeline {
public:
  typedef DriverStateV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::DriverStateV2::DriverData::Pipeline getLeftDriverData();
  inline  ::cereal::DriverStateV2::DriverData::Pipeline getRightDriverData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverStateV2::DriverData::Reader {
public:
  typedef DriverData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFaceOrientation() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFaceOrientation() const;

  inline bool hasFaceOrientationStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFaceOrientationStd() const;

  inline bool hasFacePosition() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFacePosition() const;

  inline bool hasFacePositionStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFacePositionStd() const;

  inline float getFaceProb() const;

  inline float getLeftEyeProb() const;

  inline float getRightEyeProb() const;

  inline float getLeftBlinkProb() const;

  inline float getRightBlinkProb() const;

  inline float getSunglassesProb() const;

  inline float getOccludedProb() const;

  inline bool hasReadyProb() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getReadyProb() const;

  inline bool hasNotReadyProb() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNotReadyProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverStateV2::DriverData::Builder {
public:
  typedef DriverData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFaceOrientation();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFaceOrientation();
  inline void setFaceOrientation( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFaceOrientation(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFaceOrientation(unsigned int size);
  inline void adoptFaceOrientation(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFaceOrientation();

  inline bool hasFaceOrientationStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFaceOrientationStd();
  inline void setFaceOrientationStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFaceOrientationStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFaceOrientationStd(unsigned int size);
  inline void adoptFaceOrientationStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFaceOrientationStd();

  inline bool hasFacePosition();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFacePosition();
  inline void setFacePosition( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFacePosition(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFacePosition(unsigned int size);
  inline void adoptFacePosition(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFacePosition();

  inline bool hasFacePositionStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFacePositionStd();
  inline void setFacePositionStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFacePositionStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFacePositionStd(unsigned int size);
  inline void adoptFacePositionStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFacePositionStd();

  inline float getFaceProb();
  inline void setFaceProb(float value);

  inline float getLeftEyeProb();
  inline void setLeftEyeProb(float value);

  inline float getRightEyeProb();
  inline void setRightEyeProb(float value);

  inline float getLeftBlinkProb();
  inline void setLeftBlinkProb(float value);

  inline float getRightBlinkProb();
  inline void setRightBlinkProb(float value);

  inline float getSunglassesProb();
  inline void setSunglassesProb(float value);

  inline float getOccludedProb();
  inline void setOccludedProb(float value);

  inline bool hasReadyProb();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getReadyProb();
  inline void setReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReadyProb(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initReadyProb(unsigned int size);
  inline void adoptReadyProb(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownReadyProb();

  inline bool hasNotReadyProb();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNotReadyProb();
  inline void setNotReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNotReadyProb(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNotReadyProb(unsigned int size);
  inline void adoptNotReadyProb(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNotReadyProb();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverStateV2::DriverData::Pipeline {
public:
  typedef DriverData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverStateDEPRECATED::Reader {
public:
  typedef DriverStateDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasDescriptorDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDescriptorDEPRECATED() const;

  inline float getStdDEPRECATED() const;

  inline bool hasFaceOrientation() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFaceOrientation() const;

  inline bool hasFacePosition() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFacePosition() const;

  inline float getFaceProb() const;

  inline float getLeftEyeProb() const;

  inline float getRightEyeProb() const;

  inline float getLeftBlinkProb() const;

  inline float getRightBlinkProb() const;

  inline float getIrPwrDEPRECATED() const;

  inline bool hasFaceOrientationStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFaceOrientationStd() const;

  inline bool hasFacePositionStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFacePositionStd() const;

  inline float getSunglassesProb() const;

  inline float getModelExecutionTime() const;

  inline bool hasRawPredictions() const;
  inline  ::capnp::Data::Reader getRawPredictions() const;

  inline float getDspExecutionTime() const;

  inline float getPoorVision() const;

  inline float getPartialFace() const;

  inline float getDistractedPose() const;

  inline float getDistractedEyes() const;

  inline float getEyesOnRoad() const;

  inline float getPhoneUse() const;

  inline float getOccludedProb() const;

  inline bool hasReadyProb() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getReadyProb() const;

  inline bool hasNotReadyProb() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNotReadyProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverStateDEPRECATED::Builder {
public:
  typedef DriverStateDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasDescriptorDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDescriptorDEPRECATED();
  inline void setDescriptorDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDescriptorDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDescriptorDEPRECATED(unsigned int size);
  inline void adoptDescriptorDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDescriptorDEPRECATED();

  inline float getStdDEPRECATED();
  inline void setStdDEPRECATED(float value);

  inline bool hasFaceOrientation();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFaceOrientation();
  inline void setFaceOrientation( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFaceOrientation(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFaceOrientation(unsigned int size);
  inline void adoptFaceOrientation(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFaceOrientation();

  inline bool hasFacePosition();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFacePosition();
  inline void setFacePosition( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFacePosition(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFacePosition(unsigned int size);
  inline void adoptFacePosition(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFacePosition();

  inline float getFaceProb();
  inline void setFaceProb(float value);

  inline float getLeftEyeProb();
  inline void setLeftEyeProb(float value);

  inline float getRightEyeProb();
  inline void setRightEyeProb(float value);

  inline float getLeftBlinkProb();
  inline void setLeftBlinkProb(float value);

  inline float getRightBlinkProb();
  inline void setRightBlinkProb(float value);

  inline float getIrPwrDEPRECATED();
  inline void setIrPwrDEPRECATED(float value);

  inline bool hasFaceOrientationStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFaceOrientationStd();
  inline void setFaceOrientationStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFaceOrientationStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFaceOrientationStd(unsigned int size);
  inline void adoptFaceOrientationStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFaceOrientationStd();

  inline bool hasFacePositionStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFacePositionStd();
  inline void setFacePositionStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFacePositionStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFacePositionStd(unsigned int size);
  inline void adoptFacePositionStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFacePositionStd();

  inline float getSunglassesProb();
  inline void setSunglassesProb(float value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline bool hasRawPredictions();
  inline  ::capnp::Data::Builder getRawPredictions();
  inline void setRawPredictions( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawPredictions(unsigned int size);
  inline void adoptRawPredictions(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawPredictions();

  inline float getDspExecutionTime();
  inline void setDspExecutionTime(float value);

  inline float getPoorVision();
  inline void setPoorVision(float value);

  inline float getPartialFace();
  inline void setPartialFace(float value);

  inline float getDistractedPose();
  inline void setDistractedPose(float value);

  inline float getDistractedEyes();
  inline void setDistractedEyes(float value);

  inline float getEyesOnRoad();
  inline void setEyesOnRoad(float value);

  inline float getPhoneUse();
  inline void setPhoneUse(float value);

  inline float getOccludedProb();
  inline void setOccludedProb(float value);

  inline bool hasReadyProb();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getReadyProb();
  inline void setReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReadyProb(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initReadyProb(unsigned int size);
  inline void adoptReadyProb(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownReadyProb();

  inline bool hasNotReadyProb();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNotReadyProb();
  inline void setNotReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNotReadyProb(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNotReadyProb(unsigned int size);
  inline void adoptNotReadyProb(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNotReadyProb();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverStateDEPRECATED::Pipeline {
public:
  typedef DriverStateDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverMonitoringState::Reader {
public:
  typedef DriverMonitoringState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getEventsDEPRECATED() const;

  inline bool getFaceDetected() const;

  inline bool getIsDistracted() const;

  inline float getAwarenessStatus() const;

  inline bool getIsRHD() const;

  inline bool getRhdCheckedDEPRECATED() const;

  inline float getPosePitchOffset() const;

  inline  ::uint32_t getPosePitchValidCount() const;

  inline float getPoseYawOffset() const;

  inline  ::uint32_t getPoseYawValidCount() const;

  inline float getStepChange() const;

  inline float getAwarenessActive() const;

  inline float getAwarenessPassive() const;

  inline bool getIsLowStd() const;

  inline  ::uint32_t getHiStdCount() const;

  inline bool getIsPreviewDEPRECATED() const;

  inline bool getIsActiveMode() const;

  inline  ::uint32_t getDistractedType() const;

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader getEvents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverMonitoringState::Builder {
public:
  typedef DriverMonitoringState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getEventsDEPRECATED();
  inline void setEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initEventsDEPRECATED(unsigned int size);
  inline void adoptEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> disownEventsDEPRECATED();

  inline bool getFaceDetected();
  inline void setFaceDetected(bool value);

  inline bool getIsDistracted();
  inline void setIsDistracted(bool value);

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

  inline bool getIsRHD();
  inline void setIsRHD(bool value);

  inline bool getRhdCheckedDEPRECATED();
  inline void setRhdCheckedDEPRECATED(bool value);

  inline float getPosePitchOffset();
  inline void setPosePitchOffset(float value);

  inline  ::uint32_t getPosePitchValidCount();
  inline void setPosePitchValidCount( ::uint32_t value);

  inline float getPoseYawOffset();
  inline void setPoseYawOffset(float value);

  inline  ::uint32_t getPoseYawValidCount();
  inline void setPoseYawValidCount( ::uint32_t value);

  inline float getStepChange();
  inline void setStepChange(float value);

  inline float getAwarenessActive();
  inline void setAwarenessActive(float value);

  inline float getAwarenessPassive();
  inline void setAwarenessPassive(float value);

  inline bool getIsLowStd();
  inline void setIsLowStd(bool value);

  inline  ::uint32_t getHiStdCount();
  inline void setHiStdCount( ::uint32_t value);

  inline bool getIsPreviewDEPRECATED();
  inline void setIsPreviewDEPRECATED(bool value);

  inline bool getIsActiveMode();
  inline void setIsActiveMode(bool value);

  inline  ::uint32_t getDistractedType();
  inline void setDistractedType( ::uint32_t value);

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>> disownEvents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverMonitoringState::Pipeline {
public:
  typedef DriverMonitoringState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Boot::Reader {
public:
  typedef Boot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getWallTimeNanos() const;

  inline bool hasLastKmsgDEPRECATED() const;
  inline  ::capnp::Data::Reader getLastKmsgDEPRECATED() const;

  inline bool hasLastPmsgDEPRECATED() const;
  inline  ::capnp::Data::Reader getLastPmsgDEPRECATED() const;

  inline bool hasLaunchLog() const;
  inline  ::capnp::Text::Reader getLaunchLog() const;

  inline bool hasPstore() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader getPstore() const;

  inline bool hasCommands() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader getCommands() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Boot::Builder {
public:
  typedef Boot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getWallTimeNanos();
  inline void setWallTimeNanos( ::uint64_t value);

  inline bool hasLastKmsgDEPRECATED();
  inline  ::capnp::Data::Builder getLastKmsgDEPRECATED();
  inline void setLastKmsgDEPRECATED( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initLastKmsgDEPRECATED(unsigned int size);
  inline void adoptLastKmsgDEPRECATED(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownLastKmsgDEPRECATED();

  inline bool hasLastPmsgDEPRECATED();
  inline  ::capnp::Data::Builder getLastPmsgDEPRECATED();
  inline void setLastPmsgDEPRECATED( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initLastPmsgDEPRECATED(unsigned int size);
  inline void adoptLastPmsgDEPRECATED(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownLastPmsgDEPRECATED();

  inline bool hasLaunchLog();
  inline  ::capnp::Text::Builder getLaunchLog();
  inline void setLaunchLog( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLaunchLog(unsigned int size);
  inline void adoptLaunchLog(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLaunchLog();

  inline bool hasPstore();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder getPstore();
  inline void setPstore( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder initPstore();
  inline void adoptPstore(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> disownPstore();

  inline bool hasCommands();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder getCommands();
  inline void setCommands( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder initCommands();
  inline void adoptCommands(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> disownCommands();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Boot::Pipeline {
public:
  typedef Boot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline getPstore();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline getCommands();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveParametersData::Reader {
public:
  typedef LiveParametersData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getValid() const;

  inline float getGyroBias() const;

  inline float getAngleOffsetDeg() const;

  inline float getAngleOffsetAverageDeg() const;

  inline float getStiffnessFactor() const;

  inline float getSteerRatio() const;

  inline bool getSensorValid() const;

  inline float getYawRateDEPRECATED() const;

  inline float getPosenetSpeed() const;

  inline bool getPosenetValid() const;

  inline float getAngleOffsetFastStd() const;

  inline float getAngleOffsetAverageStd() const;

  inline float getStiffnessFactorStd() const;

  inline float getSteerRatioStd() const;

  inline float getRoll() const;

  inline bool hasFilterStateDEPRECATED() const;
  inline  ::cereal::LiveLocationKalman::Measurement::Reader getFilterStateDEPRECATED() const;

  inline bool hasDebugFilterState() const;
  inline  ::cereal::LiveParametersData::FilterState::Reader getDebugFilterState() const;

  inline bool getAngleOffsetValid() const;

  inline bool getAngleOffsetAverageValid() const;

  inline bool getSteerRatioValid() const;

  inline bool getStiffnessFactorValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveParametersData::Builder {
public:
  typedef LiveParametersData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getValid();
  inline void setValid(bool value);

  inline float getGyroBias();
  inline void setGyroBias(float value);

  inline float getAngleOffsetDeg();
  inline void setAngleOffsetDeg(float value);

  inline float getAngleOffsetAverageDeg();
  inline void setAngleOffsetAverageDeg(float value);

  inline float getStiffnessFactor();
  inline void setStiffnessFactor(float value);

  inline float getSteerRatio();
  inline void setSteerRatio(float value);

  inline bool getSensorValid();
  inline void setSensorValid(bool value);

  inline float getYawRateDEPRECATED();
  inline void setYawRateDEPRECATED(float value);

  inline float getPosenetSpeed();
  inline void setPosenetSpeed(float value);

  inline bool getPosenetValid();
  inline void setPosenetValid(bool value);

  inline float getAngleOffsetFastStd();
  inline void setAngleOffsetFastStd(float value);

  inline float getAngleOffsetAverageStd();
  inline void setAngleOffsetAverageStd(float value);

  inline float getStiffnessFactorStd();
  inline void setStiffnessFactorStd(float value);

  inline float getSteerRatioStd();
  inline void setSteerRatioStd(float value);

  inline float getRoll();
  inline void setRoll(float value);

  inline bool hasFilterStateDEPRECATED();
  inline  ::cereal::LiveLocationKalman::Measurement::Builder getFilterStateDEPRECATED();
  inline void setFilterStateDEPRECATED( ::cereal::LiveLocationKalman::Measurement::Reader value);
  inline  ::cereal::LiveLocationKalman::Measurement::Builder initFilterStateDEPRECATED();
  inline void adoptFilterStateDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> disownFilterStateDEPRECATED();

  inline bool hasDebugFilterState();
  inline  ::cereal::LiveParametersData::FilterState::Builder getDebugFilterState();
  inline void setDebugFilterState( ::cereal::LiveParametersData::FilterState::Reader value);
  inline  ::cereal::LiveParametersData::FilterState::Builder initDebugFilterState();
  inline void adoptDebugFilterState(::capnp::Orphan< ::cereal::LiveParametersData::FilterState>&& value);
  inline ::capnp::Orphan< ::cereal::LiveParametersData::FilterState> disownDebugFilterState();

  inline bool getAngleOffsetValid();
  inline void setAngleOffsetValid(bool value);

  inline bool getAngleOffsetAverageValid();
  inline void setAngleOffsetAverageValid(bool value);

  inline bool getSteerRatioValid();
  inline void setSteerRatioValid(bool value);

  inline bool getStiffnessFactorValid();
  inline void setStiffnessFactorValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveParametersData::Pipeline {
public:
  typedef LiveParametersData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationKalman::Measurement::Pipeline getFilterStateDEPRECATED();
  inline  ::cereal::LiveParametersData::FilterState::Pipeline getDebugFilterState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveParametersData::FilterState::Reader {
public:
  typedef FilterState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getValue() const;

  inline bool hasStd() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveParametersData::FilterState::Builder {
public:
  typedef FilterState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getValue();
  inline void setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValue(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownValue();

  inline bool hasStd();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStd();
  inline void setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStd(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStd(unsigned int size);
  inline void adoptStd(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveParametersData::FilterState::Pipeline {
public:
  typedef FilterState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveTorqueParametersData::Reader {
public:
  typedef LiveTorqueParametersData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLiveValid() const;

  inline float getLatAccelFactorRaw() const;

  inline float getLatAccelOffsetRaw() const;

  inline float getFrictionCoefficientRaw() const;

  inline float getLatAccelFactorFiltered() const;

  inline float getLatAccelOffsetFiltered() const;

  inline float getFrictionCoefficientFiltered() const;

  inline float getTotalBucketPoints() const;

  inline float getDecay() const;

  inline float getMaxResets() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getPoints() const;

  inline  ::int32_t getVersion() const;

  inline bool getUseParams() const;

  inline  ::int8_t getCalPerc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveTorqueParametersData::Builder {
public:
  typedef LiveTorqueParametersData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLiveValid();
  inline void setLiveValid(bool value);

  inline float getLatAccelFactorRaw();
  inline void setLatAccelFactorRaw(float value);

  inline float getLatAccelOffsetRaw();
  inline void setLatAccelOffsetRaw(float value);

  inline float getFrictionCoefficientRaw();
  inline void setFrictionCoefficientRaw(float value);

  inline float getLatAccelFactorFiltered();
  inline void setLatAccelFactorFiltered(float value);

  inline float getLatAccelOffsetFiltered();
  inline void setLatAccelOffsetFiltered(float value);

  inline float getFrictionCoefficientFiltered();
  inline void setFrictionCoefficientFiltered(float value);

  inline float getTotalBucketPoints();
  inline void setTotalBucketPoints(float value);

  inline float getDecay();
  inline void setDecay(float value);

  inline float getMaxResets();
  inline void setMaxResets(float value);

  inline bool hasPoints();
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setPoints(::kj::ArrayPtr<const  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownPoints();

  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline bool getUseParams();
  inline void setUseParams(bool value);

  inline  ::int8_t getCalPerc();
  inline void setCalPerc( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveTorqueParametersData::Pipeline {
public:
  typedef LiveTorqueParametersData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveDelayData::Reader {
public:
  typedef LiveDelayData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLateralDelay() const;

  inline  ::int32_t getValidBlocks() const;

  inline  ::cereal::LiveDelayData::Status getStatus() const;

  inline float getLateralDelayEstimate() const;

  inline bool hasPoints() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPoints() const;

  inline float getLateralDelayEstimateStd() const;

  inline  ::int8_t getCalPerc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveDelayData::Builder {
public:
  typedef LiveDelayData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLateralDelay();
  inline void setLateralDelay(float value);

  inline  ::int32_t getValidBlocks();
  inline void setValidBlocks( ::int32_t value);

  inline  ::cereal::LiveDelayData::Status getStatus();
  inline void setStatus( ::cereal::LiveDelayData::Status value);

  inline float getLateralDelayEstimate();
  inline void setLateralDelayEstimate(float value);

  inline bool hasPoints();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPoints();
  inline void setPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPoints(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPoints();

  inline float getLateralDelayEstimateStd();
  inline void setLateralDelayEstimateStd(float value);

  inline  ::int8_t getCalPerc();
  inline void setCalPerc( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveDelayData::Pipeline {
public:
  typedef LiveDelayData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveMapDataDEPRECATED::Reader {
public:
  typedef LiveMapDataDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid() const;

  inline float getSpeedLimit() const;

  inline bool getCurvatureValid() const;

  inline float getCurvature() const;

  inline  ::uint64_t getWayId() const;

  inline bool hasRoadX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadX() const;

  inline bool hasRoadY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadY() const;

  inline bool hasLastGps() const;
  inline  ::cereal::GpsLocationData::Reader getLastGps() const;

  inline bool hasRoadCurvatureX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadCurvatureX() const;

  inline bool hasRoadCurvature() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadCurvature() const;

  inline float getDistToTurn() const;

  inline bool getMapValid() const;

  inline bool getSpeedAdvisoryValid() const;

  inline float getSpeedAdvisory() const;

  inline bool getSpeedLimitAheadValid() const;

  inline float getSpeedLimitAhead() const;

  inline float getSpeedLimitAheadDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveMapDataDEPRECATED::Builder {
public:
  typedef LiveMapDataDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid();
  inline void setSpeedLimitValid(bool value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline bool getCurvatureValid();
  inline void setCurvatureValid(bool value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline  ::uint64_t getWayId();
  inline void setWayId( ::uint64_t value);

  inline bool hasRoadX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadX();
  inline void setRoadX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadX(unsigned int size);
  inline void adoptRoadX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadX();

  inline bool hasRoadY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadY();
  inline void setRoadY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadY(unsigned int size);
  inline void adoptRoadY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadY();

  inline bool hasLastGps();
  inline  ::cereal::GpsLocationData::Builder getLastGps();
  inline void setLastGps( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initLastGps();
  inline void adoptLastGps(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownLastGps();

  inline bool hasRoadCurvatureX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadCurvatureX();
  inline void setRoadCurvatureX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadCurvatureX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadCurvatureX(unsigned int size);
  inline void adoptRoadCurvatureX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadCurvatureX();

  inline bool hasRoadCurvature();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadCurvature();
  inline void setRoadCurvature( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadCurvature(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadCurvature(unsigned int size);
  inline void adoptRoadCurvature(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadCurvature();

  inline float getDistToTurn();
  inline void setDistToTurn(float value);

  inline bool getMapValid();
  inline void setMapValid(bool value);

  inline bool getSpeedAdvisoryValid();
  inline void setSpeedAdvisoryValid(bool value);

  inline float getSpeedAdvisory();
  inline void setSpeedAdvisory(float value);

  inline bool getSpeedLimitAheadValid();
  inline void setSpeedLimitAheadValid(bool value);

  inline float getSpeedLimitAhead();
  inline void setSpeedLimitAhead(float value);

  inline float getSpeedLimitAheadDistance();
  inline void setSpeedLimitAheadDistance(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveMapDataDEPRECATED::Pipeline {
public:
  typedef LiveMapDataDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::GpsLocationData::Pipeline getLastGps();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraOdometry::Reader {
public:
  typedef CameraOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRotStd() const;

  inline  ::uint32_t getFrameId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasWideFromDeviceEuler() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWideFromDeviceEuler() const;

  inline bool hasWideFromDeviceEulerStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getWideFromDeviceEulerStd() const;

  inline bool hasRoadTransformTrans() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadTransformTrans() const;

  inline bool hasRoadTransformTransStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRoadTransformTransStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraOdometry::Builder {
public:
  typedef CameraOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTrans();
  inline void setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRot();
  inline void setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRotStd();

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasWideFromDeviceEuler();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWideFromDeviceEuler();
  inline void setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWideFromDeviceEuler(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWideFromDeviceEuler(unsigned int size);
  inline void adoptWideFromDeviceEuler(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWideFromDeviceEuler();

  inline bool hasWideFromDeviceEulerStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getWideFromDeviceEulerStd();
  inline void setWideFromDeviceEulerStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWideFromDeviceEulerStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initWideFromDeviceEulerStd(unsigned int size);
  inline void adoptWideFromDeviceEulerStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownWideFromDeviceEulerStd();

  inline bool hasRoadTransformTrans();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadTransformTrans();
  inline void setRoadTransformTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadTransformTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadTransformTrans(unsigned int size);
  inline void adoptRoadTransformTrans(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadTransformTrans();

  inline bool hasRoadTransformTransStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRoadTransformTransStd();
  inline void setRoadTransformTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadTransformTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRoadTransformTransStd(unsigned int size);
  inline void adoptRoadTransformTransStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRoadTransformTransStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraOdometry::Pipeline {
public:
  typedef CameraOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sentinel::Reader {
public:
  typedef Sentinel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::Sentinel::SentinelType getType() const;

  inline  ::int32_t getSignal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sentinel::Builder {
public:
  typedef Sentinel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::Sentinel::SentinelType getType();
  inline void setType( ::cereal::Sentinel::SentinelType value);

  inline  ::int32_t getSignal();
  inline void setSignal( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sentinel::Pipeline {
public:
  typedef Sentinel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UIDebug::Reader {
public:
  typedef UIDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDrawTimeMillis() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UIDebug::Builder {
public:
  typedef UIDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDrawTimeMillis();
  inline void setDrawTimeMillis(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UIDebug::Pipeline {
public:
  typedef UIDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ManagerState::Reader {
public:
  typedef ManagerState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasProcesses() const;
  inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader getProcesses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ManagerState::Builder {
public:
  typedef ManagerState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProcesses();
  inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder getProcesses();
  inline void setProcesses( ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder initProcesses(unsigned int size);
  inline void adoptProcesses(::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>> disownProcesses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ManagerState::Pipeline {
public:
  typedef ManagerState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ManagerState::ProcessState::Reader {
public:
  typedef ProcessState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int32_t getPid() const;

  inline bool getRunning() const;

  inline  ::int32_t getExitCode() const;

  inline bool getShouldBeRunning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ManagerState::ProcessState::Builder {
public:
  typedef ProcessState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline bool getRunning();
  inline void setRunning(bool value);

  inline  ::int32_t getExitCode();
  inline void setExitCode( ::int32_t value);

  inline bool getShouldBeRunning();
  inline void setShouldBeRunning(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ManagerState::ProcessState::Pipeline {
public:
  typedef ProcessState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UploaderState::Reader {
public:
  typedef UploaderState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getImmediateQueueSize() const;

  inline  ::uint32_t getImmediateQueueCount() const;

  inline  ::uint32_t getRawQueueSize() const;

  inline  ::uint32_t getRawQueueCount() const;

  inline float getLastTime() const;

  inline float getLastSpeed() const;

  inline bool hasLastFilename() const;
  inline  ::capnp::Text::Reader getLastFilename() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UploaderState::Builder {
public:
  typedef UploaderState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getImmediateQueueSize();
  inline void setImmediateQueueSize( ::uint32_t value);

  inline  ::uint32_t getImmediateQueueCount();
  inline void setImmediateQueueCount( ::uint32_t value);

  inline  ::uint32_t getRawQueueSize();
  inline void setRawQueueSize( ::uint32_t value);

  inline  ::uint32_t getRawQueueCount();
  inline void setRawQueueCount( ::uint32_t value);

  inline float getLastTime();
  inline void setLastTime(float value);

  inline float getLastSpeed();
  inline void setLastSpeed(float value);

  inline bool hasLastFilename();
  inline  ::capnp::Text::Builder getLastFilename();
  inline void setLastFilename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLastFilename(unsigned int size);
  inline void adoptLastFilename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLastFilename();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UploaderState::Pipeline {
public:
  typedef UploaderState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavInstruction::Reader {
public:
  typedef NavInstruction Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasManeuverPrimaryText() const;
  inline  ::capnp::Text::Reader getManeuverPrimaryText() const;

  inline bool hasManeuverSecondaryText() const;
  inline  ::capnp::Text::Reader getManeuverSecondaryText() const;

  inline float getManeuverDistance() const;

  inline bool hasManeuverType() const;
  inline  ::capnp::Text::Reader getManeuverType() const;

  inline bool hasManeuverModifier() const;
  inline  ::capnp::Text::Reader getManeuverModifier() const;

  inline float getDistanceRemaining() const;

  inline float getTimeRemaining() const;

  inline float getTimeRemainingTypical() const;

  inline bool hasLanes() const;
  inline  ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Reader getLanes() const;

  inline bool getShowFull() const;

  inline float getSpeedLimit() const;

  inline  ::cereal::NavInstruction::SpeedLimitSign getSpeedLimitSign() const;

  inline bool hasAllManeuvers() const;
  inline  ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Reader getAllManeuvers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavInstruction::Builder {
public:
  typedef NavInstruction Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasManeuverPrimaryText();
  inline  ::capnp::Text::Builder getManeuverPrimaryText();
  inline void setManeuverPrimaryText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManeuverPrimaryText(unsigned int size);
  inline void adoptManeuverPrimaryText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManeuverPrimaryText();

  inline bool hasManeuverSecondaryText();
  inline  ::capnp::Text::Builder getManeuverSecondaryText();
  inline void setManeuverSecondaryText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManeuverSecondaryText(unsigned int size);
  inline void adoptManeuverSecondaryText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManeuverSecondaryText();

  inline float getManeuverDistance();
  inline void setManeuverDistance(float value);

  inline bool hasManeuverType();
  inline  ::capnp::Text::Builder getManeuverType();
  inline void setManeuverType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManeuverType(unsigned int size);
  inline void adoptManeuverType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManeuverType();

  inline bool hasManeuverModifier();
  inline  ::capnp::Text::Builder getManeuverModifier();
  inline void setManeuverModifier( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManeuverModifier(unsigned int size);
  inline void adoptManeuverModifier(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManeuverModifier();

  inline float getDistanceRemaining();
  inline void setDistanceRemaining(float value);

  inline float getTimeRemaining();
  inline void setTimeRemaining(float value);

  inline float getTimeRemainingTypical();
  inline void setTimeRemainingTypical(float value);

  inline bool hasLanes();
  inline  ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Builder getLanes();
  inline void setLanes( ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Builder initLanes(unsigned int size);
  inline void adoptLanes(::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>> disownLanes();

  inline bool getShowFull();
  inline void setShowFull(bool value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline  ::cereal::NavInstruction::SpeedLimitSign getSpeedLimitSign();
  inline void setSpeedLimitSign( ::cereal::NavInstruction::SpeedLimitSign value);

  inline bool hasAllManeuvers();
  inline  ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Builder getAllManeuvers();
  inline void setAllManeuvers( ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Builder initAllManeuvers(unsigned int size);
  inline void adoptAllManeuvers(::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>> disownAllManeuvers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavInstruction::Pipeline {
public:
  typedef NavInstruction Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavInstruction::Lane::Reader {
public:
  typedef Lane Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDirections() const;
  inline  ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Reader getDirections() const;

  inline bool getActive() const;

  inline  ::cereal::NavInstruction::Direction getActiveDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavInstruction::Lane::Builder {
public:
  typedef Lane Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDirections();
  inline  ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Builder getDirections();
  inline void setDirections( ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Reader value);
  inline void setDirections(::kj::ArrayPtr<const  ::cereal::NavInstruction::Direction> value);
  inline  ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Builder initDirections(unsigned int size);
  inline void adoptDirections(::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>> disownDirections();

  inline bool getActive();
  inline void setActive(bool value);

  inline  ::cereal::NavInstruction::Direction getActiveDirection();
  inline void setActiveDirection( ::cereal::NavInstruction::Direction value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavInstruction::Lane::Pipeline {
public:
  typedef Lane Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavInstruction::Maneuver::Reader {
public:
  typedef Maneuver Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDistance() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline bool hasModifier() const;
  inline  ::capnp::Text::Reader getModifier() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavInstruction::Maneuver::Builder {
public:
  typedef Maneuver Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDistance();
  inline void setDistance(float value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline bool hasModifier();
  inline  ::capnp::Text::Builder getModifier();
  inline void setModifier( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModifier(unsigned int size);
  inline void adoptModifier(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModifier();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavInstruction::Maneuver::Pipeline {
public:
  typedef Maneuver Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavRoute::Reader {
public:
  typedef NavRoute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCoordinates() const;
  inline  ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Reader getCoordinates() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavRoute::Builder {
public:
  typedef NavRoute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCoordinates();
  inline  ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Builder getCoordinates();
  inline void setCoordinates( ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Builder initCoordinates(unsigned int size);
  inline void adoptCoordinates(::capnp::Orphan< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>> disownCoordinates();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavRoute::Pipeline {
public:
  typedef NavRoute Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavRoute::Coordinate::Reader {
public:
  typedef Coordinate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLatitude() const;

  inline float getLongitude() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavRoute::Coordinate::Builder {
public:
  typedef Coordinate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLatitude();
  inline void setLatitude(float value);

  inline float getLongitude();
  inline void setLongitude(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavRoute::Coordinate::Pipeline {
public:
  typedef Coordinate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapRenderState::Reader {
public:
  typedef MapRenderState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getLocationMonoTime() const;

  inline float getRenderTime() const;

  inline  ::uint32_t getFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapRenderState::Builder {
public:
  typedef MapRenderState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getLocationMonoTime();
  inline void setLocationMonoTime( ::uint64_t value);

  inline float getRenderTime();
  inline void setRenderTime(float value);

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapRenderState::Pipeline {
public:
  typedef MapRenderState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavModelData::Reader {
public:
  typedef NavModelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline float getModelExecutionTime() const;

  inline float getDspExecutionTime() const;

  inline bool hasFeatures() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFeatures() const;

  inline bool hasPosition() const;
  inline  ::cereal::NavModelData::XYData::Reader getPosition() const;

  inline bool hasDesirePrediction() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesirePrediction() const;

  inline  ::uint64_t getLocationMonoTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavModelData::Builder {
public:
  typedef NavModelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline float getModelExecutionTime();
  inline void setModelExecutionTime(float value);

  inline float getDspExecutionTime();
  inline void setDspExecutionTime(float value);

  inline bool hasFeatures();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFeatures();
  inline void setFeatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFeatures(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFeatures(unsigned int size);
  inline void adoptFeatures(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFeatures();

  inline bool hasPosition();
  inline  ::cereal::NavModelData::XYData::Builder getPosition();
  inline void setPosition( ::cereal::NavModelData::XYData::Reader value);
  inline  ::cereal::NavModelData::XYData::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::cereal::NavModelData::XYData>&& value);
  inline ::capnp::Orphan< ::cereal::NavModelData::XYData> disownPosition();

  inline bool hasDesirePrediction();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesirePrediction();
  inline void setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesirePrediction(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesirePrediction(unsigned int size);
  inline void adoptDesirePrediction(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesirePrediction();

  inline  ::uint64_t getLocationMonoTime();
  inline void setLocationMonoTime( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavModelData::Pipeline {
public:
  typedef NavModelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::NavModelData::XYData::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavModelData::XYData::Reader {
public:
  typedef XYData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasXStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getXStd() const;

  inline bool hasYStd() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavModelData::XYData::Builder {
public:
  typedef XYData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasXStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getXStd();
  inline void setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setXStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initXStd(unsigned int size);
  inline void adoptXStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownXStd();

  inline bool hasYStd();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYStd();
  inline void setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYStd(unsigned int size);
  inline void adoptYStd(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavModelData::XYData::Pipeline {
public:
  typedef XYData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EncodeData::Reader {
public:
  typedef EncodeData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasIdx() const;
  inline  ::cereal::EncodeIndex::Reader getIdx() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline bool hasHeader() const;
  inline  ::capnp::Data::Reader getHeader() const;

  inline  ::uint64_t getUnixTimestampNanos() const;

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EncodeData::Builder {
public:
  typedef EncodeData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIdx();
  inline  ::cereal::EncodeIndex::Builder getIdx();
  inline void setIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initIdx();
  inline void adoptIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownIdx();

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline bool hasHeader();
  inline  ::capnp::Data::Builder getHeader();
  inline void setHeader( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initHeader(unsigned int size);
  inline void adoptHeader(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownHeader();

  inline  ::uint64_t getUnixTimestampNanos();
  inline void setUnixTimestampNanos( ::uint64_t value);

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EncodeData::Pipeline {
public:
  typedef EncodeData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::EncodeIndex::Pipeline getIdx();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugAlert::Reader {
public:
  typedef DebugAlert Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugAlert::Builder {
public:
  typedef DebugAlert Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugAlert::Pipeline {
public:
  typedef DebugAlert Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UserBookmark::Reader {
public:
  typedef UserBookmark Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UserBookmark::Builder {
public:
  typedef UserBookmark Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UserBookmark::Pipeline {
public:
  typedef UserBookmark Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoundPressure::Reader {
public:
  typedef SoundPressure Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getSoundPressure() const;

  inline float getSoundPressureWeightedDb() const;

  inline float getFilteredSoundPressureWeightedDbDEPRECATED() const;

  inline float getSoundPressureWeighted() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoundPressure::Builder {
public:
  typedef SoundPressure Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getSoundPressure();
  inline void setSoundPressure(float value);

  inline float getSoundPressureWeightedDb();
  inline void setSoundPressureWeightedDb(float value);

  inline float getFilteredSoundPressureWeightedDbDEPRECATED();
  inline void setFilteredSoundPressureWeightedDbDEPRECATED(float value);

  inline float getSoundPressureWeighted();
  inline void setSoundPressureWeighted(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoundPressure::Pipeline {
public:
  typedef SoundPressure Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AudioData::Reader {
public:
  typedef AudioData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline  ::uint32_t getSampleRate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AudioData::Builder {
public:
  typedef AudioData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline  ::uint32_t getSampleRate();
  inline void setSampleRate( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AudioData::Pipeline {
public:
  typedef AudioData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AudioFeedback::Reader {
public:
  typedef AudioFeedback Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAudio() const;
  inline  ::cereal::AudioData::Reader getAudio() const;

  inline  ::uint16_t getBlockNum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AudioFeedback::Builder {
public:
  typedef AudioFeedback Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAudio();
  inline  ::cereal::AudioData::Builder getAudio();
  inline void setAudio( ::cereal::AudioData::Reader value);
  inline  ::cereal::AudioData::Builder initAudio();
  inline void adoptAudio(::capnp::Orphan< ::cereal::AudioData>&& value);
  inline ::capnp::Orphan< ::cereal::AudioData> disownAudio();

  inline  ::uint16_t getBlockNum();
  inline void setBlockNum( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AudioFeedback::Pipeline {
public:
  typedef AudioFeedback Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::AudioData::Pipeline getAudio();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Touch::Reader {
public:
  typedef Touch Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getSec() const;

  inline  ::int64_t getUsec() const;

  inline  ::uint8_t getType() const;

  inline  ::int32_t getCode() const;

  inline  ::int32_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Touch::Builder {
public:
  typedef Touch Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getSec();
  inline void setSec( ::int64_t value);

  inline  ::int64_t getUsec();
  inline void setUsec( ::int64_t value);

  inline  ::uint8_t getType();
  inline void setType( ::uint8_t value);

  inline  ::int32_t getCode();
  inline void setCode( ::int32_t value);

  inline  ::int32_t getValue();
  inline void setValue( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Touch::Pipeline {
public:
  typedef Touch Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getLogMonoTime() const;

  inline bool isInitData() const;
  inline bool hasInitData() const;
  inline  ::cereal::InitData::Reader getInitData() const;

  inline bool isRoadCameraState() const;
  inline bool hasRoadCameraState() const;
  inline  ::cereal::FrameData::Reader getRoadCameraState() const;

  inline bool isGpsNMEA() const;
  inline bool hasGpsNMEA() const;
  inline  ::cereal::GPSNMEAData::Reader getGpsNMEA() const;

  inline bool isSensorEventDEPRECATED() const;
  inline bool hasSensorEventDEPRECATED() const;
  inline  ::cereal::SensorEventData::Reader getSensorEventDEPRECATED() const;

  inline bool isCan() const;
  inline bool hasCan() const;
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader getCan() const;

  inline bool isDeviceState() const;
  inline bool hasDeviceState() const;
  inline  ::cereal::DeviceState::Reader getDeviceState() const;

  inline bool isControlsState() const;
  inline bool hasControlsState() const;
  inline  ::cereal::ControlsState::Reader getControlsState() const;

  inline bool isLiveEventDEPRECATED() const;
  inline bool hasLiveEventDEPRECATED() const;
  inline  ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Reader getLiveEventDEPRECATED() const;

  inline bool isModel() const;
  inline bool hasModel() const;
  inline  ::cereal::ModelData::Reader getModel() const;

  inline bool isFeaturesDEPRECATED() const;
  inline bool hasFeaturesDEPRECATED() const;
  inline  ::cereal::CalibrationFeatures::Reader getFeaturesDEPRECATED() const;

  inline bool isSensorEventsDEPRECATED() const;
  inline bool hasSensorEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader getSensorEventsDEPRECATED() const;

  inline bool isPandaStateDEPRECATED() const;
  inline bool hasPandaStateDEPRECATED() const;
  inline  ::cereal::PandaState::Reader getPandaStateDEPRECATED() const;

  inline bool isRadarState() const;
  inline bool hasRadarState() const;
  inline  ::cereal::RadarState::Reader getRadarState() const;

  inline bool isLiveUIDEPRECATED() const;
  inline bool hasLiveUIDEPRECATED() const;
  inline  ::cereal::LiveUI::Reader getLiveUIDEPRECATED() const;

  inline bool isRoadEncodeIdx() const;
  inline bool hasRoadEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getRoadEncodeIdx() const;

  inline bool isLiveTracksDEPRECATED() const;
  inline bool hasLiveTracksDEPRECATED() const;
  inline  ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getLiveTracksDEPRECATED() const;

  inline bool isSendcan() const;
  inline bool hasSendcan() const;
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader getSendcan() const;

  inline bool isLogMessage() const;
  inline bool hasLogMessage() const;
  inline  ::capnp::Text::Reader getLogMessage() const;

  inline bool isLiveCalibration() const;
  inline bool hasLiveCalibration() const;
  inline  ::cereal::LiveCalibrationData::Reader getLiveCalibration() const;

  inline bool isAndroidLog() const;
  inline bool hasAndroidLog() const;
  inline  ::cereal::AndroidLogEntry::Reader getAndroidLog() const;

  inline bool isGpsLocation() const;
  inline bool hasGpsLocation() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocation() const;

  inline bool isCarState() const;
  inline bool hasCarState() const;
  inline  ::cereal::CarState::Reader getCarState() const;

  inline bool isCarControl() const;
  inline bool hasCarControl() const;
  inline  ::cereal::CarControl::Reader getCarControl() const;

  inline bool isLongitudinalPlan() const;
  inline bool hasLongitudinalPlan() const;
  inline  ::cereal::LongitudinalPlan::Reader getLongitudinalPlan() const;

  inline bool isLiveLocationDEPRECATED() const;
  inline bool hasLiveLocationDEPRECATED() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationDEPRECATED() const;

  inline bool isEthernetDataDEPRECATED() const;
  inline bool hasEthernetDataDEPRECATED() const;
  inline  ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Reader getEthernetDataDEPRECATED() const;

  inline bool isNavUpdateDEPRECATED() const;
  inline bool hasNavUpdateDEPRECATED() const;
  inline  ::cereal::NavUpdate::Reader getNavUpdateDEPRECATED() const;

  inline bool isCellInfoDEPRECATED() const;
  inline bool hasCellInfoDEPRECATED() const;
  inline  ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Reader getCellInfoDEPRECATED() const;

  inline bool isWifiScanDEPRECATED() const;
  inline bool hasWifiScanDEPRECATED() const;
  inline  ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Reader getWifiScanDEPRECATED() const;

  inline bool isAndroidGnssDEPRECATED() const;
  inline bool hasAndroidGnssDEPRECATED() const;
  inline  ::cereal::AndroidGnss::Reader getAndroidGnssDEPRECATED() const;

  inline bool isQcomGnss() const;
  inline bool hasQcomGnss() const;
  inline  ::cereal::QcomGnss::Reader getQcomGnss() const;

  inline bool isLidarPtsDEPRECATED() const;
  inline bool hasLidarPtsDEPRECATED() const;
  inline  ::cereal::LidarPts::Reader getLidarPtsDEPRECATED() const;

  inline bool isProcLog() const;
  inline bool hasProcLog() const;
  inline  ::cereal::ProcLog::Reader getProcLog() const;

  inline bool isUbloxGnss() const;
  inline bool hasUbloxGnss() const;
  inline  ::cereal::UbloxGnss::Reader getUbloxGnss() const;

  inline bool isClocks() const;
  inline bool hasClocks() const;
  inline  ::cereal::Clocks::Reader getClocks() const;

  inline bool isLiveMpcDEPRECATED() const;
  inline bool hasLiveMpcDEPRECATED() const;
  inline  ::cereal::LiveMpcData::Reader getLiveMpcDEPRECATED() const;

  inline bool isLiveLongitudinalMpcDEPRECATED() const;
  inline bool hasLiveLongitudinalMpcDEPRECATED() const;
  inline  ::cereal::LiveLongitudinalMpcData::Reader getLiveLongitudinalMpcDEPRECATED() const;

  inline bool isNavStatusDEPRECATED() const;
  inline bool hasNavStatusDEPRECATED() const;
  inline  ::cereal::NavStatus::Reader getNavStatusDEPRECATED() const;

  inline bool isUbloxRaw() const;
  inline bool hasUbloxRaw() const;
  inline  ::capnp::Data::Reader getUbloxRaw() const;

  inline bool isGpsPlannerPointsDEPRECATED() const;
  inline bool hasGpsPlannerPointsDEPRECATED() const;
  inline  ::cereal::GPSPlannerPoints::Reader getGpsPlannerPointsDEPRECATED() const;

  inline bool isGpsPlannerPlanDEPRECATED() const;
  inline bool hasGpsPlannerPlanDEPRECATED() const;
  inline  ::cereal::GPSPlannerPlan::Reader getGpsPlannerPlanDEPRECATED() const;

  inline bool isApplanixRawDEPRECATED() const;
  inline bool hasApplanixRawDEPRECATED() const;
  inline  ::capnp::Data::Reader getApplanixRawDEPRECATED() const;

  inline bool isTrafficEventsDEPRECATED() const;
  inline bool hasTrafficEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Reader getTrafficEventsDEPRECATED() const;

  inline bool isLiveLocationTimingDEPRECATED() const;
  inline bool hasLiveLocationTimingDEPRECATED() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationTimingDEPRECATED() const;

  inline bool isOrbslamCorrectionDEPRECATED() const;
  inline bool hasOrbslamCorrectionDEPRECATED() const;
  inline  ::cereal::OrbslamCorrection::Reader getOrbslamCorrectionDEPRECATED() const;

  inline bool isLiveLocationCorrectedDEPRECATED() const;
  inline bool hasLiveLocationCorrectedDEPRECATED() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationCorrectedDEPRECATED() const;

  inline bool isOrbObservationDEPRECATED() const;
  inline bool hasOrbObservationDEPRECATED() const;
  inline  ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Reader getOrbObservationDEPRECATED() const;

  inline bool isGpsLocationExternal() const;
  inline bool hasGpsLocationExternal() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocationExternal() const;

  inline bool isLocationDEPRECATED() const;
  inline bool hasLocationDEPRECATED() const;
  inline  ::cereal::LiveLocationData::Reader getLocationDEPRECATED() const;

  inline bool isUiNavigationEventDEPRECATED() const;
  inline bool hasUiNavigationEventDEPRECATED() const;
  inline  ::cereal::UiNavigationEvent::Reader getUiNavigationEventDEPRECATED() const;

  inline bool isLiveLocationKalmanLegacyDEPRECATED() const;
  inline bool hasLiveLocationKalmanLegacyDEPRECATED() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationKalmanLegacyDEPRECATED() const;

  inline bool isTestJoystick() const;
  inline bool hasTestJoystick() const;
  inline  ::cereal::Joystick::Reader getTestJoystick() const;

  inline bool isOrbOdometryDEPRECATED() const;
  inline bool hasOrbOdometryDEPRECATED() const;
  inline  ::cereal::OrbOdometry::Reader getOrbOdometryDEPRECATED() const;

  inline bool isOrbFeaturesDEPRECATED() const;
  inline bool hasOrbFeaturesDEPRECATED() const;
  inline  ::cereal::OrbFeatures::Reader getOrbFeaturesDEPRECATED() const;

  inline bool isApplanixLocationDEPRECATED() const;
  inline bool hasApplanixLocationDEPRECATED() const;
  inline  ::cereal::LiveLocationData::Reader getApplanixLocationDEPRECATED() const;

  inline bool isOrbKeyFrameDEPRECATED() const;
  inline bool hasOrbKeyFrameDEPRECATED() const;
  inline  ::cereal::OrbKeyFrame::Reader getOrbKeyFrameDEPRECATED() const;

  inline bool isUiLayoutStateDEPRECATED() const;
  inline bool hasUiLayoutStateDEPRECATED() const;
  inline  ::cereal::UiLayoutState::Reader getUiLayoutStateDEPRECATED() const;

  inline bool isOrbFeaturesSummaryDEPRECATED() const;
  inline bool hasOrbFeaturesSummaryDEPRECATED() const;
  inline  ::cereal::OrbFeaturesSummary::Reader getOrbFeaturesSummaryDEPRECATED() const;

  inline bool isDriverStateDEPRECATED() const;
  inline bool hasDriverStateDEPRECATED() const;
  inline  ::cereal::DriverStateDEPRECATED::Reader getDriverStateDEPRECATED() const;

  inline bool isBoot() const;
  inline bool hasBoot() const;
  inline  ::cereal::Boot::Reader getBoot() const;

  inline bool isLiveParameters() const;
  inline bool hasLiveParameters() const;
  inline  ::cereal::LiveParametersData::Reader getLiveParameters() const;

  inline bool isLiveMapDataDEPRECATED() const;
  inline bool hasLiveMapDataDEPRECATED() const;
  inline  ::cereal::LiveMapDataDEPRECATED::Reader getLiveMapDataDEPRECATED() const;

  inline bool isCameraOdometry() const;
  inline bool hasCameraOdometry() const;
  inline  ::cereal::CameraOdometry::Reader getCameraOdometry() const;

  inline bool isLateralPlanDEPRECATED() const;
  inline bool hasLateralPlanDEPRECATED() const;
  inline  ::cereal::LateralPlan::Reader getLateralPlanDEPRECATED() const;

  inline bool isKalmanOdometryDEPRECATED() const;
  inline bool hasKalmanOdometryDEPRECATED() const;
  inline  ::cereal::KalmanOdometry::Reader getKalmanOdometryDEPRECATED() const;

  inline bool isThumbnail() const;
  inline bool hasThumbnail() const;
  inline  ::cereal::Thumbnail::Reader getThumbnail() const;

  inline bool getValid() const;

  inline bool isOnroadEventsDEPRECATED() const;
  inline bool hasOnroadEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getOnroadEventsDEPRECATED() const;

  inline bool isCarParams() const;
  inline bool hasCarParams() const;
  inline  ::cereal::CarParams::Reader getCarParams() const;

  inline bool isDriverCameraState() const;
  inline bool hasDriverCameraState() const;
  inline  ::cereal::FrameData::Reader getDriverCameraState() const;

  inline bool isDriverMonitoringState() const;
  inline bool hasDriverMonitoringState() const;
  inline  ::cereal::DriverMonitoringState::Reader getDriverMonitoringState() const;

  inline bool isLiveLocationKalmanDEPRECATED() const;
  inline bool hasLiveLocationKalmanDEPRECATED() const;
  inline  ::cereal::LiveLocationKalman::Reader getLiveLocationKalmanDEPRECATED() const;

  inline bool isSentinel() const;
  inline bool hasSentinel() const;
  inline  ::cereal::Sentinel::Reader getSentinel() const;

  inline bool isWideRoadCameraState() const;
  inline bool hasWideRoadCameraState() const;
  inline  ::cereal::FrameData::Reader getWideRoadCameraState() const;

  inline bool isModelV2() const;
  inline bool hasModelV2() const;
  inline  ::cereal::ModelDataV2::Reader getModelV2() const;

  inline bool isDriverEncodeIdx() const;
  inline bool hasDriverEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getDriverEncodeIdx() const;

  inline bool isWideRoadEncodeIdx() const;
  inline bool hasWideRoadEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getWideRoadEncodeIdx() const;

  inline bool isManagerState() const;
  inline bool hasManagerState() const;
  inline  ::cereal::ManagerState::Reader getManagerState() const;

  inline bool isUploaderState() const;
  inline bool hasUploaderState() const;
  inline  ::cereal::UploaderState::Reader getUploaderState() const;

  inline bool isPeripheralState() const;
  inline bool hasPeripheralState() const;
  inline  ::cereal::PeripheralState::Reader getPeripheralState() const;

  inline bool isPandaStates() const;
  inline bool hasPandaStates() const;
  inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader getPandaStates() const;

  inline bool isNavInstruction() const;
  inline bool hasNavInstruction() const;
  inline  ::cereal::NavInstruction::Reader getNavInstruction() const;

  inline bool isNavRoute() const;
  inline bool hasNavRoute() const;
  inline  ::cereal::NavRoute::Reader getNavRoute() const;

  inline bool isNavThumbnail() const;
  inline bool hasNavThumbnail() const;
  inline  ::cereal::Thumbnail::Reader getNavThumbnail() const;

  inline bool isErrorLogMessage() const;
  inline bool hasErrorLogMessage() const;
  inline  ::capnp::Text::Reader getErrorLogMessage() const;

  inline bool isRoadEncodeData() const;
  inline bool hasRoadEncodeData() const;
  inline  ::cereal::EncodeData::Reader getRoadEncodeData() const;

  inline bool isDriverEncodeData() const;
  inline bool hasDriverEncodeData() const;
  inline  ::cereal::EncodeData::Reader getDriverEncodeData() const;

  inline bool isWideRoadEncodeData() const;
  inline bool hasWideRoadEncodeData() const;
  inline  ::cereal::EncodeData::Reader getWideRoadEncodeData() const;

  inline bool isQRoadEncodeData() const;
  inline bool hasQRoadEncodeData() const;
  inline  ::cereal::EncodeData::Reader getQRoadEncodeData() const;

  inline bool isQRoadEncodeIdx() const;
  inline bool hasQRoadEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getQRoadEncodeIdx() const;

  inline bool isGnssMeasurements() const;
  inline bool hasGnssMeasurements() const;
  inline  ::cereal::GnssMeasurements::Reader getGnssMeasurements() const;

  inline bool isDriverStateV2() const;
  inline bool hasDriverStateV2() const;
  inline  ::cereal::DriverStateV2::Reader getDriverStateV2() const;

  inline bool isUserBookmark() const;
  inline bool hasUserBookmark() const;
  inline  ::cereal::UserBookmark::Reader getUserBookmark() const;

  inline bool isLiveTorqueParameters() const;
  inline bool hasLiveTorqueParameters() const;
  inline  ::cereal::LiveTorqueParametersData::Reader getLiveTorqueParameters() const;

  inline bool isMagnetometer() const;
  inline bool hasMagnetometer() const;
  inline  ::cereal::SensorEventData::Reader getMagnetometer() const;

  inline bool isLightSensor() const;
  inline bool hasLightSensor() const;
  inline  ::cereal::SensorEventData::Reader getLightSensor() const;

  inline bool isTemperatureSensor() const;
  inline bool hasTemperatureSensor() const;
  inline  ::cereal::SensorEventData::Reader getTemperatureSensor() const;

  inline bool isAccelerometer() const;
  inline bool hasAccelerometer() const;
  inline  ::cereal::SensorEventData::Reader getAccelerometer() const;

  inline bool isGyroscope() const;
  inline bool hasGyroscope() const;
  inline  ::cereal::SensorEventData::Reader getGyroscope() const;

  inline bool isGyroscope2() const;
  inline bool hasGyroscope2() const;
  inline  ::cereal::SensorEventData::Reader getGyroscope2() const;

  inline bool isAccelerometer2() const;
  inline bool hasAccelerometer2() const;
  inline  ::cereal::SensorEventData::Reader getAccelerometer2() const;

  inline bool isUiDebug() const;
  inline bool hasUiDebug() const;
  inline  ::cereal::UIDebug::Reader getUiDebug() const;

  inline bool isSoundPressure() const;
  inline bool hasSoundPressure() const;
  inline  ::cereal::SoundPressure::Reader getSoundPressure() const;

  inline bool isNavModelDEPRECATED() const;
  inline bool hasNavModelDEPRECATED() const;
  inline  ::cereal::NavModelData::Reader getNavModelDEPRECATED() const;

  inline bool isMapRenderState() const;
  inline bool hasMapRenderState() const;
  inline  ::cereal::MapRenderState::Reader getMapRenderState() const;

  inline bool isUiPlanDEPRECATED() const;
  inline bool hasUiPlanDEPRECATED() const;
  inline  ::cereal::UiPlan::Reader getUiPlanDEPRECATED() const;

  inline bool isCustomReserved0() const;
  inline bool hasCustomReserved0() const;
  inline  ::cereal::CustomReserved0::Reader getCustomReserved0() const;

  inline bool isCustomReserved1() const;
  inline bool hasCustomReserved1() const;
  inline  ::cereal::CustomReserved1::Reader getCustomReserved1() const;

  inline bool isCustomReserved2() const;
  inline bool hasCustomReserved2() const;
  inline  ::cereal::CustomReserved2::Reader getCustomReserved2() const;

  inline bool isCustomReserved3() const;
  inline bool hasCustomReserved3() const;
  inline  ::cereal::CustomReserved3::Reader getCustomReserved3() const;

  inline bool isCustomReserved4() const;
  inline bool hasCustomReserved4() const;
  inline  ::cereal::CustomReserved4::Reader getCustomReserved4() const;

  inline bool isCustomReserved5() const;
  inline bool hasCustomReserved5() const;
  inline  ::cereal::CustomReserved5::Reader getCustomReserved5() const;

  inline bool isCustomReserved6() const;
  inline bool hasCustomReserved6() const;
  inline  ::cereal::CustomReserved6::Reader getCustomReserved6() const;

  inline bool isCustomReserved7() const;
  inline bool hasCustomReserved7() const;
  inline  ::cereal::CustomReserved7::Reader getCustomReserved7() const;

  inline bool isCustomReserved8() const;
  inline bool hasCustomReserved8() const;
  inline  ::cereal::CustomReserved8::Reader getCustomReserved8() const;

  inline bool isCustomReserved9() const;
  inline bool hasCustomReserved9() const;
  inline  ::cereal::CustomReserved9::Reader getCustomReserved9() const;

  inline bool isLivestreamRoadEncodeIdx() const;
  inline bool hasLivestreamRoadEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getLivestreamRoadEncodeIdx() const;

  inline bool isLivestreamWideRoadEncodeIdx() const;
  inline bool hasLivestreamWideRoadEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getLivestreamWideRoadEncodeIdx() const;

  inline bool isLivestreamDriverEncodeIdx() const;
  inline bool hasLivestreamDriverEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getLivestreamDriverEncodeIdx() const;

  inline bool isLivestreamRoadEncodeData() const;
  inline bool hasLivestreamRoadEncodeData() const;
  inline  ::cereal::EncodeData::Reader getLivestreamRoadEncodeData() const;

  inline bool isLivestreamWideRoadEncodeData() const;
  inline bool hasLivestreamWideRoadEncodeData() const;
  inline  ::cereal::EncodeData::Reader getLivestreamWideRoadEncodeData() const;

  inline bool isLivestreamDriverEncodeData() const;
  inline bool hasLivestreamDriverEncodeData() const;
  inline  ::cereal::EncodeData::Reader getLivestreamDriverEncodeData() const;

  inline bool isTemperatureSensor2() const;
  inline bool hasTemperatureSensor2() const;
  inline  ::cereal::SensorEventData::Reader getTemperatureSensor2() const;

  inline bool isCustomReservedRawData0() const;
  inline bool hasCustomReservedRawData0() const;
  inline  ::capnp::Data::Reader getCustomReservedRawData0() const;

  inline bool isCustomReservedRawData1() const;
  inline bool hasCustomReservedRawData1() const;
  inline  ::capnp::Data::Reader getCustomReservedRawData1() const;

  inline bool isCustomReservedRawData2() const;
  inline bool hasCustomReservedRawData2() const;
  inline  ::capnp::Data::Reader getCustomReservedRawData2() const;

  inline bool isCarOutput() const;
  inline bool hasCarOutput() const;
  inline  ::cereal::CarOutput::Reader getCarOutput() const;

  inline bool isDrivingModelData() const;
  inline bool hasDrivingModelData() const;
  inline  ::cereal::DrivingModelData::Reader getDrivingModelData() const;

  inline bool isLivePose() const;
  inline bool hasLivePose() const;
  inline  ::cereal::LivePose::Reader getLivePose() const;

  inline bool isSelfdriveState() const;
  inline bool hasSelfdriveState() const;
  inline  ::cereal::SelfdriveState::Reader getSelfdriveState() const;

  inline bool isLiveTracks() const;
  inline bool hasLiveTracks() const;
  inline  ::cereal::RadarData::Reader getLiveTracks() const;

  inline bool isDriverAssistance() const;
  inline bool hasDriverAssistance() const;
  inline  ::cereal::DriverAssistance::Reader getDriverAssistance() const;

  inline bool isAlertDebug() const;
  inline bool hasAlertDebug() const;
  inline  ::cereal::DebugAlert::Reader getAlertDebug() const;

  inline bool isOnroadEvents() const;
  inline bool hasOnroadEvents() const;
  inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader getOnroadEvents() const;

  inline bool isTouch() const;
  inline bool hasTouch() const;
  inline  ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Reader getTouch() const;

  inline bool isCustomReserved10() const;
  inline bool hasCustomReserved10() const;
  inline  ::cereal::CustomReserved10::Reader getCustomReserved10() const;

  inline bool isCustomReserved11() const;
  inline bool hasCustomReserved11() const;
  inline  ::cereal::CustomReserved11::Reader getCustomReserved11() const;

  inline bool isCustomReserved12() const;
  inline bool hasCustomReserved12() const;
  inline  ::cereal::CustomReserved12::Reader getCustomReserved12() const;

  inline bool isCustomReserved13() const;
  inline bool hasCustomReserved13() const;
  inline  ::cereal::CustomReserved13::Reader getCustomReserved13() const;

  inline bool isCustomReserved14() const;
  inline bool hasCustomReserved14() const;
  inline  ::cereal::CustomReserved14::Reader getCustomReserved14() const;

  inline bool isCustomReserved15() const;
  inline bool hasCustomReserved15() const;
  inline  ::cereal::CustomReserved15::Reader getCustomReserved15() const;

  inline bool isCustomReserved16() const;
  inline bool hasCustomReserved16() const;
  inline  ::cereal::CustomReserved16::Reader getCustomReserved16() const;

  inline bool isCustomReserved17() const;
  inline bool hasCustomReserved17() const;
  inline  ::cereal::CustomReserved17::Reader getCustomReserved17() const;

  inline bool isCustomReserved18() const;
  inline bool hasCustomReserved18() const;
  inline  ::cereal::CustomReserved18::Reader getCustomReserved18() const;

  inline bool isCustomReserved19() const;
  inline bool hasCustomReserved19() const;
  inline  ::cereal::CustomReserved19::Reader getCustomReserved19() const;

  inline bool isLiveDelay() const;
  inline bool hasLiveDelay() const;
  inline  ::cereal::LiveDelayData::Reader getLiveDelay() const;

  inline bool isRawAudioData() const;
  inline bool hasRawAudioData() const;
  inline  ::cereal::AudioData::Reader getRawAudioData() const;

  inline bool isBookmarkButton() const;
  inline bool hasBookmarkButton() const;
  inline  ::cereal::UserBookmark::Reader getBookmarkButton() const;

  inline bool isAudioFeedback() const;
  inline bool hasAudioFeedback() const;
  inline  ::cereal::AudioFeedback::Reader getAudioFeedback() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getLogMonoTime();
  inline void setLogMonoTime( ::uint64_t value);

  inline bool isInitData();
  inline bool hasInitData();
  inline  ::cereal::InitData::Builder getInitData();
  inline void setInitData( ::cereal::InitData::Reader value);
  inline  ::cereal::InitData::Builder initInitData();
  inline void adoptInitData(::capnp::Orphan< ::cereal::InitData>&& value);
  inline ::capnp::Orphan< ::cereal::InitData> disownInitData();

  inline bool isRoadCameraState();
  inline bool hasRoadCameraState();
  inline  ::cereal::FrameData::Builder getRoadCameraState();
  inline void setRoadCameraState( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initRoadCameraState();
  inline void adoptRoadCameraState(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownRoadCameraState();

  inline bool isGpsNMEA();
  inline bool hasGpsNMEA();
  inline  ::cereal::GPSNMEAData::Builder getGpsNMEA();
  inline void setGpsNMEA( ::cereal::GPSNMEAData::Reader value);
  inline  ::cereal::GPSNMEAData::Builder initGpsNMEA();
  inline void adoptGpsNMEA(::capnp::Orphan< ::cereal::GPSNMEAData>&& value);
  inline ::capnp::Orphan< ::cereal::GPSNMEAData> disownGpsNMEA();

  inline bool isSensorEventDEPRECATED();
  inline bool hasSensorEventDEPRECATED();
  inline  ::cereal::SensorEventData::Builder getSensorEventDEPRECATED();
  inline void setSensorEventDEPRECATED( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initSensorEventDEPRECATED();
  inline void adoptSensorEventDEPRECATED(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownSensorEventDEPRECATED();

  inline bool isCan();
  inline bool hasCan();
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder getCan();
  inline void setCan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder initCan(unsigned int size);
  inline void adoptCan(::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> disownCan();

  inline bool isDeviceState();
  inline bool hasDeviceState();
  inline  ::cereal::DeviceState::Builder getDeviceState();
  inline void setDeviceState( ::cereal::DeviceState::Reader value);
  inline  ::cereal::DeviceState::Builder initDeviceState();
  inline void adoptDeviceState(::capnp::Orphan< ::cereal::DeviceState>&& value);
  inline ::capnp::Orphan< ::cereal::DeviceState> disownDeviceState();

  inline bool isControlsState();
  inline bool hasControlsState();
  inline  ::cereal::ControlsState::Builder getControlsState();
  inline void setControlsState( ::cereal::ControlsState::Reader value);
  inline  ::cereal::ControlsState::Builder initControlsState();
  inline void adoptControlsState(::capnp::Orphan< ::cereal::ControlsState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState> disownControlsState();

  inline bool isLiveEventDEPRECATED();
  inline bool hasLiveEventDEPRECATED();
  inline  ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Builder getLiveEventDEPRECATED();
  inline void setLiveEventDEPRECATED( ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Builder initLiveEventDEPRECATED(unsigned int size);
  inline void adoptLiveEventDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>> disownLiveEventDEPRECATED();

  inline bool isModel();
  inline bool hasModel();
  inline  ::cereal::ModelData::Builder getModel();
  inline void setModel( ::cereal::ModelData::Reader value);
  inline  ::cereal::ModelData::Builder initModel();
  inline void adoptModel(::capnp::Orphan< ::cereal::ModelData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData> disownModel();

  inline bool isFeaturesDEPRECATED();
  inline bool hasFeaturesDEPRECATED();
  inline  ::cereal::CalibrationFeatures::Builder getFeaturesDEPRECATED();
  inline void setFeaturesDEPRECATED( ::cereal::CalibrationFeatures::Reader value);
  inline  ::cereal::CalibrationFeatures::Builder initFeaturesDEPRECATED();
  inline void adoptFeaturesDEPRECATED(::capnp::Orphan< ::cereal::CalibrationFeatures>&& value);
  inline ::capnp::Orphan< ::cereal::CalibrationFeatures> disownFeaturesDEPRECATED();

  inline bool isSensorEventsDEPRECATED();
  inline bool hasSensorEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder getSensorEventsDEPRECATED();
  inline void setSensorEventsDEPRECATED( ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder initSensorEventsDEPRECATED(unsigned int size);
  inline void adoptSensorEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>> disownSensorEventsDEPRECATED();

  inline bool isPandaStateDEPRECATED();
  inline bool hasPandaStateDEPRECATED();
  inline  ::cereal::PandaState::Builder getPandaStateDEPRECATED();
  inline void setPandaStateDEPRECATED( ::cereal::PandaState::Reader value);
  inline  ::cereal::PandaState::Builder initPandaStateDEPRECATED();
  inline void adoptPandaStateDEPRECATED(::capnp::Orphan< ::cereal::PandaState>&& value);
  inline ::capnp::Orphan< ::cereal::PandaState> disownPandaStateDEPRECATED();

  inline bool isRadarState();
  inline bool hasRadarState();
  inline  ::cereal::RadarState::Builder getRadarState();
  inline void setRadarState( ::cereal::RadarState::Reader value);
  inline  ::cereal::RadarState::Builder initRadarState();
  inline void adoptRadarState(::capnp::Orphan< ::cereal::RadarState>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState> disownRadarState();

  inline bool isLiveUIDEPRECATED();
  inline bool hasLiveUIDEPRECATED();
  inline  ::cereal::LiveUI::Builder getLiveUIDEPRECATED();
  inline void setLiveUIDEPRECATED( ::cereal::LiveUI::Reader value);
  inline  ::cereal::LiveUI::Builder initLiveUIDEPRECATED();
  inline void adoptLiveUIDEPRECATED(::capnp::Orphan< ::cereal::LiveUI>&& value);
  inline ::capnp::Orphan< ::cereal::LiveUI> disownLiveUIDEPRECATED();

  inline bool isRoadEncodeIdx();
  inline bool hasRoadEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getRoadEncodeIdx();
  inline void setRoadEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initRoadEncodeIdx();
  inline void adoptRoadEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownRoadEncodeIdx();

  inline bool isLiveTracksDEPRECATED();
  inline bool hasLiveTracksDEPRECATED();
  inline  ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getLiveTracksDEPRECATED();
  inline void setLiveTracksDEPRECATED( ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initLiveTracksDEPRECATED(unsigned int size);
  inline void adoptLiveTracksDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>> disownLiveTracksDEPRECATED();

  inline bool isSendcan();
  inline bool hasSendcan();
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder getSendcan();
  inline void setSendcan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder initSendcan(unsigned int size);
  inline void adoptSendcan(::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> disownSendcan();

  inline bool isLogMessage();
  inline bool hasLogMessage();
  inline  ::capnp::Text::Builder getLogMessage();
  inline void setLogMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLogMessage(unsigned int size);
  inline void adoptLogMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLogMessage();

  inline bool isLiveCalibration();
  inline bool hasLiveCalibration();
  inline  ::cereal::LiveCalibrationData::Builder getLiveCalibration();
  inline void setLiveCalibration( ::cereal::LiveCalibrationData::Reader value);
  inline  ::cereal::LiveCalibrationData::Builder initLiveCalibration();
  inline void adoptLiveCalibration(::capnp::Orphan< ::cereal::LiveCalibrationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveCalibrationData> disownLiveCalibration();

  inline bool isAndroidLog();
  inline bool hasAndroidLog();
  inline  ::cereal::AndroidLogEntry::Builder getAndroidLog();
  inline void setAndroidLog( ::cereal::AndroidLogEntry::Reader value);
  inline  ::cereal::AndroidLogEntry::Builder initAndroidLog();
  inline void adoptAndroidLog(::capnp::Orphan< ::cereal::AndroidLogEntry>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidLogEntry> disownAndroidLog();

  inline bool isGpsLocation();
  inline bool hasGpsLocation();
  inline  ::cereal::GpsLocationData::Builder getGpsLocation();
  inline void setGpsLocation( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocation();
  inline void adoptGpsLocation(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocation();

  inline bool isCarState();
  inline bool hasCarState();
  inline  ::cereal::CarState::Builder getCarState();
  inline void setCarState( ::cereal::CarState::Reader value);
  inline  ::cereal::CarState::Builder initCarState();
  inline void adoptCarState(::capnp::Orphan< ::cereal::CarState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState> disownCarState();

  inline bool isCarControl();
  inline bool hasCarControl();
  inline  ::cereal::CarControl::Builder getCarControl();
  inline void setCarControl( ::cereal::CarControl::Reader value);
  inline  ::cereal::CarControl::Builder initCarControl();
  inline void adoptCarControl(::capnp::Orphan< ::cereal::CarControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl> disownCarControl();

  inline bool isLongitudinalPlan();
  inline bool hasLongitudinalPlan();
  inline  ::cereal::LongitudinalPlan::Builder getLongitudinalPlan();
  inline void setLongitudinalPlan( ::cereal::LongitudinalPlan::Reader value);
  inline  ::cereal::LongitudinalPlan::Builder initLongitudinalPlan();
  inline void adoptLongitudinalPlan(::capnp::Orphan< ::cereal::LongitudinalPlan>&& value);
  inline ::capnp::Orphan< ::cereal::LongitudinalPlan> disownLongitudinalPlan();

  inline bool isLiveLocationDEPRECATED();
  inline bool hasLiveLocationDEPRECATED();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationDEPRECATED();
  inline void setLiveLocationDEPRECATED( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationDEPRECATED();
  inline void adoptLiveLocationDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationDEPRECATED();

  inline bool isEthernetDataDEPRECATED();
  inline bool hasEthernetDataDEPRECATED();
  inline  ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Builder getEthernetDataDEPRECATED();
  inline void setEthernetDataDEPRECATED( ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Builder initEthernetDataDEPRECATED(unsigned int size);
  inline void adoptEthernetDataDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>> disownEthernetDataDEPRECATED();

  inline bool isNavUpdateDEPRECATED();
  inline bool hasNavUpdateDEPRECATED();
  inline  ::cereal::NavUpdate::Builder getNavUpdateDEPRECATED();
  inline void setNavUpdateDEPRECATED( ::cereal::NavUpdate::Reader value);
  inline  ::cereal::NavUpdate::Builder initNavUpdateDEPRECATED();
  inline void adoptNavUpdateDEPRECATED(::capnp::Orphan< ::cereal::NavUpdate>&& value);
  inline ::capnp::Orphan< ::cereal::NavUpdate> disownNavUpdateDEPRECATED();

  inline bool isCellInfoDEPRECATED();
  inline bool hasCellInfoDEPRECATED();
  inline  ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Builder getCellInfoDEPRECATED();
  inline void setCellInfoDEPRECATED( ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Builder initCellInfoDEPRECATED(unsigned int size);
  inline void adoptCellInfoDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>> disownCellInfoDEPRECATED();

  inline bool isWifiScanDEPRECATED();
  inline bool hasWifiScanDEPRECATED();
  inline  ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Builder getWifiScanDEPRECATED();
  inline void setWifiScanDEPRECATED( ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Builder initWifiScanDEPRECATED(unsigned int size);
  inline void adoptWifiScanDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>> disownWifiScanDEPRECATED();

  inline bool isAndroidGnssDEPRECATED();
  inline bool hasAndroidGnssDEPRECATED();
  inline  ::cereal::AndroidGnss::Builder getAndroidGnssDEPRECATED();
  inline void setAndroidGnssDEPRECATED( ::cereal::AndroidGnss::Reader value);
  inline  ::cereal::AndroidGnss::Builder initAndroidGnssDEPRECATED();
  inline void adoptAndroidGnssDEPRECATED(::capnp::Orphan< ::cereal::AndroidGnss>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss> disownAndroidGnssDEPRECATED();

  inline bool isQcomGnss();
  inline bool hasQcomGnss();
  inline  ::cereal::QcomGnss::Builder getQcomGnss();
  inline void setQcomGnss( ::cereal::QcomGnss::Reader value);
  inline  ::cereal::QcomGnss::Builder initQcomGnss();
  inline void adoptQcomGnss(::capnp::Orphan< ::cereal::QcomGnss>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss> disownQcomGnss();

  inline bool isLidarPtsDEPRECATED();
  inline bool hasLidarPtsDEPRECATED();
  inline  ::cereal::LidarPts::Builder getLidarPtsDEPRECATED();
  inline void setLidarPtsDEPRECATED( ::cereal::LidarPts::Reader value);
  inline  ::cereal::LidarPts::Builder initLidarPtsDEPRECATED();
  inline void adoptLidarPtsDEPRECATED(::capnp::Orphan< ::cereal::LidarPts>&& value);
  inline ::capnp::Orphan< ::cereal::LidarPts> disownLidarPtsDEPRECATED();

  inline bool isProcLog();
  inline bool hasProcLog();
  inline  ::cereal::ProcLog::Builder getProcLog();
  inline void setProcLog( ::cereal::ProcLog::Reader value);
  inline  ::cereal::ProcLog::Builder initProcLog();
  inline void adoptProcLog(::capnp::Orphan< ::cereal::ProcLog>&& value);
  inline ::capnp::Orphan< ::cereal::ProcLog> disownProcLog();

  inline bool isUbloxGnss();
  inline bool hasUbloxGnss();
  inline  ::cereal::UbloxGnss::Builder getUbloxGnss();
  inline void setUbloxGnss( ::cereal::UbloxGnss::Reader value);
  inline  ::cereal::UbloxGnss::Builder initUbloxGnss();
  inline void adoptUbloxGnss(::capnp::Orphan< ::cereal::UbloxGnss>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss> disownUbloxGnss();

  inline bool isClocks();
  inline bool hasClocks();
  inline  ::cereal::Clocks::Builder getClocks();
  inline void setClocks( ::cereal::Clocks::Reader value);
  inline  ::cereal::Clocks::Builder initClocks();
  inline void adoptClocks(::capnp::Orphan< ::cereal::Clocks>&& value);
  inline ::capnp::Orphan< ::cereal::Clocks> disownClocks();

  inline bool isLiveMpcDEPRECATED();
  inline bool hasLiveMpcDEPRECATED();
  inline  ::cereal::LiveMpcData::Builder getLiveMpcDEPRECATED();
  inline void setLiveMpcDEPRECATED( ::cereal::LiveMpcData::Reader value);
  inline  ::cereal::LiveMpcData::Builder initLiveMpcDEPRECATED();
  inline void adoptLiveMpcDEPRECATED(::capnp::Orphan< ::cereal::LiveMpcData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveMpcData> disownLiveMpcDEPRECATED();

  inline bool isLiveLongitudinalMpcDEPRECATED();
  inline bool hasLiveLongitudinalMpcDEPRECATED();
  inline  ::cereal::LiveLongitudinalMpcData::Builder getLiveLongitudinalMpcDEPRECATED();
  inline void setLiveLongitudinalMpcDEPRECATED( ::cereal::LiveLongitudinalMpcData::Reader value);
  inline  ::cereal::LiveLongitudinalMpcData::Builder initLiveLongitudinalMpcDEPRECATED();
  inline void adoptLiveLongitudinalMpcDEPRECATED(::capnp::Orphan< ::cereal::LiveLongitudinalMpcData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLongitudinalMpcData> disownLiveLongitudinalMpcDEPRECATED();

  inline bool isNavStatusDEPRECATED();
  inline bool hasNavStatusDEPRECATED();
  inline  ::cereal::NavStatus::Builder getNavStatusDEPRECATED();
  inline void setNavStatusDEPRECATED( ::cereal::NavStatus::Reader value);
  inline  ::cereal::NavStatus::Builder initNavStatusDEPRECATED();
  inline void adoptNavStatusDEPRECATED(::capnp::Orphan< ::cereal::NavStatus>&& value);
  inline ::capnp::Orphan< ::cereal::NavStatus> disownNavStatusDEPRECATED();

  inline bool isUbloxRaw();
  inline bool hasUbloxRaw();
  inline  ::capnp::Data::Builder getUbloxRaw();
  inline void setUbloxRaw( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUbloxRaw(unsigned int size);
  inline void adoptUbloxRaw(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUbloxRaw();

  inline bool isGpsPlannerPointsDEPRECATED();
  inline bool hasGpsPlannerPointsDEPRECATED();
  inline  ::cereal::GPSPlannerPoints::Builder getGpsPlannerPointsDEPRECATED();
  inline void setGpsPlannerPointsDEPRECATED( ::cereal::GPSPlannerPoints::Reader value);
  inline  ::cereal::GPSPlannerPoints::Builder initGpsPlannerPointsDEPRECATED();
  inline void adoptGpsPlannerPointsDEPRECATED(::capnp::Orphan< ::cereal::GPSPlannerPoints>&& value);
  inline ::capnp::Orphan< ::cereal::GPSPlannerPoints> disownGpsPlannerPointsDEPRECATED();

  inline bool isGpsPlannerPlanDEPRECATED();
  inline bool hasGpsPlannerPlanDEPRECATED();
  inline  ::cereal::GPSPlannerPlan::Builder getGpsPlannerPlanDEPRECATED();
  inline void setGpsPlannerPlanDEPRECATED( ::cereal::GPSPlannerPlan::Reader value);
  inline  ::cereal::GPSPlannerPlan::Builder initGpsPlannerPlanDEPRECATED();
  inline void adoptGpsPlannerPlanDEPRECATED(::capnp::Orphan< ::cereal::GPSPlannerPlan>&& value);
  inline ::capnp::Orphan< ::cereal::GPSPlannerPlan> disownGpsPlannerPlanDEPRECATED();

  inline bool isApplanixRawDEPRECATED();
  inline bool hasApplanixRawDEPRECATED();
  inline  ::capnp::Data::Builder getApplanixRawDEPRECATED();
  inline void setApplanixRawDEPRECATED( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initApplanixRawDEPRECATED(unsigned int size);
  inline void adoptApplanixRawDEPRECATED(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownApplanixRawDEPRECATED();

  inline bool isTrafficEventsDEPRECATED();
  inline bool hasTrafficEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Builder getTrafficEventsDEPRECATED();
  inline void setTrafficEventsDEPRECATED( ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Builder initTrafficEventsDEPRECATED(unsigned int size);
  inline void adoptTrafficEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>> disownTrafficEventsDEPRECATED();

  inline bool isLiveLocationTimingDEPRECATED();
  inline bool hasLiveLocationTimingDEPRECATED();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationTimingDEPRECATED();
  inline void setLiveLocationTimingDEPRECATED( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationTimingDEPRECATED();
  inline void adoptLiveLocationTimingDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationTimingDEPRECATED();

  inline bool isOrbslamCorrectionDEPRECATED();
  inline bool hasOrbslamCorrectionDEPRECATED();
  inline  ::cereal::OrbslamCorrection::Builder getOrbslamCorrectionDEPRECATED();
  inline void setOrbslamCorrectionDEPRECATED( ::cereal::OrbslamCorrection::Reader value);
  inline  ::cereal::OrbslamCorrection::Builder initOrbslamCorrectionDEPRECATED();
  inline void adoptOrbslamCorrectionDEPRECATED(::capnp::Orphan< ::cereal::OrbslamCorrection>&& value);
  inline ::capnp::Orphan< ::cereal::OrbslamCorrection> disownOrbslamCorrectionDEPRECATED();

  inline bool isLiveLocationCorrectedDEPRECATED();
  inline bool hasLiveLocationCorrectedDEPRECATED();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationCorrectedDEPRECATED();
  inline void setLiveLocationCorrectedDEPRECATED( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationCorrectedDEPRECATED();
  inline void adoptLiveLocationCorrectedDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationCorrectedDEPRECATED();

  inline bool isOrbObservationDEPRECATED();
  inline bool hasOrbObservationDEPRECATED();
  inline  ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Builder getOrbObservationDEPRECATED();
  inline void setOrbObservationDEPRECATED( ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Builder initOrbObservationDEPRECATED(unsigned int size);
  inline void adoptOrbObservationDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>> disownOrbObservationDEPRECATED();

  inline bool isGpsLocationExternal();
  inline bool hasGpsLocationExternal();
  inline  ::cereal::GpsLocationData::Builder getGpsLocationExternal();
  inline void setGpsLocationExternal( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocationExternal();
  inline void adoptGpsLocationExternal(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocationExternal();

  inline bool isLocationDEPRECATED();
  inline bool hasLocationDEPRECATED();
  inline  ::cereal::LiveLocationData::Builder getLocationDEPRECATED();
  inline void setLocationDEPRECATED( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLocationDEPRECATED();
  inline void adoptLocationDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLocationDEPRECATED();

  inline bool isUiNavigationEventDEPRECATED();
  inline bool hasUiNavigationEventDEPRECATED();
  inline  ::cereal::UiNavigationEvent::Builder getUiNavigationEventDEPRECATED();
  inline void setUiNavigationEventDEPRECATED( ::cereal::UiNavigationEvent::Reader value);
  inline  ::cereal::UiNavigationEvent::Builder initUiNavigationEventDEPRECATED();
  inline void adoptUiNavigationEventDEPRECATED(::capnp::Orphan< ::cereal::UiNavigationEvent>&& value);
  inline ::capnp::Orphan< ::cereal::UiNavigationEvent> disownUiNavigationEventDEPRECATED();

  inline bool isLiveLocationKalmanLegacyDEPRECATED();
  inline bool hasLiveLocationKalmanLegacyDEPRECATED();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationKalmanLegacyDEPRECATED();
  inline void setLiveLocationKalmanLegacyDEPRECATED( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationKalmanLegacyDEPRECATED();
  inline void adoptLiveLocationKalmanLegacyDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationKalmanLegacyDEPRECATED();

  inline bool isTestJoystick();
  inline bool hasTestJoystick();
  inline  ::cereal::Joystick::Builder getTestJoystick();
  inline void setTestJoystick( ::cereal::Joystick::Reader value);
  inline  ::cereal::Joystick::Builder initTestJoystick();
  inline void adoptTestJoystick(::capnp::Orphan< ::cereal::Joystick>&& value);
  inline ::capnp::Orphan< ::cereal::Joystick> disownTestJoystick();

  inline bool isOrbOdometryDEPRECATED();
  inline bool hasOrbOdometryDEPRECATED();
  inline  ::cereal::OrbOdometry::Builder getOrbOdometryDEPRECATED();
  inline void setOrbOdometryDEPRECATED( ::cereal::OrbOdometry::Reader value);
  inline  ::cereal::OrbOdometry::Builder initOrbOdometryDEPRECATED();
  inline void adoptOrbOdometryDEPRECATED(::capnp::Orphan< ::cereal::OrbOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::OrbOdometry> disownOrbOdometryDEPRECATED();

  inline bool isOrbFeaturesDEPRECATED();
  inline bool hasOrbFeaturesDEPRECATED();
  inline  ::cereal::OrbFeatures::Builder getOrbFeaturesDEPRECATED();
  inline void setOrbFeaturesDEPRECATED( ::cereal::OrbFeatures::Reader value);
  inline  ::cereal::OrbFeatures::Builder initOrbFeaturesDEPRECATED();
  inline void adoptOrbFeaturesDEPRECATED(::capnp::Orphan< ::cereal::OrbFeatures>&& value);
  inline ::capnp::Orphan< ::cereal::OrbFeatures> disownOrbFeaturesDEPRECATED();

  inline bool isApplanixLocationDEPRECATED();
  inline bool hasApplanixLocationDEPRECATED();
  inline  ::cereal::LiveLocationData::Builder getApplanixLocationDEPRECATED();
  inline void setApplanixLocationDEPRECATED( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initApplanixLocationDEPRECATED();
  inline void adoptApplanixLocationDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownApplanixLocationDEPRECATED();

  inline bool isOrbKeyFrameDEPRECATED();
  inline bool hasOrbKeyFrameDEPRECATED();
  inline  ::cereal::OrbKeyFrame::Builder getOrbKeyFrameDEPRECATED();
  inline void setOrbKeyFrameDEPRECATED( ::cereal::OrbKeyFrame::Reader value);
  inline  ::cereal::OrbKeyFrame::Builder initOrbKeyFrameDEPRECATED();
  inline void adoptOrbKeyFrameDEPRECATED(::capnp::Orphan< ::cereal::OrbKeyFrame>&& value);
  inline ::capnp::Orphan< ::cereal::OrbKeyFrame> disownOrbKeyFrameDEPRECATED();

  inline bool isUiLayoutStateDEPRECATED();
  inline bool hasUiLayoutStateDEPRECATED();
  inline  ::cereal::UiLayoutState::Builder getUiLayoutStateDEPRECATED();
  inline void setUiLayoutStateDEPRECATED( ::cereal::UiLayoutState::Reader value);
  inline  ::cereal::UiLayoutState::Builder initUiLayoutStateDEPRECATED();
  inline void adoptUiLayoutStateDEPRECATED(::capnp::Orphan< ::cereal::UiLayoutState>&& value);
  inline ::capnp::Orphan< ::cereal::UiLayoutState> disownUiLayoutStateDEPRECATED();

  inline bool isOrbFeaturesSummaryDEPRECATED();
  inline bool hasOrbFeaturesSummaryDEPRECATED();
  inline  ::cereal::OrbFeaturesSummary::Builder getOrbFeaturesSummaryDEPRECATED();
  inline void setOrbFeaturesSummaryDEPRECATED( ::cereal::OrbFeaturesSummary::Reader value);
  inline  ::cereal::OrbFeaturesSummary::Builder initOrbFeaturesSummaryDEPRECATED();
  inline void adoptOrbFeaturesSummaryDEPRECATED(::capnp::Orphan< ::cereal::OrbFeaturesSummary>&& value);
  inline ::capnp::Orphan< ::cereal::OrbFeaturesSummary> disownOrbFeaturesSummaryDEPRECATED();

  inline bool isDriverStateDEPRECATED();
  inline bool hasDriverStateDEPRECATED();
  inline  ::cereal::DriverStateDEPRECATED::Builder getDriverStateDEPRECATED();
  inline void setDriverStateDEPRECATED( ::cereal::DriverStateDEPRECATED::Reader value);
  inline  ::cereal::DriverStateDEPRECATED::Builder initDriverStateDEPRECATED();
  inline void adoptDriverStateDEPRECATED(::capnp::Orphan< ::cereal::DriverStateDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::DriverStateDEPRECATED> disownDriverStateDEPRECATED();

  inline bool isBoot();
  inline bool hasBoot();
  inline  ::cereal::Boot::Builder getBoot();
  inline void setBoot( ::cereal::Boot::Reader value);
  inline  ::cereal::Boot::Builder initBoot();
  inline void adoptBoot(::capnp::Orphan< ::cereal::Boot>&& value);
  inline ::capnp::Orphan< ::cereal::Boot> disownBoot();

  inline bool isLiveParameters();
  inline bool hasLiveParameters();
  inline  ::cereal::LiveParametersData::Builder getLiveParameters();
  inline void setLiveParameters( ::cereal::LiveParametersData::Reader value);
  inline  ::cereal::LiveParametersData::Builder initLiveParameters();
  inline void adoptLiveParameters(::capnp::Orphan< ::cereal::LiveParametersData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveParametersData> disownLiveParameters();

  inline bool isLiveMapDataDEPRECATED();
  inline bool hasLiveMapDataDEPRECATED();
  inline  ::cereal::LiveMapDataDEPRECATED::Builder getLiveMapDataDEPRECATED();
  inline void setLiveMapDataDEPRECATED( ::cereal::LiveMapDataDEPRECATED::Reader value);
  inline  ::cereal::LiveMapDataDEPRECATED::Builder initLiveMapDataDEPRECATED();
  inline void adoptLiveMapDataDEPRECATED(::capnp::Orphan< ::cereal::LiveMapDataDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::LiveMapDataDEPRECATED> disownLiveMapDataDEPRECATED();

  inline bool isCameraOdometry();
  inline bool hasCameraOdometry();
  inline  ::cereal::CameraOdometry::Builder getCameraOdometry();
  inline void setCameraOdometry( ::cereal::CameraOdometry::Reader value);
  inline  ::cereal::CameraOdometry::Builder initCameraOdometry();
  inline void adoptCameraOdometry(::capnp::Orphan< ::cereal::CameraOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::CameraOdometry> disownCameraOdometry();

  inline bool isLateralPlanDEPRECATED();
  inline bool hasLateralPlanDEPRECATED();
  inline  ::cereal::LateralPlan::Builder getLateralPlanDEPRECATED();
  inline void setLateralPlanDEPRECATED( ::cereal::LateralPlan::Reader value);
  inline  ::cereal::LateralPlan::Builder initLateralPlanDEPRECATED();
  inline void adoptLateralPlanDEPRECATED(::capnp::Orphan< ::cereal::LateralPlan>&& value);
  inline ::capnp::Orphan< ::cereal::LateralPlan> disownLateralPlanDEPRECATED();

  inline bool isKalmanOdometryDEPRECATED();
  inline bool hasKalmanOdometryDEPRECATED();
  inline  ::cereal::KalmanOdometry::Builder getKalmanOdometryDEPRECATED();
  inline void setKalmanOdometryDEPRECATED( ::cereal::KalmanOdometry::Reader value);
  inline  ::cereal::KalmanOdometry::Builder initKalmanOdometryDEPRECATED();
  inline void adoptKalmanOdometryDEPRECATED(::capnp::Orphan< ::cereal::KalmanOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::KalmanOdometry> disownKalmanOdometryDEPRECATED();

  inline bool isThumbnail();
  inline bool hasThumbnail();
  inline  ::cereal::Thumbnail::Builder getThumbnail();
  inline void setThumbnail( ::cereal::Thumbnail::Reader value);
  inline  ::cereal::Thumbnail::Builder initThumbnail();
  inline void adoptThumbnail(::capnp::Orphan< ::cereal::Thumbnail>&& value);
  inline ::capnp::Orphan< ::cereal::Thumbnail> disownThumbnail();

  inline bool getValid();
  inline void setValid(bool value);

  inline bool isOnroadEventsDEPRECATED();
  inline bool hasOnroadEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getOnroadEventsDEPRECATED();
  inline void setOnroadEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initOnroadEventsDEPRECATED(unsigned int size);
  inline void adoptOnroadEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> disownOnroadEventsDEPRECATED();

  inline bool isCarParams();
  inline bool hasCarParams();
  inline  ::cereal::CarParams::Builder getCarParams();
  inline void setCarParams( ::cereal::CarParams::Reader value);
  inline  ::cereal::CarParams::Builder initCarParams();
  inline void adoptCarParams(::capnp::Orphan< ::cereal::CarParams>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams> disownCarParams();

  inline bool isDriverCameraState();
  inline bool hasDriverCameraState();
  inline  ::cereal::FrameData::Builder getDriverCameraState();
  inline void setDriverCameraState( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initDriverCameraState();
  inline void adoptDriverCameraState(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownDriverCameraState();

  inline bool isDriverMonitoringState();
  inline bool hasDriverMonitoringState();
  inline  ::cereal::DriverMonitoringState::Builder getDriverMonitoringState();
  inline void setDriverMonitoringState( ::cereal::DriverMonitoringState::Reader value);
  inline  ::cereal::DriverMonitoringState::Builder initDriverMonitoringState();
  inline void adoptDriverMonitoringState(::capnp::Orphan< ::cereal::DriverMonitoringState>&& value);
  inline ::capnp::Orphan< ::cereal::DriverMonitoringState> disownDriverMonitoringState();

  inline bool isLiveLocationKalmanDEPRECATED();
  inline bool hasLiveLocationKalmanDEPRECATED();
  inline  ::cereal::LiveLocationKalman::Builder getLiveLocationKalmanDEPRECATED();
  inline void setLiveLocationKalmanDEPRECATED( ::cereal::LiveLocationKalman::Reader value);
  inline  ::cereal::LiveLocationKalman::Builder initLiveLocationKalmanDEPRECATED();
  inline void adoptLiveLocationKalmanDEPRECATED(::capnp::Orphan< ::cereal::LiveLocationKalman>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationKalman> disownLiveLocationKalmanDEPRECATED();

  inline bool isSentinel();
  inline bool hasSentinel();
  inline  ::cereal::Sentinel::Builder getSentinel();
  inline void setSentinel( ::cereal::Sentinel::Reader value);
  inline  ::cereal::Sentinel::Builder initSentinel();
  inline void adoptSentinel(::capnp::Orphan< ::cereal::Sentinel>&& value);
  inline ::capnp::Orphan< ::cereal::Sentinel> disownSentinel();

  inline bool isWideRoadCameraState();
  inline bool hasWideRoadCameraState();
  inline  ::cereal::FrameData::Builder getWideRoadCameraState();
  inline void setWideRoadCameraState( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initWideRoadCameraState();
  inline void adoptWideRoadCameraState(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownWideRoadCameraState();

  inline bool isModelV2();
  inline bool hasModelV2();
  inline  ::cereal::ModelDataV2::Builder getModelV2();
  inline void setModelV2( ::cereal::ModelDataV2::Reader value);
  inline  ::cereal::ModelDataV2::Builder initModelV2();
  inline void adoptModelV2(::capnp::Orphan< ::cereal::ModelDataV2>&& value);
  inline ::capnp::Orphan< ::cereal::ModelDataV2> disownModelV2();

  inline bool isDriverEncodeIdx();
  inline bool hasDriverEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getDriverEncodeIdx();
  inline void setDriverEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initDriverEncodeIdx();
  inline void adoptDriverEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownDriverEncodeIdx();

  inline bool isWideRoadEncodeIdx();
  inline bool hasWideRoadEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getWideRoadEncodeIdx();
  inline void setWideRoadEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initWideRoadEncodeIdx();
  inline void adoptWideRoadEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownWideRoadEncodeIdx();

  inline bool isManagerState();
  inline bool hasManagerState();
  inline  ::cereal::ManagerState::Builder getManagerState();
  inline void setManagerState( ::cereal::ManagerState::Reader value);
  inline  ::cereal::ManagerState::Builder initManagerState();
  inline void adoptManagerState(::capnp::Orphan< ::cereal::ManagerState>&& value);
  inline ::capnp::Orphan< ::cereal::ManagerState> disownManagerState();

  inline bool isUploaderState();
  inline bool hasUploaderState();
  inline  ::cereal::UploaderState::Builder getUploaderState();
  inline void setUploaderState( ::cereal::UploaderState::Reader value);
  inline  ::cereal::UploaderState::Builder initUploaderState();
  inline void adoptUploaderState(::capnp::Orphan< ::cereal::UploaderState>&& value);
  inline ::capnp::Orphan< ::cereal::UploaderState> disownUploaderState();

  inline bool isPeripheralState();
  inline bool hasPeripheralState();
  inline  ::cereal::PeripheralState::Builder getPeripheralState();
  inline void setPeripheralState( ::cereal::PeripheralState::Reader value);
  inline  ::cereal::PeripheralState::Builder initPeripheralState();
  inline void adoptPeripheralState(::capnp::Orphan< ::cereal::PeripheralState>&& value);
  inline ::capnp::Orphan< ::cereal::PeripheralState> disownPeripheralState();

  inline bool isPandaStates();
  inline bool hasPandaStates();
  inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder getPandaStates();
  inline void setPandaStates( ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder initPandaStates(unsigned int size);
  inline void adoptPandaStates(::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>> disownPandaStates();

  inline bool isNavInstruction();
  inline bool hasNavInstruction();
  inline  ::cereal::NavInstruction::Builder getNavInstruction();
  inline void setNavInstruction( ::cereal::NavInstruction::Reader value);
  inline  ::cereal::NavInstruction::Builder initNavInstruction();
  inline void adoptNavInstruction(::capnp::Orphan< ::cereal::NavInstruction>&& value);
  inline ::capnp::Orphan< ::cereal::NavInstruction> disownNavInstruction();

  inline bool isNavRoute();
  inline bool hasNavRoute();
  inline  ::cereal::NavRoute::Builder getNavRoute();
  inline void setNavRoute( ::cereal::NavRoute::Reader value);
  inline  ::cereal::NavRoute::Builder initNavRoute();
  inline void adoptNavRoute(::capnp::Orphan< ::cereal::NavRoute>&& value);
  inline ::capnp::Orphan< ::cereal::NavRoute> disownNavRoute();

  inline bool isNavThumbnail();
  inline bool hasNavThumbnail();
  inline  ::cereal::Thumbnail::Builder getNavThumbnail();
  inline void setNavThumbnail( ::cereal::Thumbnail::Reader value);
  inline  ::cereal::Thumbnail::Builder initNavThumbnail();
  inline void adoptNavThumbnail(::capnp::Orphan< ::cereal::Thumbnail>&& value);
  inline ::capnp::Orphan< ::cereal::Thumbnail> disownNavThumbnail();

  inline bool isErrorLogMessage();
  inline bool hasErrorLogMessage();
  inline  ::capnp::Text::Builder getErrorLogMessage();
  inline void setErrorLogMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initErrorLogMessage(unsigned int size);
  inline void adoptErrorLogMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownErrorLogMessage();

  inline bool isRoadEncodeData();
  inline bool hasRoadEncodeData();
  inline  ::cereal::EncodeData::Builder getRoadEncodeData();
  inline void setRoadEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initRoadEncodeData();
  inline void adoptRoadEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownRoadEncodeData();

  inline bool isDriverEncodeData();
  inline bool hasDriverEncodeData();
  inline  ::cereal::EncodeData::Builder getDriverEncodeData();
  inline void setDriverEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initDriverEncodeData();
  inline void adoptDriverEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownDriverEncodeData();

  inline bool isWideRoadEncodeData();
  inline bool hasWideRoadEncodeData();
  inline  ::cereal::EncodeData::Builder getWideRoadEncodeData();
  inline void setWideRoadEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initWideRoadEncodeData();
  inline void adoptWideRoadEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownWideRoadEncodeData();

  inline bool isQRoadEncodeData();
  inline bool hasQRoadEncodeData();
  inline  ::cereal::EncodeData::Builder getQRoadEncodeData();
  inline void setQRoadEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initQRoadEncodeData();
  inline void adoptQRoadEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownQRoadEncodeData();

  inline bool isQRoadEncodeIdx();
  inline bool hasQRoadEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getQRoadEncodeIdx();
  inline void setQRoadEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initQRoadEncodeIdx();
  inline void adoptQRoadEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownQRoadEncodeIdx();

  inline bool isGnssMeasurements();
  inline bool hasGnssMeasurements();
  inline  ::cereal::GnssMeasurements::Builder getGnssMeasurements();
  inline void setGnssMeasurements( ::cereal::GnssMeasurements::Reader value);
  inline  ::cereal::GnssMeasurements::Builder initGnssMeasurements();
  inline void adoptGnssMeasurements(::capnp::Orphan< ::cereal::GnssMeasurements>&& value);
  inline ::capnp::Orphan< ::cereal::GnssMeasurements> disownGnssMeasurements();

  inline bool isDriverStateV2();
  inline bool hasDriverStateV2();
  inline  ::cereal::DriverStateV2::Builder getDriverStateV2();
  inline void setDriverStateV2( ::cereal::DriverStateV2::Reader value);
  inline  ::cereal::DriverStateV2::Builder initDriverStateV2();
  inline void adoptDriverStateV2(::capnp::Orphan< ::cereal::DriverStateV2>&& value);
  inline ::capnp::Orphan< ::cereal::DriverStateV2> disownDriverStateV2();

  inline bool isUserBookmark();
  inline bool hasUserBookmark();
  inline  ::cereal::UserBookmark::Builder getUserBookmark();
  inline void setUserBookmark( ::cereal::UserBookmark::Reader value);
  inline  ::cereal::UserBookmark::Builder initUserBookmark();
  inline void adoptUserBookmark(::capnp::Orphan< ::cereal::UserBookmark>&& value);
  inline ::capnp::Orphan< ::cereal::UserBookmark> disownUserBookmark();

  inline bool isLiveTorqueParameters();
  inline bool hasLiveTorqueParameters();
  inline  ::cereal::LiveTorqueParametersData::Builder getLiveTorqueParameters();
  inline void setLiveTorqueParameters( ::cereal::LiveTorqueParametersData::Reader value);
  inline  ::cereal::LiveTorqueParametersData::Builder initLiveTorqueParameters();
  inline void adoptLiveTorqueParameters(::capnp::Orphan< ::cereal::LiveTorqueParametersData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveTorqueParametersData> disownLiveTorqueParameters();

  inline bool isMagnetometer();
  inline bool hasMagnetometer();
  inline  ::cereal::SensorEventData::Builder getMagnetometer();
  inline void setMagnetometer( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initMagnetometer();
  inline void adoptMagnetometer(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownMagnetometer();

  inline bool isLightSensor();
  inline bool hasLightSensor();
  inline  ::cereal::SensorEventData::Builder getLightSensor();
  inline void setLightSensor( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initLightSensor();
  inline void adoptLightSensor(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownLightSensor();

  inline bool isTemperatureSensor();
  inline bool hasTemperatureSensor();
  inline  ::cereal::SensorEventData::Builder getTemperatureSensor();
  inline void setTemperatureSensor( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initTemperatureSensor();
  inline void adoptTemperatureSensor(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownTemperatureSensor();

  inline bool isAccelerometer();
  inline bool hasAccelerometer();
  inline  ::cereal::SensorEventData::Builder getAccelerometer();
  inline void setAccelerometer( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initAccelerometer();
  inline void adoptAccelerometer(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownAccelerometer();

  inline bool isGyroscope();
  inline bool hasGyroscope();
  inline  ::cereal::SensorEventData::Builder getGyroscope();
  inline void setGyroscope( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initGyroscope();
  inline void adoptGyroscope(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownGyroscope();

  inline bool isGyroscope2();
  inline bool hasGyroscope2();
  inline  ::cereal::SensorEventData::Builder getGyroscope2();
  inline void setGyroscope2( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initGyroscope2();
  inline void adoptGyroscope2(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownGyroscope2();

  inline bool isAccelerometer2();
  inline bool hasAccelerometer2();
  inline  ::cereal::SensorEventData::Builder getAccelerometer2();
  inline void setAccelerometer2( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initAccelerometer2();
  inline void adoptAccelerometer2(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownAccelerometer2();

  inline bool isUiDebug();
  inline bool hasUiDebug();
  inline  ::cereal::UIDebug::Builder getUiDebug();
  inline void setUiDebug( ::cereal::UIDebug::Reader value);
  inline  ::cereal::UIDebug::Builder initUiDebug();
  inline void adoptUiDebug(::capnp::Orphan< ::cereal::UIDebug>&& value);
  inline ::capnp::Orphan< ::cereal::UIDebug> disownUiDebug();

  inline bool isSoundPressure();
  inline bool hasSoundPressure();
  inline  ::cereal::SoundPressure::Builder getSoundPressure();
  inline void setSoundPressure( ::cereal::SoundPressure::Reader value);
  inline  ::cereal::SoundPressure::Builder initSoundPressure();
  inline void adoptSoundPressure(::capnp::Orphan< ::cereal::SoundPressure>&& value);
  inline ::capnp::Orphan< ::cereal::SoundPressure> disownSoundPressure();

  inline bool isNavModelDEPRECATED();
  inline bool hasNavModelDEPRECATED();
  inline  ::cereal::NavModelData::Builder getNavModelDEPRECATED();
  inline void setNavModelDEPRECATED( ::cereal::NavModelData::Reader value);
  inline  ::cereal::NavModelData::Builder initNavModelDEPRECATED();
  inline void adoptNavModelDEPRECATED(::capnp::Orphan< ::cereal::NavModelData>&& value);
  inline ::capnp::Orphan< ::cereal::NavModelData> disownNavModelDEPRECATED();

  inline bool isMapRenderState();
  inline bool hasMapRenderState();
  inline  ::cereal::MapRenderState::Builder getMapRenderState();
  inline void setMapRenderState( ::cereal::MapRenderState::Reader value);
  inline  ::cereal::MapRenderState::Builder initMapRenderState();
  inline void adoptMapRenderState(::capnp::Orphan< ::cereal::MapRenderState>&& value);
  inline ::capnp::Orphan< ::cereal::MapRenderState> disownMapRenderState();

  inline bool isUiPlanDEPRECATED();
  inline bool hasUiPlanDEPRECATED();
  inline  ::cereal::UiPlan::Builder getUiPlanDEPRECATED();
  inline void setUiPlanDEPRECATED( ::cereal::UiPlan::Reader value);
  inline  ::cereal::UiPlan::Builder initUiPlanDEPRECATED();
  inline void adoptUiPlanDEPRECATED(::capnp::Orphan< ::cereal::UiPlan>&& value);
  inline ::capnp::Orphan< ::cereal::UiPlan> disownUiPlanDEPRECATED();

  inline bool isCustomReserved0();
  inline bool hasCustomReserved0();
  inline  ::cereal::CustomReserved0::Builder getCustomReserved0();
  inline void setCustomReserved0( ::cereal::CustomReserved0::Reader value);
  inline  ::cereal::CustomReserved0::Builder initCustomReserved0();
  inline void adoptCustomReserved0(::capnp::Orphan< ::cereal::CustomReserved0>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved0> disownCustomReserved0();

  inline bool isCustomReserved1();
  inline bool hasCustomReserved1();
  inline  ::cereal::CustomReserved1::Builder getCustomReserved1();
  inline void setCustomReserved1( ::cereal::CustomReserved1::Reader value);
  inline  ::cereal::CustomReserved1::Builder initCustomReserved1();
  inline void adoptCustomReserved1(::capnp::Orphan< ::cereal::CustomReserved1>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved1> disownCustomReserved1();

  inline bool isCustomReserved2();
  inline bool hasCustomReserved2();
  inline  ::cereal::CustomReserved2::Builder getCustomReserved2();
  inline void setCustomReserved2( ::cereal::CustomReserved2::Reader value);
  inline  ::cereal::CustomReserved2::Builder initCustomReserved2();
  inline void adoptCustomReserved2(::capnp::Orphan< ::cereal::CustomReserved2>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved2> disownCustomReserved2();

  inline bool isCustomReserved3();
  inline bool hasCustomReserved3();
  inline  ::cereal::CustomReserved3::Builder getCustomReserved3();
  inline void setCustomReserved3( ::cereal::CustomReserved3::Reader value);
  inline  ::cereal::CustomReserved3::Builder initCustomReserved3();
  inline void adoptCustomReserved3(::capnp::Orphan< ::cereal::CustomReserved3>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved3> disownCustomReserved3();

  inline bool isCustomReserved4();
  inline bool hasCustomReserved4();
  inline  ::cereal::CustomReserved4::Builder getCustomReserved4();
  inline void setCustomReserved4( ::cereal::CustomReserved4::Reader value);
  inline  ::cereal::CustomReserved4::Builder initCustomReserved4();
  inline void adoptCustomReserved4(::capnp::Orphan< ::cereal::CustomReserved4>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved4> disownCustomReserved4();

  inline bool isCustomReserved5();
  inline bool hasCustomReserved5();
  inline  ::cereal::CustomReserved5::Builder getCustomReserved5();
  inline void setCustomReserved5( ::cereal::CustomReserved5::Reader value);
  inline  ::cereal::CustomReserved5::Builder initCustomReserved5();
  inline void adoptCustomReserved5(::capnp::Orphan< ::cereal::CustomReserved5>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved5> disownCustomReserved5();

  inline bool isCustomReserved6();
  inline bool hasCustomReserved6();
  inline  ::cereal::CustomReserved6::Builder getCustomReserved6();
  inline void setCustomReserved6( ::cereal::CustomReserved6::Reader value);
  inline  ::cereal::CustomReserved6::Builder initCustomReserved6();
  inline void adoptCustomReserved6(::capnp::Orphan< ::cereal::CustomReserved6>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved6> disownCustomReserved6();

  inline bool isCustomReserved7();
  inline bool hasCustomReserved7();
  inline  ::cereal::CustomReserved7::Builder getCustomReserved7();
  inline void setCustomReserved7( ::cereal::CustomReserved7::Reader value);
  inline  ::cereal::CustomReserved7::Builder initCustomReserved7();
  inline void adoptCustomReserved7(::capnp::Orphan< ::cereal::CustomReserved7>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved7> disownCustomReserved7();

  inline bool isCustomReserved8();
  inline bool hasCustomReserved8();
  inline  ::cereal::CustomReserved8::Builder getCustomReserved8();
  inline void setCustomReserved8( ::cereal::CustomReserved8::Reader value);
  inline  ::cereal::CustomReserved8::Builder initCustomReserved8();
  inline void adoptCustomReserved8(::capnp::Orphan< ::cereal::CustomReserved8>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved8> disownCustomReserved8();

  inline bool isCustomReserved9();
  inline bool hasCustomReserved9();
  inline  ::cereal::CustomReserved9::Builder getCustomReserved9();
  inline void setCustomReserved9( ::cereal::CustomReserved9::Reader value);
  inline  ::cereal::CustomReserved9::Builder initCustomReserved9();
  inline void adoptCustomReserved9(::capnp::Orphan< ::cereal::CustomReserved9>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved9> disownCustomReserved9();

  inline bool isLivestreamRoadEncodeIdx();
  inline bool hasLivestreamRoadEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getLivestreamRoadEncodeIdx();
  inline void setLivestreamRoadEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initLivestreamRoadEncodeIdx();
  inline void adoptLivestreamRoadEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownLivestreamRoadEncodeIdx();

  inline bool isLivestreamWideRoadEncodeIdx();
  inline bool hasLivestreamWideRoadEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getLivestreamWideRoadEncodeIdx();
  inline void setLivestreamWideRoadEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initLivestreamWideRoadEncodeIdx();
  inline void adoptLivestreamWideRoadEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownLivestreamWideRoadEncodeIdx();

  inline bool isLivestreamDriverEncodeIdx();
  inline bool hasLivestreamDriverEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getLivestreamDriverEncodeIdx();
  inline void setLivestreamDriverEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initLivestreamDriverEncodeIdx();
  inline void adoptLivestreamDriverEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownLivestreamDriverEncodeIdx();

  inline bool isLivestreamRoadEncodeData();
  inline bool hasLivestreamRoadEncodeData();
  inline  ::cereal::EncodeData::Builder getLivestreamRoadEncodeData();
  inline void setLivestreamRoadEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initLivestreamRoadEncodeData();
  inline void adoptLivestreamRoadEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownLivestreamRoadEncodeData();

  inline bool isLivestreamWideRoadEncodeData();
  inline bool hasLivestreamWideRoadEncodeData();
  inline  ::cereal::EncodeData::Builder getLivestreamWideRoadEncodeData();
  inline void setLivestreamWideRoadEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initLivestreamWideRoadEncodeData();
  inline void adoptLivestreamWideRoadEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownLivestreamWideRoadEncodeData();

  inline bool isLivestreamDriverEncodeData();
  inline bool hasLivestreamDriverEncodeData();
  inline  ::cereal::EncodeData::Builder getLivestreamDriverEncodeData();
  inline void setLivestreamDriverEncodeData( ::cereal::EncodeData::Reader value);
  inline  ::cereal::EncodeData::Builder initLivestreamDriverEncodeData();
  inline void adoptLivestreamDriverEncodeData(::capnp::Orphan< ::cereal::EncodeData>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeData> disownLivestreamDriverEncodeData();

  inline bool isTemperatureSensor2();
  inline bool hasTemperatureSensor2();
  inline  ::cereal::SensorEventData::Builder getTemperatureSensor2();
  inline void setTemperatureSensor2( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initTemperatureSensor2();
  inline void adoptTemperatureSensor2(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownTemperatureSensor2();

  inline bool isCustomReservedRawData0();
  inline bool hasCustomReservedRawData0();
  inline  ::capnp::Data::Builder getCustomReservedRawData0();
  inline void setCustomReservedRawData0( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initCustomReservedRawData0(unsigned int size);
  inline void adoptCustomReservedRawData0(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownCustomReservedRawData0();

  inline bool isCustomReservedRawData1();
  inline bool hasCustomReservedRawData1();
  inline  ::capnp::Data::Builder getCustomReservedRawData1();
  inline void setCustomReservedRawData1( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initCustomReservedRawData1(unsigned int size);
  inline void adoptCustomReservedRawData1(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownCustomReservedRawData1();

  inline bool isCustomReservedRawData2();
  inline bool hasCustomReservedRawData2();
  inline  ::capnp::Data::Builder getCustomReservedRawData2();
  inline void setCustomReservedRawData2( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initCustomReservedRawData2(unsigned int size);
  inline void adoptCustomReservedRawData2(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownCustomReservedRawData2();

  inline bool isCarOutput();
  inline bool hasCarOutput();
  inline  ::cereal::CarOutput::Builder getCarOutput();
  inline void setCarOutput( ::cereal::CarOutput::Reader value);
  inline  ::cereal::CarOutput::Builder initCarOutput();
  inline void adoptCarOutput(::capnp::Orphan< ::cereal::CarOutput>&& value);
  inline ::capnp::Orphan< ::cereal::CarOutput> disownCarOutput();

  inline bool isDrivingModelData();
  inline bool hasDrivingModelData();
  inline  ::cereal::DrivingModelData::Builder getDrivingModelData();
  inline void setDrivingModelData( ::cereal::DrivingModelData::Reader value);
  inline  ::cereal::DrivingModelData::Builder initDrivingModelData();
  inline void adoptDrivingModelData(::capnp::Orphan< ::cereal::DrivingModelData>&& value);
  inline ::capnp::Orphan< ::cereal::DrivingModelData> disownDrivingModelData();

  inline bool isLivePose();
  inline bool hasLivePose();
  inline  ::cereal::LivePose::Builder getLivePose();
  inline void setLivePose( ::cereal::LivePose::Reader value);
  inline  ::cereal::LivePose::Builder initLivePose();
  inline void adoptLivePose(::capnp::Orphan< ::cereal::LivePose>&& value);
  inline ::capnp::Orphan< ::cereal::LivePose> disownLivePose();

  inline bool isSelfdriveState();
  inline bool hasSelfdriveState();
  inline  ::cereal::SelfdriveState::Builder getSelfdriveState();
  inline void setSelfdriveState( ::cereal::SelfdriveState::Reader value);
  inline  ::cereal::SelfdriveState::Builder initSelfdriveState();
  inline void adoptSelfdriveState(::capnp::Orphan< ::cereal::SelfdriveState>&& value);
  inline ::capnp::Orphan< ::cereal::SelfdriveState> disownSelfdriveState();

  inline bool isLiveTracks();
  inline bool hasLiveTracks();
  inline  ::cereal::RadarData::Builder getLiveTracks();
  inline void setLiveTracks( ::cereal::RadarData::Reader value);
  inline  ::cereal::RadarData::Builder initLiveTracks();
  inline void adoptLiveTracks(::capnp::Orphan< ::cereal::RadarData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarData> disownLiveTracks();

  inline bool isDriverAssistance();
  inline bool hasDriverAssistance();
  inline  ::cereal::DriverAssistance::Builder getDriverAssistance();
  inline void setDriverAssistance( ::cereal::DriverAssistance::Reader value);
  inline  ::cereal::DriverAssistance::Builder initDriverAssistance();
  inline void adoptDriverAssistance(::capnp::Orphan< ::cereal::DriverAssistance>&& value);
  inline ::capnp::Orphan< ::cereal::DriverAssistance> disownDriverAssistance();

  inline bool isAlertDebug();
  inline bool hasAlertDebug();
  inline  ::cereal::DebugAlert::Builder getAlertDebug();
  inline void setAlertDebug( ::cereal::DebugAlert::Reader value);
  inline  ::cereal::DebugAlert::Builder initAlertDebug();
  inline void adoptAlertDebug(::capnp::Orphan< ::cereal::DebugAlert>&& value);
  inline ::capnp::Orphan< ::cereal::DebugAlert> disownAlertDebug();

  inline bool isOnroadEvents();
  inline bool hasOnroadEvents();
  inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder getOnroadEvents();
  inline void setOnroadEvents( ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder initOnroadEvents(unsigned int size);
  inline void adoptOnroadEvents(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>> disownOnroadEvents();

  inline bool isTouch();
  inline bool hasTouch();
  inline  ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Builder getTouch();
  inline void setTouch( ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Builder initTouch(unsigned int size);
  inline void adoptTouch(::capnp::Orphan< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>> disownTouch();

  inline bool isCustomReserved10();
  inline bool hasCustomReserved10();
  inline  ::cereal::CustomReserved10::Builder getCustomReserved10();
  inline void setCustomReserved10( ::cereal::CustomReserved10::Reader value);
  inline  ::cereal::CustomReserved10::Builder initCustomReserved10();
  inline void adoptCustomReserved10(::capnp::Orphan< ::cereal::CustomReserved10>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved10> disownCustomReserved10();

  inline bool isCustomReserved11();
  inline bool hasCustomReserved11();
  inline  ::cereal::CustomReserved11::Builder getCustomReserved11();
  inline void setCustomReserved11( ::cereal::CustomReserved11::Reader value);
  inline  ::cereal::CustomReserved11::Builder initCustomReserved11();
  inline void adoptCustomReserved11(::capnp::Orphan< ::cereal::CustomReserved11>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved11> disownCustomReserved11();

  inline bool isCustomReserved12();
  inline bool hasCustomReserved12();
  inline  ::cereal::CustomReserved12::Builder getCustomReserved12();
  inline void setCustomReserved12( ::cereal::CustomReserved12::Reader value);
  inline  ::cereal::CustomReserved12::Builder initCustomReserved12();
  inline void adoptCustomReserved12(::capnp::Orphan< ::cereal::CustomReserved12>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved12> disownCustomReserved12();

  inline bool isCustomReserved13();
  inline bool hasCustomReserved13();
  inline  ::cereal::CustomReserved13::Builder getCustomReserved13();
  inline void setCustomReserved13( ::cereal::CustomReserved13::Reader value);
  inline  ::cereal::CustomReserved13::Builder initCustomReserved13();
  inline void adoptCustomReserved13(::capnp::Orphan< ::cereal::CustomReserved13>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved13> disownCustomReserved13();

  inline bool isCustomReserved14();
  inline bool hasCustomReserved14();
  inline  ::cereal::CustomReserved14::Builder getCustomReserved14();
  inline void setCustomReserved14( ::cereal::CustomReserved14::Reader value);
  inline  ::cereal::CustomReserved14::Builder initCustomReserved14();
  inline void adoptCustomReserved14(::capnp::Orphan< ::cereal::CustomReserved14>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved14> disownCustomReserved14();

  inline bool isCustomReserved15();
  inline bool hasCustomReserved15();
  inline  ::cereal::CustomReserved15::Builder getCustomReserved15();
  inline void setCustomReserved15( ::cereal::CustomReserved15::Reader value);
  inline  ::cereal::CustomReserved15::Builder initCustomReserved15();
  inline void adoptCustomReserved15(::capnp::Orphan< ::cereal::CustomReserved15>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved15> disownCustomReserved15();

  inline bool isCustomReserved16();
  inline bool hasCustomReserved16();
  inline  ::cereal::CustomReserved16::Builder getCustomReserved16();
  inline void setCustomReserved16( ::cereal::CustomReserved16::Reader value);
  inline  ::cereal::CustomReserved16::Builder initCustomReserved16();
  inline void adoptCustomReserved16(::capnp::Orphan< ::cereal::CustomReserved16>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved16> disownCustomReserved16();

  inline bool isCustomReserved17();
  inline bool hasCustomReserved17();
  inline  ::cereal::CustomReserved17::Builder getCustomReserved17();
  inline void setCustomReserved17( ::cereal::CustomReserved17::Reader value);
  inline  ::cereal::CustomReserved17::Builder initCustomReserved17();
  inline void adoptCustomReserved17(::capnp::Orphan< ::cereal::CustomReserved17>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved17> disownCustomReserved17();

  inline bool isCustomReserved18();
  inline bool hasCustomReserved18();
  inline  ::cereal::CustomReserved18::Builder getCustomReserved18();
  inline void setCustomReserved18( ::cereal::CustomReserved18::Reader value);
  inline  ::cereal::CustomReserved18::Builder initCustomReserved18();
  inline void adoptCustomReserved18(::capnp::Orphan< ::cereal::CustomReserved18>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved18> disownCustomReserved18();

  inline bool isCustomReserved19();
  inline bool hasCustomReserved19();
  inline  ::cereal::CustomReserved19::Builder getCustomReserved19();
  inline void setCustomReserved19( ::cereal::CustomReserved19::Reader value);
  inline  ::cereal::CustomReserved19::Builder initCustomReserved19();
  inline void adoptCustomReserved19(::capnp::Orphan< ::cereal::CustomReserved19>&& value);
  inline ::capnp::Orphan< ::cereal::CustomReserved19> disownCustomReserved19();

  inline bool isLiveDelay();
  inline bool hasLiveDelay();
  inline  ::cereal::LiveDelayData::Builder getLiveDelay();
  inline void setLiveDelay( ::cereal::LiveDelayData::Reader value);
  inline  ::cereal::LiveDelayData::Builder initLiveDelay();
  inline void adoptLiveDelay(::capnp::Orphan< ::cereal::LiveDelayData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveDelayData> disownLiveDelay();

  inline bool isRawAudioData();
  inline bool hasRawAudioData();
  inline  ::cereal::AudioData::Builder getRawAudioData();
  inline void setRawAudioData( ::cereal::AudioData::Reader value);
  inline  ::cereal::AudioData::Builder initRawAudioData();
  inline void adoptRawAudioData(::capnp::Orphan< ::cereal::AudioData>&& value);
  inline ::capnp::Orphan< ::cereal::AudioData> disownRawAudioData();

  inline bool isBookmarkButton();
  inline bool hasBookmarkButton();
  inline  ::cereal::UserBookmark::Builder getBookmarkButton();
  inline void setBookmarkButton( ::cereal::UserBookmark::Reader value);
  inline  ::cereal::UserBookmark::Builder initBookmarkButton();
  inline void adoptBookmarkButton(::capnp::Orphan< ::cereal::UserBookmark>&& value);
  inline ::capnp::Orphan< ::cereal::UserBookmark> disownBookmarkButton();

  inline bool isAudioFeedback();
  inline bool hasAudioFeedback();
  inline  ::cereal::AudioFeedback::Builder getAudioFeedback();
  inline void setAudioFeedback( ::cereal::AudioFeedback::Reader value);
  inline  ::cereal::AudioFeedback::Builder initAudioFeedback();
  inline void adoptAudioFeedback(::capnp::Orphan< ::cereal::AudioFeedback>&& value);
  inline ::capnp::Orphan< ::cereal::AudioFeedback> disownAudioFeedback();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>> Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return  ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey( ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Value> Map<Key, Value>::Entry::Pipeline::getValue() {
  return  ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue( ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::Entry::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
  { 0xf8b13ce2183eb696, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a5dfdd084a6eea0e, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

// Map<Key, Value>
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::_capnpPrivate::brandScopes[] = {
  { 0xf8b13ce2183eb696, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::cereal::Map<Key, Value>::Entry::_capnpPrivate::brand() },
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f8b13ce2183eb696, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

inline  ::cereal::OnroadEvent::EventName OnroadEvent::Reader::getName() const {
  return _reader.getDataField< ::cereal::OnroadEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::OnroadEvent::EventName OnroadEvent::Builder::getName() {
  return _builder.getDataField< ::cereal::OnroadEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setName( ::cereal::OnroadEvent::EventName value) {
  _builder.setDataField< ::cereal::OnroadEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getNoEntry() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getNoEntry() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setNoEntry(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getUserDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getUserDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setUserDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getSoftDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getSoftDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setSoftDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getImmediateDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getImmediateDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setImmediateDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getPreEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getPreEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setPreEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getPermanent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getPermanent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setPermanent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getOverrideLongitudinal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getOverrideLongitudinal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setOverrideLongitudinal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEvent::Reader::getOverrideLateral() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool OnroadEvent::Builder::getOverrideLateral() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void OnroadEvent::Builder::setOverrideLateral(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasKernelArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader InitData::Reader::getKernelArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::Builder::getKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelArgs( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void InitData::Builder::setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::Builder::initKernelArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelArgs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> InitData::Builder::disownKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGctxDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGctxDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGctxDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGctxDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGctxDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGctxDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGctxDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGctxDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasDongleId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasDongleId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::InitData::DeviceType InitData::Reader::getDeviceType() const {
  return _reader.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::InitData::DeviceType InitData::Builder::getDeviceType() {
  return _builder.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setDeviceType( ::cereal::InitData::DeviceType value) {
  _builder.setDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidBuildInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidBuildInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::AndroidBuildInfo::Reader InitData::Reader::getAndroidBuildInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::AndroidBuildInfo::Builder InitData::Builder::getAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::AndroidBuildInfo::Pipeline InitData::Pipeline::getAndroidBuildInfo() {
  return  ::cereal::InitData::AndroidBuildInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setAndroidBuildInfo( ::cereal::InitData::AndroidBuildInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::AndroidBuildInfo::Builder InitData::Builder::initAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptAndroidBuildInfo(
    ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo> InitData::Builder::disownAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidSensorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidSensorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader InitData::Reader::getAndroidSensorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder InitData::Builder::getAndroidSensorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setAndroidSensorsDEPRECATED( ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>::Builder InitData::Builder::initAndroidSensorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptAndroidSensorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>> InitData::Builder::disownAndroidSensorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasChffrAndroidExtraDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasChffrAndroidExtraDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::ChffrAndroidExtra::Reader InitData::Reader::getChffrAndroidExtraDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::ChffrAndroidExtra::Builder InitData::Builder::getChffrAndroidExtraDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::ChffrAndroidExtra::Pipeline InitData::Pipeline::getChffrAndroidExtraDEPRECATED() {
  return  ::cereal::InitData::ChffrAndroidExtra::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setChffrAndroidExtraDEPRECATED( ::cereal::InitData::ChffrAndroidExtra::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::ChffrAndroidExtra::Builder InitData::Builder::initChffrAndroidExtraDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptChffrAndroidExtraDEPRECATED(
    ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra> InitData::Builder::disownChffrAndroidExtraDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasPandaInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasPandaInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::PandaInfo::Reader InitData::Reader::getPandaInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::PandaInfo::Builder InitData::Builder::getPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::PandaInfo::Pipeline InitData::Pipeline::getPandaInfo() {
  return  ::cereal::InitData::PandaInfo::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setPandaInfo( ::cereal::InitData::PandaInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::PandaInfo::Builder InitData::Builder::initPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptPandaInfo(
    ::capnp::Orphan< ::cereal::InitData::PandaInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::PandaInfo> InitData::Builder::disownPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::getDirty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool InitData::Builder::getDirty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setDirty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitCommit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitCommit() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitCommit() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitCommit( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitCommit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitCommit(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGitBranch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitBranch() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitBranch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitBranch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitBranch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitBranch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::getPassive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool InitData::Builder::getPassive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setPassive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitRemote() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitRemote() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitRemote() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitRemote() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitRemote( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitRemote(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitRemote(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitRemote() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasIosBuildInfoDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasIosBuildInfoDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::IosBuildInfo::Reader InitData::Reader::getIosBuildInfoDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::IosBuildInfo::Builder InitData::Builder::getIosBuildInfoDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::IosBuildInfo::Pipeline InitData::Pipeline::getIosBuildInfoDEPRECATED() {
  return  ::cereal::InitData::IosBuildInfo::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setIosBuildInfoDEPRECATED( ::cereal::InitData::IosBuildInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::IosBuildInfo::Builder InitData::Builder::initIosBuildInfoDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptIosBuildInfoDEPRECATED(
    ::capnp::Orphan< ::cereal::InitData::IosBuildInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::IosBuildInfo> InitData::Builder::disownIosBuildInfoDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasKernelVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getKernelVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getKernelVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initKernelVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownKernelVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidProperties() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidProperties() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::Reader::getAndroidProperties() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::getAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::Pipeline::getAndroidProperties() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setAndroidProperties( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::initAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptAndroidProperties(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::Builder::disownAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader InitData::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline InitData::Pipeline::getParams() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setParams( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptParams(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> InitData::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasOsVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasOsVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getOsVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setOsVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initOsVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptOsVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasCommands() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasCommands() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader InitData::Reader::getCommands() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::getCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline InitData::Pipeline::getCommands() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setCommands( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder InitData::Builder::initCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptCommands(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> InitData::Builder::disownCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline  ::uint64_t InitData::Reader::getWallTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t InitData::Builder::getWallTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setWallTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitCommitDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitCommitDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitCommitDate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitCommitDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitCommitDate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitCommitDate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitCommitDate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitCommitDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasBootlogId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasBootlogId() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getBootlogId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getBootlogId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setBootlogId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initBootlogId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptBootlogId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownBootlogId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGitSrcCommit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitSrcCommit() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitSrcCommit() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitSrcCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitSrcCommit( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitSrcCommit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitSrcCommit(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitSrcCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGitSrcCommitDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitSrcCommitDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitSrcCommitDate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitSrcCommitDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitSrcCommitDate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitSrcCommitDate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitSrcCommitDate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitSrcCommitDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::getHasPanda() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool InitData::PandaInfo::Builder::getHasPanda() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::PandaInfo::Builder::setHasPanda(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::PandaInfo::Reader::hasDongleId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasDongleId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::hasStVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasStVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getStVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getStVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setStVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initStVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptStVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownStVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::hasEspVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasEspVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getEspVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getEspVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setEspVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initEspVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptEspVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownEspVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBoard() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBoard() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBoard() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBoard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBoard( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBoard(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBoard(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBoard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBootloader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBootloader() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBootloader() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBootloader() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBootloader( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBootloader(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBootloader(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBootloader() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBrand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBrand() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBrand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBrand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBrand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBrand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getDevice() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getDevice() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setDevice( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initDevice(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptDevice(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownDevice() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasDisplay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasDisplay() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getDisplay() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getDisplay() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setDisplay( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initDisplay(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptDisplay(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownDisplay() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasFingerprint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasFingerprint() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasHardware() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasHardware() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getHardware() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getHardware() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setHardware( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initHardware(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptHardware(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownHardware() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasHost() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasHost() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasManufacturer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasManufacturer() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getManufacturer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getManufacturer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setManufacturer( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initManufacturer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptManufacturer(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownManufacturer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getModel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setModel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initModel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptModel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasProduct() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasProduct() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getProduct() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getProduct() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setProduct( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initProduct(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptProduct(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownProduct() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasRadioVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasRadioVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getRadioVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getRadioVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setRadioVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initRadioVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptRadioVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownRadioVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasSerial() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasSerial() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getSerial() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getSerial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setSerial( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initSerial(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptSerial(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownSerial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasSupportedAbis() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasSupportedAbis() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader InitData::AndroidBuildInfo::Reader::getSupportedAbis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::AndroidBuildInfo::Builder::getSupportedAbis() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setSupportedAbis( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void InitData::AndroidBuildInfo::Builder::setSupportedAbis(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InitData::AndroidBuildInfo::Builder::initSupportedAbis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptSupportedAbis(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> InitData::AndroidBuildInfo::Builder::disownSupportedAbis() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setTags( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::int64_t InitData::AndroidBuildInfo::Reader::getTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t InitData::AndroidBuildInfo::Builder::getTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidBuildInfo::Builder::setTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidBuildInfo::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionCodename() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionCodename() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionCodename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionCodename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionCodename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionCodename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionCodename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionCodename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionRelease() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionRelease() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionRelease() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionRelease( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionRelease(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionRelease(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidBuildInfo::Reader::getVersionSdk() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidBuildInfo::Builder::getVersionSdk() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidBuildInfo::Builder::setVersionSdk( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionSecurityPatch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionSecurityPatch() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionSecurityPatch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionSecurityPatch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionSecurityPatch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionSecurityPatch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionSecurityPatch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionSecurityPatch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidSensor::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidSensor::Reader::hasVendor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasVendor() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getVendor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getVendor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setVendor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initVendor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptVendor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownVendor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getHandle() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getHandle() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setHandle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getMaxRange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getMaxRange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMaxRange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getResolution() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getResolution() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setResolution(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getPower() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getPower() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setPower(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getMinDelay() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getMinDelay() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMinDelay( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InitData::AndroidSensor::Reader::getFifoReservedEventCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::AndroidSensor::Builder::getFifoReservedEventCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setFifoReservedEventCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InitData::AndroidSensor::Reader::getFifoMaxEventCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::AndroidSensor::Builder::getFifoMaxEventCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setFifoMaxEventCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidSensor::Reader::hasStringType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasStringType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getStringType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getStringType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setStringType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initStringType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptStringType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownStringType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getMaxDelay() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getMaxDelay() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMaxDelay( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::ChffrAndroidExtra::Reader::hasAllCameraCharacteristics() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::ChffrAndroidExtra::Builder::hasAllCameraCharacteristics() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::ChffrAndroidExtra::Reader::getAllCameraCharacteristics() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::ChffrAndroidExtra::Builder::getAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::ChffrAndroidExtra::Pipeline::getAllCameraCharacteristics() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InitData::ChffrAndroidExtra::Builder::setAllCameraCharacteristics( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::ChffrAndroidExtra::Builder::initAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::ChffrAndroidExtra::Builder::adoptAllCameraCharacteristics(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::ChffrAndroidExtra::Builder::disownAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::IosBuildInfo::Reader::hasAppVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasAppVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getAppVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getAppVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setAppVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initAppVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptAppVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownAppVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t InitData::IosBuildInfo::Reader::getAppBuild() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::IosBuildInfo::Builder::getAppBuild() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::IosBuildInfo::Builder::setAppBuild( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::IosBuildInfo::Reader::hasOsVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasOsVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getOsVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setOsVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initOsVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptOsVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::IosBuildInfo::Reader::hasDeviceModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasDeviceModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getDeviceModel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getDeviceModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setDeviceModel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initDeviceModel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptDeviceModel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownDeviceModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t FrameData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FrameData::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getFrameLengthDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getFrameLengthDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameLengthDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getIntegLines() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getIntegLines() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setIntegLines( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getGlobalGainDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getGlobalGainDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGlobalGainDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FrameData::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FrameData::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setImage( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FrameData::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FrameData::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::FrameData::FrameTypeDEPRECATED FrameData::Reader::getFrameTypeDEPRECATED() const {
  return _reader.getDataField< ::cereal::FrameData::FrameTypeDEPRECATED>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::FrameData::FrameTypeDEPRECATED FrameData::Builder::getFrameTypeDEPRECATED() {
  return _builder.getDataField< ::cereal::FrameData::FrameTypeDEPRECATED>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameTypeDEPRECATED( ::cereal::FrameData::FrameTypeDEPRECATED value) {
  _builder.setDataField< ::cereal::FrameData::FrameTypeDEPRECATED>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampSof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampSof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampSof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasAndroidCaptureResultDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasAndroidCaptureResultDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::AndroidCaptureResult::Reader FrameData::Reader::getAndroidCaptureResultDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::AndroidCaptureResult::Builder FrameData::Builder::getAndroidCaptureResultDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::FrameData::AndroidCaptureResult::Pipeline FrameData::Pipeline::getAndroidCaptureResultDEPRECATED() {
  return  ::cereal::FrameData::AndroidCaptureResult::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FrameData::Builder::setAndroidCaptureResultDEPRECATED( ::cereal::FrameData::AndroidCaptureResult::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::AndroidCaptureResult::Builder FrameData::Builder::initAndroidCaptureResultDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::adoptAndroidCaptureResultDEPRECATED(
    ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult> FrameData::Builder::disownAndroidCaptureResultDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setTransform( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setTransform(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptTransform(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t FrameData::Reader::getLensPosDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getLensPosDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensPosDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensSagDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensSagDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensSagDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensErrDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensErrDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensErrDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensTruePosDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensTruePosDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensTruePosDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasFocusValDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasFocusValDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getFocusValDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getFocusValDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setFocusValDEPRECATED( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setFocusValDEPRECATED(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initFocusValDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptFocusValDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownFocusValDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasFocusConfDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasFocusConfDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getFocusConfDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getFocusConfDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setFocusConfDEPRECATED( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setFocusConfDEPRECATED(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initFocusConfDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptFocusConfDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownFocusConfDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasSharpnessScoreDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasSharpnessScoreDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getSharpnessScoreDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getSharpnessScoreDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setSharpnessScoreDEPRECATED( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setSharpnessScoreDEPRECATED(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initSharpnessScoreDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptSharpnessScoreDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownSharpnessScoreDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t FrameData::Reader::getRecoverStateDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getRecoverStateDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setRecoverStateDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::getHighConversionGain() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS);
}

inline bool FrameData::Builder::getHighConversionGain() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setHighConversionGain(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getMeasuredGreyFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getMeasuredGreyFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setMeasuredGreyFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getTargetGreyFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getTargetGreyFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTargetGreyFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getProcessingTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getProcessingTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setProcessingTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasTemperaturesC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasTemperaturesC() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::Reader::getTemperaturesC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::getTemperaturesC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setTemperaturesC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setTemperaturesC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::Builder::initTemperaturesC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptTemperaturesC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> FrameData::Builder::disownTemperaturesC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint32_t FrameData::Reader::getFrameIdSensor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getFrameIdSensor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameIdSensor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::FrameData::ImageSensor FrameData::Reader::getSensor() const {
  return _reader.getDataField< ::cereal::FrameData::ImageSensor>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::cereal::FrameData::ImageSensor FrameData::Builder::getSensor() {
  return _builder.getDataField< ::cereal::FrameData::ImageSensor>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setSensor( ::cereal::FrameData::ImageSensor value) {
  _builder.setDataField< ::cereal::FrameData::ImageSensor>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getExposureValPercent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getExposureValPercent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setExposureValPercent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FrameData::Reader::getRequestId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getRequestId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setRequestId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::AndroidCaptureResult::Reader::getSensitivity() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::AndroidCaptureResult::Builder::getSensitivity() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setSensitivity( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Reader::getFrameDuration() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Builder::getFrameDuration() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setFrameDuration( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Reader::getExposureTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Builder::getExposureTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setExposureTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::AndroidCaptureResult::Reader::getRollingShutterSkew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::AndroidCaptureResult::Builder::getRollingShutterSkew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setRollingShutterSkew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::AndroidCaptureResult::Reader::hasColorCorrectionTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::AndroidCaptureResult::Builder::hasColorCorrectionTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::AndroidCaptureResult::Reader::getColorCorrectionTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::getColorCorrectionTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionTransform( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionTransform(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::initColorCorrectionTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameData::AndroidCaptureResult::Builder::adoptColorCorrectionTransform(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> FrameData::AndroidCaptureResult::Builder::disownColorCorrectionTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FrameData::AndroidCaptureResult::Reader::hasColorCorrectionGains() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::AndroidCaptureResult::Builder::hasColorCorrectionGains() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader FrameData::AndroidCaptureResult::Reader::getColorCorrectionGains() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::getColorCorrectionGains() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionGains( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionGains(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder FrameData::AndroidCaptureResult::Builder::initColorCorrectionGains(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FrameData::AndroidCaptureResult::Builder::adoptColorCorrectionGains(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> FrameData::AndroidCaptureResult::Builder::disownColorCorrectionGains() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int8_t FrameData::AndroidCaptureResult::Reader::getDisplayRotation() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int8_t FrameData::AndroidCaptureResult::Builder::getDisplayRotation() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setDisplayRotation( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Thumbnail::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Thumbnail::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Thumbnail::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Thumbnail::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Thumbnail::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Thumbnail::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Thumbnail::Reader::hasThumbnail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Thumbnail::Builder::hasThumbnail() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Thumbnail::Reader::getThumbnail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Thumbnail::Builder::getThumbnail() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Thumbnail::Builder::setThumbnail( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Thumbnail::Builder::initThumbnail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Thumbnail::Builder::adoptThumbnail(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Thumbnail::Builder::disownThumbnail() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::Thumbnail::Encoding Thumbnail::Reader::getEncoding() const {
  return _reader.getDataField< ::cereal::Thumbnail::Encoding>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::Thumbnail::Encoding Thumbnail::Builder::getEncoding() {
  return _builder.getDataField< ::cereal::Thumbnail::Encoding>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Thumbnail::Builder::setEncoding( ::cereal::Thumbnail::Encoding value) {
  _builder.setDataField< ::cereal::Thumbnail::Encoding>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t GPSNMEAData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t GPSNMEAData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GPSNMEAData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GPSNMEAData::Reader::getLocalWallTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GPSNMEAData::Builder::getLocalWallTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GPSNMEAData::Builder::setLocalWallTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GPSNMEAData::Reader::hasNmea() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GPSNMEAData::Builder::hasNmea() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSNMEAData::Reader::getNmea() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSNMEAData::Builder::getNmea() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GPSNMEAData::Builder::setNmea( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSNMEAData::Builder::initNmea(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GPSNMEAData::Builder::adoptNmea(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSNMEAData::Builder::disownNmea() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::Which SensorEventData::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline  ::cereal::SensorEventData::Which SensorEventData::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getSensor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getSensor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSensor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t SensorEventData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t SensorEventData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isAcceleration() const {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Builder::isAcceleration() {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Reader::hasAcceleration() const {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasAcceleration() {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getAcceleration() const {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getAcceleration() {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initAcceleration() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptAcceleration(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownAcceleration() {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isMagnetic() const {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Builder::isMagnetic() {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Reader::hasMagnetic() const {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagnetic() {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagnetic() const {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagnetic() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagnetic() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagnetic(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagnetic() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isOrientation() const {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Builder::isOrientation() {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Reader::hasOrientation() const {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasOrientation() {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getOrientation() const {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getOrientation() {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setOrientation( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initOrientation() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptOrientation(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownOrientation() {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyro() const {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Builder::isGyro() {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Reader::hasGyro() const {
  if (which() != SensorEventData::GYRO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyro() {
  if (which() != SensorEventData::GYRO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyro() const {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyro() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyro( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyro() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyro(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyro() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Builder::getSource() {
  return _builder.getDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSource( ::cereal::SensorEventData::SensorSource value) {
  _builder.setDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isPressure() const {
  return which() == SensorEventData::PRESSURE;
}
inline bool SensorEventData::Builder::isPressure() {
  return which() == SensorEventData::PRESSURE;
}
inline bool SensorEventData::Reader::hasPressure() const {
  if (which() != SensorEventData::PRESSURE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasPressure() {
  if (which() != SensorEventData::PRESSURE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getPressure() const {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getPressure() {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setPressure( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initPressure() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptPressure(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownPressure() {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::getUncalibratedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool SensorEventData::Builder::getUncalibratedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setUncalibratedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isMagneticUncalibrated() const {
  return which() == SensorEventData::MAGNETIC_UNCALIBRATED;
}
inline bool SensorEventData::Builder::isMagneticUncalibrated() {
  return which() == SensorEventData::MAGNETIC_UNCALIBRATED;
}
inline bool SensorEventData::Reader::hasMagneticUncalibrated() const {
  if (which() != SensorEventData::MAGNETIC_UNCALIBRATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagneticUncalibrated() {
  if (which() != SensorEventData::MAGNETIC_UNCALIBRATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagneticUncalibrated() const {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagneticUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagneticUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagneticUncalibrated() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagneticUncalibrated(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagneticUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyroUncalibrated() const {
  return which() == SensorEventData::GYRO_UNCALIBRATED;
}
inline bool SensorEventData::Builder::isGyroUncalibrated() {
  return which() == SensorEventData::GYRO_UNCALIBRATED;
}
inline bool SensorEventData::Reader::hasGyroUncalibrated() const {
  if (which() != SensorEventData::GYRO_UNCALIBRATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyroUncalibrated() {
  if (which() != SensorEventData::GYRO_UNCALIBRATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyroUncalibrated() const {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyroUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyroUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyroUncalibrated() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyroUncalibrated(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyroUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isProximity() const {
  return which() == SensorEventData::PROXIMITY;
}
inline bool SensorEventData::Builder::isProximity() {
  return which() == SensorEventData::PROXIMITY;
}
inline float SensorEventData::Reader::getProximity() const {
  KJ_IREQUIRE((which() == SensorEventData::PROXIMITY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getProximity() {
  KJ_IREQUIRE((which() == SensorEventData::PROXIMITY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setProximity(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PROXIMITY);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isLight() const {
  return which() == SensorEventData::LIGHT;
}
inline bool SensorEventData::Builder::isLight() {
  return which() == SensorEventData::LIGHT;
}
inline float SensorEventData::Reader::getLight() const {
  KJ_IREQUIRE((which() == SensorEventData::LIGHT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getLight() {
  KJ_IREQUIRE((which() == SensorEventData::LIGHT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setLight(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::LIGHT);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isTemperature() const {
  return which() == SensorEventData::TEMPERATURE;
}
inline bool SensorEventData::Builder::isTemperature() {
  return which() == SensorEventData::TEMPERATURE;
}
inline float SensorEventData::Reader::getTemperature() const {
  KJ_IREQUIRE((which() == SensorEventData::TEMPERATURE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getTemperature() {
  KJ_IREQUIRE((which() == SensorEventData::TEMPERATURE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setTemperature(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::TEMPERATURE);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::SensorVec::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::SensorVec::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SensorEventData::SensorVec::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SensorEventData::SensorVec::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::SensorVec::Builder::setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void SensorEventData::SensorVec::Builder::setV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SensorEventData::SensorVec::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SensorEventData::SensorVec::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SensorEventData::SensorVec::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t SensorEventData::SensorVec::Reader::getStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t SensorEventData::SensorVec::Builder::getStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::SensorVec::Builder::setStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t GpsLocationData::Reader::getFlags() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t GpsLocationData::Builder::getFlags() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setFlags( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearingDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearingDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearingDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getHorizontalAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getHorizontalAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setHorizontalAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t GpsLocationData::Reader::getUnixTimestampMillis() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t GpsLocationData::Builder::getUnixTimestampMillis() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setUnixTimestampMillis( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::GpsLocationData::SensorSource GpsLocationData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GpsLocationData::SensorSource GpsLocationData::Builder::getSource() {
  return _builder.getDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSource( ::cereal::GpsLocationData::SensorSource value) {
  _builder.setDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GpsLocationData::Reader::hasVNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GpsLocationData::Builder::hasVNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader GpsLocationData::Reader::getVNED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder GpsLocationData::Builder::getVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GpsLocationData::Builder::setVNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GpsLocationData::Builder::setVNED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder GpsLocationData::Builder::initVNED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GpsLocationData::Builder::adoptVNED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> GpsLocationData::Builder::disownVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float GpsLocationData::Reader::getVerticalAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getVerticalAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setVerticalAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearingAccuracyDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearingAccuracyDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearingAccuracyDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeedAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeedAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeedAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool GpsLocationData::Reader::getHasFix() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}

inline bool GpsLocationData::Builder::getHasFix() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setHasFix(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t GpsLocationData::Reader::getSatelliteCount() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}

inline  ::int8_t GpsLocationData::Builder::getSatelliteCount() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSatelliteCount( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CanData::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CanData::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t CanData::Reader::getBusTimeDEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t CanData::Builder::getBusTimeDEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setBusTimeDEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CanData::Reader::hasDat() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CanData::Builder::hasDat() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CanData::Reader::getDat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CanData::Builder::getDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CanData::Builder::setDat( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CanData::Builder::initDat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CanData::Builder::adoptDat(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CanData::Builder::disownDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t CanData::Reader::getSrc() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CanData::Builder::getSrc() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setSrc( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getCpu0DEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getCpu0DEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCpu0DEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getCpu1DEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getCpu1DEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCpu1DEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getCpu2DEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getCpu2DEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCpu2DEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getCpu3DEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getCpu3DEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCpu3DEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getMemDEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getMemDEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setMemDEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getGpuDEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getGpuDEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setGpuDEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DeviceState::Reader::getBatDEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeviceState::Builder::getBatDEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatDEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getFreeSpacePercent() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getFreeSpacePercent() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setFreeSpacePercent(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t DeviceState::Reader::getBatteryPercentDEPRECATED() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int16_t DeviceState::Builder::getBatteryPercentDEPRECATED() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatteryPercentDEPRECATED( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasBatteryStatusDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasBatteryStatusDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::Reader::getBatteryStatusDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::Builder::getBatteryStatusDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setBatteryStatusDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::Builder::initBatteryStatusDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptBatteryStatusDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::Builder::disownBatteryStatusDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t DeviceState::Reader::getFanSpeedPercentDesired() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getFanSpeedPercentDesired() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setFanSpeedPercentDesired( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getStarted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getStarted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setStarted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getUsbOnlineDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getUsbOnlineDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setUsbOnlineDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DeviceState::Reader::getStartedMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DeviceState::Builder::getStartedMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setStartedMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::DeviceState::ThermalStatus DeviceState::Reader::getThermalStatus() const {
  return _reader.getDataField< ::cereal::DeviceState::ThermalStatus>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DeviceState::ThermalStatus DeviceState::Builder::getThermalStatus() {
  return _builder.getDataField< ::cereal::DeviceState::ThermalStatus>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setThermalStatus( ::cereal::DeviceState::ThermalStatus value) {
  _builder.setDataField< ::cereal::DeviceState::ThermalStatus>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DeviceState::Reader::getBatteryCurrentDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DeviceState::Builder::getBatteryCurrentDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatteryCurrentDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DeviceState::Reader::getBatteryVoltageDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DeviceState::Builder::getBatteryVoltageDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatteryVoltageDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getChargingErrorDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getChargingErrorDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setChargingErrorDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getChargingDisabledDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<195>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getChargingDisabledDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<195>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setChargingDisabledDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<195>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DeviceState::Reader::getMemoryUsagePercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getMemoryUsagePercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setMemoryUsagePercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DeviceState::Reader::getCpuUsagePercentDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getCpuUsagePercentDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCpuUsagePercentDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeviceState::Reader::getPa0DEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::Builder::getPa0DEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setPa0DEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::DeviceState::NetworkType DeviceState::Reader::getNetworkType() const {
  return _reader.getDataField< ::cereal::DeviceState::NetworkType>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DeviceState::NetworkType DeviceState::Builder::getNetworkType() {
  return _builder.getDataField< ::cereal::DeviceState::NetworkType>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setNetworkType( ::cereal::DeviceState::NetworkType value) {
  _builder.setDataField< ::cereal::DeviceState::NetworkType>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DeviceState::Reader::getOffroadPowerUsageUwh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeviceState::Builder::getOffroadPowerUsageUwh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setOffroadPowerUsageUwh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::DeviceState::NetworkStrength DeviceState::Reader::getNetworkStrength() const {
  return _reader.getDataField< ::cereal::DeviceState::NetworkStrength>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DeviceState::NetworkStrength DeviceState::Builder::getNetworkStrength() {
  return _builder.getDataField< ::cereal::DeviceState::NetworkStrength>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setNetworkStrength( ::cereal::DeviceState::NetworkStrength value) {
  _builder.setDataField< ::cereal::DeviceState::NetworkStrength>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DeviceState::Reader::getCarBatteryCapacityUwh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DeviceState::Builder::getCarBatteryCapacityUwh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCarBatteryCapacityUwh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasCpuTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasCpuTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getCpuTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getCpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setCpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setCpuTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initCpuTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptCpuTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownCpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasGpuTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasGpuTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getGpuTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getGpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setGpuTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setGpuTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initGpuTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptGpuTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownGpuTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DeviceState::Reader::getMemoryTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getMemoryTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setMemoryTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getBatteryTempCDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getBatteryTempCDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setBatteryTempCDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getAmbientTempCDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getAmbientTempCDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setAmbientTempCDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasNetworkInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasNetworkInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DeviceState::NetworkInfo::Reader DeviceState::Reader::getNetworkInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::DeviceState::NetworkInfo::Builder DeviceState::Builder::getNetworkInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DeviceState::NetworkInfo::Pipeline DeviceState::Pipeline::getNetworkInfo() {
  return  ::cereal::DeviceState::NetworkInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void DeviceState::Builder::setNetworkInfo( ::cereal::DeviceState::NetworkInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DeviceState::NetworkInfo::Builder DeviceState::Builder::initNetworkInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::adoptNetworkInfo(
    ::capnp::Orphan< ::cereal::DeviceState::NetworkInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DeviceState::NetworkInfo> DeviceState::Builder::disownNetworkInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t DeviceState::Reader::getLastAthenaPingTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DeviceState::Builder::getLastAthenaPingTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setLastAthenaPingTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DeviceState::Reader::getGpuUsagePercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getGpuUsagePercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setGpuUsagePercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasCpuUsagePercent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasCpuUsagePercent() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getCpuUsagePercent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getCpuUsagePercent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setCpuUsagePercent( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setCpuUsagePercent(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initCpuUsagePercent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptCpuUsagePercent(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownCpuUsagePercent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasNvmeTempCDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasNvmeTempCDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getNvmeTempCDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getNvmeTempCDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setNvmeTempCDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setNvmeTempCDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initNvmeTempCDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptNvmeTempCDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownNvmeTempCDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasModemTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasModemTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getModemTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getModemTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setModemTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setModemTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initModemTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptModemTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownModemTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::int8_t DeviceState::Reader::getScreenBrightnessPercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DeviceState::Builder::getScreenBrightnessPercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setScreenBrightnessPercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasThermalZones() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasThermalZones() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader DeviceState::Reader::getThermalZones() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder DeviceState::Builder::getThermalZones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setThermalZones( ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>::Builder DeviceState::Builder::initThermalZones(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptThermalZones(
    ::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>> DeviceState::Builder::disownThermalZones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::DeviceState::ThermalZone,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool DeviceState::Reader::hasPmicTempC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasPmicTempC() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DeviceState::Reader::getPmicTempC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::getPmicTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::setPmicTempC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void DeviceState::Builder::setPmicTempC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DeviceState::Builder::initPmicTempC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void DeviceState::Builder::adoptPmicTempC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DeviceState::Builder::disownPmicTempC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline float DeviceState::Reader::getPowerDrawW() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getPowerDrawW() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setPowerDrawW(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::getNetworkMetered() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<196>() * ::capnp::ELEMENTS);
}

inline bool DeviceState::Builder::getNetworkMetered() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<196>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setNetworkMetered(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<196>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getSomPowerDrawW() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getSomPowerDrawW() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setSomPowerDrawW(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::Reader::hasNetworkStats() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::Builder::hasNetworkStats() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DeviceState::NetworkStats::Reader DeviceState::Reader::getNetworkStats() const {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkStats>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::DeviceState::NetworkStats::Builder DeviceState::Builder::getNetworkStats() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkStats>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DeviceState::NetworkStats::Pipeline DeviceState::Pipeline::getNetworkStats() {
  return  ::cereal::DeviceState::NetworkStats::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void DeviceState::Builder::setNetworkStats( ::cereal::DeviceState::NetworkStats::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkStats>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DeviceState::NetworkStats::Builder DeviceState::Builder::initNetworkStats() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkStats>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void DeviceState::Builder::adoptNetworkStats(
    ::capnp::Orphan< ::cereal::DeviceState::NetworkStats>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkStats>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DeviceState::NetworkStats> DeviceState::Builder::disownNetworkStats() {
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState::NetworkStats>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline float DeviceState::Reader::getMaxTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getMaxTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setMaxTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::InitData::DeviceType DeviceState::Reader::getDeviceType() const {
  return _reader.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::cereal::InitData::DeviceType DeviceState::Builder::getDeviceType() {
  return _builder.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setDeviceType( ::cereal::InitData::DeviceType value) {
  _builder.setDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getIntakeTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getIntakeTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setIntakeTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getExhaustTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getExhaustTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setExhaustTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getCaseTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getCaseTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setCaseTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float DeviceState::Reader::getDspTempC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float DeviceState::Builder::getDspTempC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void DeviceState::Builder::setDspTempC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::ThermalZone::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::ThermalZone::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::ThermalZone::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::ThermalZone::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeviceState::ThermalZone::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::ThermalZone::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DeviceState::ThermalZone::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::ThermalZone::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DeviceState::ThermalZone::Reader::getTemp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DeviceState::ThermalZone::Builder::getTemp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::ThermalZone::Builder::setTemp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::NetworkInfo::Reader::hasTechnology() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasTechnology() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getTechnology() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getTechnology() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setTechnology( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initTechnology(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptTechnology(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownTechnology() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DeviceState::NetworkInfo::Reader::hasOperator() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasOperator() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getOperator() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getOperator() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setOperator( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initOperator(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptOperator(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownOperator() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DeviceState::NetworkInfo::Reader::hasBand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasBand() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getBand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getBand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setBand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initBand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptBand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownBand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint16_t DeviceState::NetworkInfo::Reader::getChannel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeviceState::NetworkInfo::Builder::getChannel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::NetworkInfo::Builder::setChannel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DeviceState::NetworkInfo::Reader::hasExtra() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasExtra() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getExtra() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getExtra() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setExtra( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initExtra(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptExtra(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownExtra() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DeviceState::NetworkInfo::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DeviceState::NetworkInfo::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceState::NetworkInfo::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DeviceState::NetworkInfo::Builder::setState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceState::NetworkInfo::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DeviceState::NetworkInfo::Builder::adoptState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceState::NetworkInfo::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int64_t DeviceState::NetworkStats::Reader::getWwanTx() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DeviceState::NetworkStats::Builder::getWwanTx() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeviceState::NetworkStats::Builder::setWwanTx( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t DeviceState::NetworkStats::Reader::getWwanRx() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DeviceState::NetworkStats::Builder::getWwanRx() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DeviceState::NetworkStats::Builder::setWwanRx( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getVoltage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getVoltage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setVoltage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getCurrent() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getCurrent() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setCurrent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getIgnitionLine() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getIgnitionLine() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setIgnitionLine(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getControlsAllowed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getControlsAllowed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setControlsAllowed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getGasInterceptorDetectedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getGasInterceptorDetectedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setGasInterceptorDetectedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getStartedSignalDetectedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getStartedSignalDetectedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setStartedSignalDetectedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getHasGpsDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getHasGpsDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setHasGpsDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getRxBufferOverflow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getRxBufferOverflow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setRxBufferOverflow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getTxBufferOverflow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getTxBufferOverflow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setTxBufferOverflow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getGmlanSendErrsDEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getGmlanSendErrsDEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setGmlanSendErrsDEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaType PandaState::Reader::getPandaType() const {
  return _reader.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaType PandaState::Builder::getPandaType() {
  return _builder.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setPandaType( ::cereal::PandaState::PandaType value) {
  _builder.setDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::Reader::getFanSpeedRpmDEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::Builder::getFanSpeedRpmDEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFanSpeedRpmDEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PandaState::Reader::getUsbPowerModeDEPRECATED() const {
  return _reader.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PandaState::Builder::getUsbPowerModeDEPRECATED() {
  return _builder.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value) {
  _builder.setDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getIgnitionCan() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getIgnitionCan() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setIgnitionCan(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel PandaState::Reader::getSafetyModel() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel PandaState::Builder::getSafetyModel() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyModel( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::FaultStatus PandaState::Reader::getFaultStatus() const {
  return _reader.getDataField< ::cereal::PandaState::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::FaultStatus PandaState::Builder::getFaultStatus() {
  return _builder.getDataField< ::cereal::PandaState::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFaultStatus( ::cereal::PandaState::FaultStatus value) {
  _builder.setDataField< ::cereal::PandaState::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getPowerSaveEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getPowerSaveEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setPowerSaveEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getUptime() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getUptime() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setUptime( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::hasFaults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasFaults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader PandaState::Reader::getFaults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder PandaState::Builder::getFaults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::setFaults( ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PandaState::Builder::setFaults(::kj::ArrayPtr<const  ::cereal::PandaState::FaultType> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>::Builder PandaState::Builder::initFaults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PandaState::Builder::adoptFaults(
    ::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>> PandaState::Builder::disownFaults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState::FaultType,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t PandaState::Reader::getSafetyRxInvalid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getSafetyRxInvalid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyRxInvalid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PandaState::Reader::getSafetyParamDEPRECATED() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PandaState::Builder::getSafetyParamDEPRECATED() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyParamDEPRECATED( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::HarnessStatus PandaState::Reader::getHarnessStatus() const {
  return _reader.getDataField< ::cereal::PandaState::HarnessStatus>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::HarnessStatus PandaState::Builder::getHarnessStatus() {
  return _builder.getDataField< ::cereal::PandaState::HarnessStatus>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setHarnessStatus( ::cereal::PandaState::HarnessStatus value) {
  _builder.setDataField< ::cereal::PandaState::HarnessStatus>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::getHeartbeatLost() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getHeartbeatLost() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setHeartbeatLost(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PandaState::Reader::getAlternativeExperience() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PandaState::Builder::getAlternativeExperience() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setAlternativeExperience( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getSafetyTxBlocked() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getSafetyTxBlocked() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyTxBlocked( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float PandaState::Reader::getInterruptLoad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float PandaState::Builder::getInterruptLoad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setInterruptLoad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::Reader::getSafetyParam2DEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::Builder::getSafetyParam2DEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyParam2DEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::Reader::getSafetyParam() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::Builder::getSafetyParam() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyParam( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::Reader::getFanPower() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::Builder::getFanPower() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFanPower( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::Reader::hasCanState0() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasCanState0() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::PandaCanState::Reader PandaState::Reader::getCanState0() const {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::getCanState0() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::PandaState::PandaCanState::Pipeline PandaState::Pipeline::getCanState0() {
  return  ::cereal::PandaState::PandaCanState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PandaState::Builder::setCanState0( ::cereal::PandaState::PandaCanState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::initCanState0() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::adoptCanState0(
    ::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> PandaState::Builder::disownCanState0() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PandaState::Reader::hasCanState1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasCanState1() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::PandaCanState::Reader PandaState::Reader::getCanState1() const {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::getCanState1() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::PandaState::PandaCanState::Pipeline PandaState::Pipeline::getCanState1() {
  return  ::cereal::PandaState::PandaCanState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PandaState::Builder::setCanState1( ::cereal::PandaState::PandaCanState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::initCanState1() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::adoptCanState1(
    ::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> PandaState::Builder::disownCanState1() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PandaState::Reader::hasCanState2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PandaState::Builder::hasCanState2() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::PandaCanState::Reader PandaState::Reader::getCanState2() const {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::getCanState2() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::PandaState::PandaCanState::Pipeline PandaState::Pipeline::getCanState2() {
  return  ::cereal::PandaState::PandaCanState::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PandaState::Builder::setCanState2( ::cereal::PandaState::PandaCanState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::PandaCanState::Builder PandaState::Builder::initCanState2() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PandaState::Builder::adoptCanState2(
    ::capnp::Orphan< ::cereal::PandaState::PandaCanState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState::PandaCanState> PandaState::Builder::disownCanState2() {
  return ::capnp::_::PointerHelpers< ::cereal::PandaState::PandaCanState>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PandaState::Reader::getSafetyRxChecksInvalid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}

inline bool PandaState::Builder::getSafetyRxChecksInvalid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSafetyRxChecksInvalid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::Reader::getSpiErrorCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::Builder::getSpiErrorCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSpiErrorCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::Reader::getFanStallCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::Builder::getFanStallCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setFanStallCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS, value);
}

inline float PandaState::Reader::getSbu1Voltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float PandaState::Builder::getSbu1Voltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSbu1Voltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float PandaState::Reader::getSbu2Voltage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float PandaState::Builder::getSbu2Voltage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void PandaState::Builder::setSbu2Voltage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getBusOff() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getBusOff() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setBusOff(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getBusOffCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getBusOffCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setBusOffCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getErrorWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getErrorWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setErrorWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getErrorPassive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getErrorPassive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setErrorPassive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastStoredError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastStoredError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastDataError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastDataError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastDataError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Reader::getLastDataStoredError() const {
  return _reader.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaCanState::LecErrorCode PandaState::PandaCanState::Builder::getLastDataStoredError() {
  return _builder.getDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setLastDataStoredError( ::cereal::PandaState::PandaCanState::LecErrorCode value) {
  _builder.setDataField< ::cereal::PandaState::PandaCanState::LecErrorCode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::PandaCanState::Reader::getReceiveErrorCnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::PandaCanState::Builder::getReceiveErrorCnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setReceiveErrorCnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PandaState::PandaCanState::Reader::getTransmitErrorCnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PandaState::PandaCanState::Builder::getTransmitErrorCnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTransmitErrorCnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalErrorCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalErrorCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalErrorCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalTxLostCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalTxLostCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalTxLostCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalRxLostCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalRxLostCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalRxLostCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalTxCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalTxCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalTxCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalRxCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalRxCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalRxCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getTotalFwdCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getTotalFwdCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setTotalFwdCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::PandaCanState::Reader::getCanSpeed() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::PandaCanState::Builder::getCanSpeed() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanSpeed( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PandaState::PandaCanState::Reader::getCanDataSpeed() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PandaState::PandaCanState::Builder::getCanDataSpeed() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanDataSpeed( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getCanfdEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getCanfdEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanfdEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getBrsEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getBrsEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setBrsEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PandaState::PandaCanState::Reader::getCanfdNonIso() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool PandaState::PandaCanState::Builder::getCanfdNonIso() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanfdNonIso(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getIrq0CallRate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getIrq0CallRate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setIrq0CallRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getIrq1CallRate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getIrq1CallRate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setIrq1CallRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getIrq2CallRate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getIrq2CallRate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setIrq2CallRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PandaState::PandaCanState::Reader::getCanCoreResetCnt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PandaState::PandaCanState::Builder::getCanCoreResetCnt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PandaState::PandaCanState::Builder::setCanCoreResetCnt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PandaState::PandaType PeripheralState::Reader::getPandaType() const {
  return _reader.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PandaState::PandaType PeripheralState::Builder::getPandaType() {
  return _builder.getDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setPandaType( ::cereal::PandaState::PandaType value) {
  _builder.setDataField< ::cereal::PandaState::PandaType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PeripheralState::Reader::getVoltage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PeripheralState::Builder::getVoltage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setVoltage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PeripheralState::Reader::getCurrent() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PeripheralState::Builder::getCurrent() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setCurrent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PeripheralState::Reader::getFanSpeedRpm() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PeripheralState::Builder::getFanSpeedRpm() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setFanSpeedRpm( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PeripheralState::Reader::getUsbPowerModeDEPRECATED() const {
  return _reader.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PeripheralState::UsbPowerModeDEPRECATED PeripheralState::Builder::getUsbPowerModeDEPRECATED() {
  return _builder.getDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PeripheralState::Builder::setUsbPowerModeDEPRECATED( ::cereal::PeripheralState::UsbPowerModeDEPRECATED value) {
  _builder.setDataField< ::cereal::PeripheralState::UsbPowerModeDEPRECATED>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasWarpMatrixDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasWarpMatrixDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader RadarState::Reader::getWarpMatrixDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder RadarState::Builder::getWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setWarpMatrixDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder RadarState::Builder::initWarpMatrixDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptWarpMatrixDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> RadarState::Builder::disownWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float RadarState::Reader::getAngleOffsetDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float RadarState::Builder::getAngleOffsetDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setAngleOffsetDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RadarState::Reader::getCalStatusDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int8_t RadarState::Builder::getCalStatusDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCalStatusDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasLeadOne() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasLeadOne() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::LeadData::Reader RadarState::Reader::getLeadOne() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::getLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarState::LeadData::Pipeline RadarState::Pipeline::getLeadOne() {
  return  ::cereal::RadarState::LeadData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setLeadOne( ::cereal::RadarState::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::initLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptLeadOne(
    ::capnp::Orphan< ::cereal::RadarState::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState::LeadData> RadarState::Builder::disownLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasLeadTwo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasLeadTwo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::LeadData::Reader RadarState::Reader::getLeadTwo() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::getLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarState::LeadData::Pipeline RadarState::Pipeline::getLeadTwo() {
  return  ::cereal::RadarState::LeadData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setLeadTwo( ::cereal::RadarState::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::initLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptLeadTwo(
    ::capnp::Orphan< ::cereal::RadarState::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState::LeadData> RadarState::Builder::disownLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float RadarState::Reader::getCumLagMsDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarState::Builder::getCumLagMsDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCumLagMsDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarState::Reader::getMdMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getMdMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setMdMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarState::Reader::getFtMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getFtMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setFtMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RadarState::Reader::getCalCycleDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RadarState::Builder::getCalCycleDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCalCycleDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RadarState::Reader::getCalPercDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int8_t RadarState::Builder::getCalPercDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCalPercDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasCanMonoTimesDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasCanMonoTimesDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader RadarState::Reader::getCanMonoTimesDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarState::Builder::getCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarState::Builder::initCanMonoTimesDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptCanMonoTimesDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> RadarState::Builder::disownCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarState::Reader::getCarStateMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getCarStateMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCarStateMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasRadarErrorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasRadarErrorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader RadarState::Reader::getRadarErrorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder RadarState::Builder::getRadarErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setRadarErrorsDEPRECATED( ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setRadarErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::RadarData::ErrorDEPRECATED> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder RadarState::Builder::initRadarErrorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptRadarErrorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>> RadarState::Builder::disownRadarErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasRadarErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasRadarErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarData::Error::Reader RadarState::Reader::getRadarErrors() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarData::Error::Builder RadarState::Builder::getRadarErrors() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarData::Error::Pipeline RadarState::Pipeline::getRadarErrors() {
  return  ::cereal::RadarData::Error::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setRadarErrors( ::cereal::RadarData::Error::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarData::Error::Builder RadarState::Builder::initRadarErrors() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptRadarErrors(
    ::capnp::Orphan< ::cereal::RadarData::Error>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarData::Error> RadarState::Builder::disownRadarErrors() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float RadarState::LeadData::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getDPath() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getDPath() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setDPath(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLeadK() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLeadK() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLeadK(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadK() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadK() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadK(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<320>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<320>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<320>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<321>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<321>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<321>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadTau() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadTau() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadTau(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getModelProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getModelProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setModelProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getRadar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<322>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getRadar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<322>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setRadar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<322>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RadarState::LeadData::Reader::getRadarTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, -1);
}

inline  ::int32_t RadarState::LeadData::Builder::getRadarTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, -1);
}
inline void RadarState::LeadData::Builder::setRadarTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value, -1);
}

inline bool LiveCalibrationData::Reader::hasWarpMatrixDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrixDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWarpMatrixDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrixDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWarpMatrixDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrixDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t LiveCalibrationData::Reader::getCalStatusDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalStatusDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalStatusDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveCalibrationData::Reader::getCalCycle() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveCalibrationData::Builder::getCalCycle() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalCycle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LiveCalibrationData::Reader::getCalPerc() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalPerc() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasExtrinsicMatrix() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasExtrinsicMatrix() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getExtrinsicMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getExtrinsicMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setExtrinsicMatrix( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setExtrinsicMatrix(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initExtrinsicMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptExtrinsicMatrix(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownExtrinsicMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasWarpMatrix2DEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrix2DEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWarpMatrix2DEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWarpMatrix2DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrix2DEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrix2DEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWarpMatrix2DEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrix2DEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWarpMatrix2DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasWarpMatrixBigDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrixBigDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWarpMatrixBigDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWarpMatrixBigDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrixBigDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrixBigDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWarpMatrixBigDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrixBigDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWarpMatrixBigDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasRpyCalib() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasRpyCalib() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getRpyCalib() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getRpyCalib() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setRpyCalib( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setRpyCalib(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initRpyCalib(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptRpyCalib(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownRpyCalib() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasRpyCalibSpread() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasRpyCalibSpread() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getRpyCalibSpread() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getRpyCalibSpread() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setRpyCalibSpread( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setRpyCalibSpread(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initRpyCalibSpread(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptRpyCalibSpread(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownRpyCalibSpread() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveCalibrationData::Reader::getValidBlocks() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveCalibrationData::Builder::getValidBlocks() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setValidBlocks( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasWideFromDeviceEuler() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWideFromDeviceEuler() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getWideFromDeviceEuler() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWideFromDeviceEuler(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initWideFromDeviceEuler(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWideFromDeviceEuler(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::cereal::LiveCalibrationData::Status LiveCalibrationData::Reader::getCalStatus() const {
  return _reader.getDataField< ::cereal::LiveCalibrationData::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveCalibrationData::Status LiveCalibrationData::Builder::getCalStatus() {
  return _builder.getDataField< ::cereal::LiveCalibrationData::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalStatus( ::cereal::LiveCalibrationData::Status value) {
  _builder.setDataField< ::cereal::LiveCalibrationData::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasHeight() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasHeight() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveCalibrationData::Reader::getHeight() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::getHeight() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setHeight( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setHeight(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveCalibrationData::Builder::initHeight(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptHeight(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveCalibrationData::Builder::disownHeight() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveTracksDEPRECATED::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveTracksDEPRECATED::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getTimeStamp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getTimeStamp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setTimeStamp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracksDEPRECATED::Reader::getCurrentTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveTracksDEPRECATED::Builder::getCurrentTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setCurrentTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTracksDEPRECATED::Reader::getStationary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}

inline bool LiveTracksDEPRECATED::Builder::getStationary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setStationary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTracksDEPRECATED::Reader::getOncoming() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}

inline bool LiveTracksDEPRECATED::Builder::getOncoming() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}
inline void LiveTracksDEPRECATED::Builder::setOncoming(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::SelfdriveState::OpenpilotState SelfdriveState::Reader::getState() const {
  return _reader.getDataField< ::cereal::SelfdriveState::OpenpilotState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveState::OpenpilotState SelfdriveState::Builder::getState() {
  return _builder.getDataField< ::cereal::SelfdriveState::OpenpilotState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setState( ::cereal::SelfdriveState::OpenpilotState value) {
  _builder.setDataField< ::cereal::SelfdriveState::OpenpilotState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveState::Reader::hasAlertText1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SelfdriveState::Builder::hasAlertText1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SelfdriveState::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SelfdriveState::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SelfdriveState::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SelfdriveState::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SelfdriveState::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SelfdriveState::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SelfdriveState::Reader::hasAlertText2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SelfdriveState::Builder::hasAlertText2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SelfdriveState::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SelfdriveState::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SelfdriveState::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SelfdriveState::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SelfdriveState::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SelfdriveState::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cereal::SelfdriveState::AlertStatus SelfdriveState::Reader::getAlertStatus() const {
  return _reader.getDataField< ::cereal::SelfdriveState::AlertStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveState::AlertStatus SelfdriveState::Builder::getAlertStatus() {
  return _builder.getDataField< ::cereal::SelfdriveState::AlertStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setAlertStatus( ::cereal::SelfdriveState::AlertStatus value) {
  _builder.setDataField< ::cereal::SelfdriveState::AlertStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::SelfdriveState::AlertSize SelfdriveState::Reader::getAlertSize() const {
  return _reader.getDataField< ::cereal::SelfdriveState::AlertSize>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveState::AlertSize SelfdriveState::Builder::getAlertSize() {
  return _builder.getDataField< ::cereal::SelfdriveState::AlertSize>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setAlertSize( ::cereal::SelfdriveState::AlertSize value) {
  _builder.setDataField< ::cereal::SelfdriveState::AlertSize>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveState::Reader::hasAlertType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SelfdriveState::Builder::hasAlertType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SelfdriveState::Reader::getAlertType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SelfdriveState::Builder::getAlertType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SelfdriveState::Builder::setAlertType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SelfdriveState::Builder::initAlertType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SelfdriveState::Builder::adoptAlertType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SelfdriveState::Builder::disownAlertType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert SelfdriveState::Reader::getAlertSound() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert SelfdriveState::Builder::getAlertSound() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setAlertSound( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveState::Reader::getEngageable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveState::Builder::getEngageable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setEngageable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool SelfdriveState::Reader::getExperimentalMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool SelfdriveState::Builder::getExperimentalMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setExperimentalMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPersonality SelfdriveState::Reader::getPersonality() const {
  return _reader.getDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPersonality SelfdriveState::Builder::getPersonality() {
  return _builder.getDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setPersonality( ::cereal::LongitudinalPersonality value) {
  _builder.setDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert SelfdriveState::Reader::getAlertHudVisual() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert SelfdriveState::Builder::getAlertHudVisual() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SelfdriveState::Builder::setAlertHudVisual( ::cereal::CarControl::HUDControl::VisualAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVEgoDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVEgoDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVEgoDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAEgoDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAEgoDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAEgoDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVPidDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVPidDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVPidDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVTargetLeadDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVTargetLeadDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVTargetLeadDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUpAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUpAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUpAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUiAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUiAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUiAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getYActualDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getYActualDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setYActualDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getYDesDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getYDesDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setYDesDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUpSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUpSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUpSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUiSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUiSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUiSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetMinDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetMinDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetMinDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetMaxDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetMaxDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetMaxDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getJerkFactorDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getJerkFactorDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setJerkFactorDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleSteersDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleSteersDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleSteersDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ControlsState::Reader::getHudLeadDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ControlsState::Builder::getHudLeadDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setHudLeadDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getCumLagMsDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getCumLagMsDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCumLagMsDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getCanMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getCanMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCanMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getRadarStateMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getRadarStateMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setRadarStateMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getMdMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getMdMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setMdMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getEnabledDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getEnabledDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setEnabledDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getSteerOverrideDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getSteerOverrideDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setSteerOverrideDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasCanMonoTimesDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasCanMonoTimesDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ControlsState::Reader::getCanMonoTimesDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ControlsState::Builder::getCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ControlsState::Builder::setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ControlsState::Builder::initCanMonoTimesDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptCanMonoTimesDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ControlsState::Builder::disownCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getVCruiseDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCruiseDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCruiseDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getRearViewCamDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getRearViewCamDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setRearViewCamDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasAlertText1DEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertText1DEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertText1DEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertText1DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertText1DEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertText1DEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertText1DEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertText1DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsState::Reader::hasAlertText2DEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertText2DEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertText2DEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertText2DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertText2DEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertText2DEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertText2DEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertText2DEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getAwarenessStatusDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAwarenessStatusDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAwarenessStatusDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleModelBiasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleModelBiasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleModelBiasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getLongitudinalPlanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getLongitudinalPlanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLongitudinalPlanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getSteeringAngleDesiredDegDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getSteeringAngleDesiredDegDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setSteeringAngleDesiredDegDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::Actuators::LongControlState ControlsState::Reader::getLongControlState() const {
  return _reader.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::Actuators::LongControlState ControlsState::Builder::getLongControlState() {
  return _builder.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLongControlState( ::cereal::CarControl::Actuators::LongControlState value) {
  _builder.setDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::SelfdriveState::OpenpilotState ControlsState::Reader::getStateDEPRECATED() const {
  return _reader.getDataField< ::cereal::SelfdriveState::OpenpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveState::OpenpilotState ControlsState::Builder::getStateDEPRECATED() {
  return _builder.getDataField< ::cereal::SelfdriveState::OpenpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setStateDEPRECATED( ::cereal::SelfdriveState::OpenpilotState value) {
  _builder.setDataField< ::cereal::SelfdriveState::OpenpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVEgoRawDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVEgoRawDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVEgoRawDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUfAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUfAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUfAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUfSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUfSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUfSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getActiveDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getActiveDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setActiveDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::SelfdriveState::AlertStatus ControlsState::Reader::getAlertStatusDEPRECATED() const {
  return _reader.getDataField< ::cereal::SelfdriveState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveState::AlertStatus ControlsState::Builder::getAlertStatusDEPRECATED() {
  return _builder.getDataField< ::cereal::SelfdriveState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertStatusDEPRECATED( ::cereal::SelfdriveState::AlertStatus value) {
  _builder.setDataField< ::cereal::SelfdriveState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::SelfdriveState::AlertSize ControlsState::Reader::getAlertSizeDEPRECATED() const {
  return _reader.getDataField< ::cereal::SelfdriveState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SelfdriveState::AlertSize ControlsState::Builder::getAlertSizeDEPRECATED() {
  return _builder.getDataField< ::cereal::SelfdriveState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertSizeDEPRECATED( ::cereal::SelfdriveState::AlertSize value) {
  _builder.setDataField< ::cereal::SelfdriveState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getGpsPlannerActiveDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getGpsPlannerActiveDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setGpsPlannerActiveDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getEngageableDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getEngageableDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setEngageableDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAlertBlinkingRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAlertBlinkingRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertBlinkingRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getDriverMonitoringOnDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDriverMonitoringOnDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDriverMonitoringOnDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasAlertTypeDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertTypeDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertTypeDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertTypeDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertTypeDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertTypeDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertTypeDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertTypeDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ControlsState::Reader::hasAlertSoundDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertSoundDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertSoundDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertSoundDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertSoundDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertSoundDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertSoundDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertSoundDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getVCurvatureDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCurvatureDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCurvatureDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getDecelForTurnDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDecelForTurnDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDecelForTurnDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getStartMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getStartMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setStartMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getMapValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getMapValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setMapValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getLateralPlanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getLateralPlanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLateralPlanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getForceDecel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getForceDecel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setForceDecel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS, value);
}

inline typename ControlsState::LateralControlState::Reader ControlsState::Reader::getLateralControlState() const {
  return typename ControlsState::LateralControlState::Reader(_reader);
}
inline typename ControlsState::LateralControlState::Builder ControlsState::Builder::getLateralControlState() {
  return typename ControlsState::LateralControlState::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ControlsState::LateralControlState::Pipeline ControlsState::Pipeline::getLateralControlState() {
  return typename ControlsState::LateralControlState::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ControlsState::LateralControlState::Builder ControlsState::Builder::initLateralControlState() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<71>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS).clear();
  return typename ControlsState::LateralControlState::Builder(_builder);
}
inline bool ControlsState::Reader::getDecelForModelDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDecelForModelDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDecelForModelDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert ControlsState::Reader::getAlertSound2DEPRECATED() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert ControlsState::Builder::getAlertSound2DEPRECATED() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertSound2DEPRECATED( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlsState::Reader::getCanErrorCounterDEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlsState::Builder::getCanErrorCounterDEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCanErrorCounterDEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getDesiredCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getDesiredCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDesiredCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getDesiredCurvatureRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getDesiredCurvatureRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDesiredCurvatureRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVCruiseClusterDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCruiseClusterDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCruiseClusterDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getExperimentalModeDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<715>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getExperimentalModeDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<715>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setExperimentalModeDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<715>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPersonality ControlsState::Reader::getPersonalityDEPRECATED() const {
  return _reader.getDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPersonality ControlsState::Builder::getPersonalityDEPRECATED() {
  return _builder.getDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setPersonalityDEPRECATED( ::cereal::LongitudinalPersonality value) {
  _builder.setDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralINDIState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralINDIState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringRateDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringRateDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringRateDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringAccelDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringAccelDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringAccelDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getRateSetPoint() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getRateSetPoint() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setRateSetPoint(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getAccelSetPoint() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getAccelSetPoint() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setAccelSetPoint(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getAccelError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getAccelError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setAccelError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getDelayedOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getDelayedOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setDelayedOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getDelta() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getDelta() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setDelta(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralINDIState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralINDIState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteeringRateDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteeringRateDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteeringRateDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralPIDState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralPIDState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteeringRateDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteeringRateDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteeringRateDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getAngleError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getAngleError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setAngleError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralPIDState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralPIDState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralTorqueState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralTorqueState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getD() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getD() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setD(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralTorqueState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralTorqueState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getErrorRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getErrorRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setErrorRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getActualLateralAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getActualLateralAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setActualLateralAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralTorqueState::Reader::getDesiredLateralAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralTorqueState::Builder::getDesiredLateralAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralTorqueState::Builder::setDesiredLateralAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralLQRState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralLQRState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getLqrOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getLqrOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setLqrOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralLQRState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralLQRState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralAngleState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralAngleState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralAngleState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralAngleState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralAngleState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralAngleState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralAngleState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralAngleState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralAngleState::Reader::getSteeringAngleDesiredDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralAngleState::Builder::getSteeringAngleDesiredDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralAngleState::Builder::setSteeringAngleDesiredDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralCurvatureState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralCurvatureState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getActualCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getActualCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setActualCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getDesiredCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getDesiredCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setDesiredCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralCurvatureState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralCurvatureState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralCurvatureState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralCurvatureState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralCurvatureState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralDebugState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralDebugState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralDebugState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralDebugState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralDebugState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralDebugState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralDebugState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralDebugState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralDebugState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::LateralControlState::Which ControlsState::LateralControlState::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline  ::cereal::ControlsState::LateralControlState::Which ControlsState::LateralControlState::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralControlState::Reader::isIndiStateDEPRECATED() const {
  return which() == ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Builder::isIndiStateDEPRECATED() {
  return which() == ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Reader::hasIndiStateDEPRECATED() const {
  if (which() != ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasIndiStateDEPRECATED() {
  if (which() != ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralINDIState::Reader ControlsState::LateralControlState::Reader::getIndiStateDEPRECATED() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralINDIState::Builder ControlsState::LateralControlState::Builder::getIndiStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setIndiStateDEPRECATED( ::cereal::ControlsState::LateralINDIState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralINDIState::Builder ControlsState::LateralControlState::Builder::initIndiStateDEPRECATED() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptIndiStateDEPRECATED(
    ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState> ControlsState::LateralControlState::Builder::disownIndiStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isPidState() const {
  return which() == ControlsState::LateralControlState::PID_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isPidState() {
  return which() == ControlsState::LateralControlState::PID_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasPidState() const {
  if (which() != ControlsState::LateralControlState::PID_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasPidState() {
  if (which() != ControlsState::LateralControlState::PID_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralPIDState::Reader ControlsState::LateralControlState::Reader::getPidState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralPIDState::Builder ControlsState::LateralControlState::Builder::getPidState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setPidState( ::cereal::ControlsState::LateralPIDState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralPIDState::Builder ControlsState::LateralControlState::Builder::initPidState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptPidState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState> ControlsState::LateralControlState::Builder::disownPidState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isLqrStateDEPRECATED() const {
  return which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Builder::isLqrStateDEPRECATED() {
  return which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Reader::hasLqrStateDEPRECATED() const {
  if (which() != ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasLqrStateDEPRECATED() {
  if (which() != ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralLQRState::Reader ControlsState::LateralControlState::Reader::getLqrStateDEPRECATED() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralLQRState::Builder ControlsState::LateralControlState::Builder::getLqrStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setLqrStateDEPRECATED( ::cereal::ControlsState::LateralLQRState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralLQRState::Builder ControlsState::LateralControlState::Builder::initLqrStateDEPRECATED() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptLqrStateDEPRECATED(
    ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState> ControlsState::LateralControlState::Builder::disownLqrStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isAngleState() const {
  return which() == ControlsState::LateralControlState::ANGLE_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isAngleState() {
  return which() == ControlsState::LateralControlState::ANGLE_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasAngleState() const {
  if (which() != ControlsState::LateralControlState::ANGLE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasAngleState() {
  if (which() != ControlsState::LateralControlState::ANGLE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralAngleState::Reader ControlsState::LateralControlState::Reader::getAngleState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralAngleState::Builder ControlsState::LateralControlState::Builder::getAngleState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setAngleState( ::cereal::ControlsState::LateralAngleState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::ANGLE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralAngleState::Builder ControlsState::LateralControlState::Builder::initAngleState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::ANGLE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptAngleState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralAngleState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::ANGLE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralAngleState> ControlsState::LateralControlState::Builder::disownAngleState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralAngleState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isDebugState() const {
  return which() == ControlsState::LateralControlState::DEBUG_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isDebugState() {
  return which() == ControlsState::LateralControlState::DEBUG_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasDebugState() const {
  if (which() != ControlsState::LateralControlState::DEBUG_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasDebugState() {
  if (which() != ControlsState::LateralControlState::DEBUG_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralDebugState::Reader ControlsState::LateralControlState::Reader::getDebugState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralDebugState::Builder ControlsState::LateralControlState::Builder::getDebugState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setDebugState( ::cereal::ControlsState::LateralDebugState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::DEBUG_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralDebugState::Builder ControlsState::LateralControlState::Builder::initDebugState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::DEBUG_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptDebugState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralDebugState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::DEBUG_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralDebugState> ControlsState::LateralControlState::Builder::disownDebugState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralDebugState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isTorqueState() const {
  return which() == ControlsState::LateralControlState::TORQUE_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isTorqueState() {
  return which() == ControlsState::LateralControlState::TORQUE_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasTorqueState() const {
  if (which() != ControlsState::LateralControlState::TORQUE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasTorqueState() {
  if (which() != ControlsState::LateralControlState::TORQUE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralTorqueState::Reader ControlsState::LateralControlState::Reader::getTorqueState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralTorqueState::Builder ControlsState::LateralControlState::Builder::getTorqueState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setTorqueState( ::cereal::ControlsState::LateralTorqueState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::TORQUE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralTorqueState::Builder ControlsState::LateralControlState::Builder::initTorqueState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::TORQUE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptTorqueState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::TORQUE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralTorqueState> ControlsState::LateralControlState::Builder::disownTorqueState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralTorqueState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isCurvatureStateDEPRECATED() const {
  return which() == ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Builder::isCurvatureStateDEPRECATED() {
  return which() == ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsState::LateralControlState::Reader::hasCurvatureStateDEPRECATED() const {
  if (which() != ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasCurvatureStateDEPRECATED() {
  if (which() != ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralCurvatureState::Reader ControlsState::LateralControlState::Reader::getCurvatureStateDEPRECATED() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralCurvatureState::Builder ControlsState::LateralControlState::Builder::getCurvatureStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setCurvatureStateDEPRECATED( ::cereal::ControlsState::LateralCurvatureState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralCurvatureState::Builder ControlsState::LateralControlState::Builder::initCurvatureStateDEPRECATED() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptCurvatureStateDEPRECATED(
    ::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralCurvatureState> ControlsState::LateralControlState::Builder::disownCurvatureStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::CURVATURE_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralCurvatureState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint32_t DrivingModelData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DrivingModelData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DrivingModelData::Reader::getFrameIdExtra() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DrivingModelData::Builder::getFrameIdExtra() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::Builder::setFrameIdExtra( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DrivingModelData::Reader::hasAction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::Builder::hasAction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::Action::Reader DrivingModelData::Reader::getAction() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::Action::Builder DrivingModelData::Builder::getAction() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::Action::Pipeline DrivingModelData::Pipeline::getAction() {
  return  ::cereal::ModelDataV2::Action::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DrivingModelData::Builder::setAction( ::cereal::ModelDataV2::Action::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::Action::Builder DrivingModelData::Builder::initAction() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DrivingModelData::Builder::adoptAction(
    ::capnp::Orphan< ::cereal::ModelDataV2::Action>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::Action> DrivingModelData::Builder::disownAction() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DrivingModelData::Reader::hasLaneLineMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::Builder::hasLaneLineMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DrivingModelData::LaneLineMeta::Reader DrivingModelData::Reader::getLaneLineMeta() const {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::LaneLineMeta>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::DrivingModelData::LaneLineMeta::Builder DrivingModelData::Builder::getLaneLineMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::LaneLineMeta>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DrivingModelData::LaneLineMeta::Pipeline DrivingModelData::Pipeline::getLaneLineMeta() {
  return  ::cereal::DrivingModelData::LaneLineMeta::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DrivingModelData::Builder::setLaneLineMeta( ::cereal::DrivingModelData::LaneLineMeta::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::LaneLineMeta>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DrivingModelData::LaneLineMeta::Builder DrivingModelData::Builder::initLaneLineMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::LaneLineMeta>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DrivingModelData::Builder::adoptLaneLineMeta(
    ::capnp::Orphan< ::cereal::DrivingModelData::LaneLineMeta>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::LaneLineMeta>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DrivingModelData::LaneLineMeta> DrivingModelData::Builder::disownLaneLineMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::LaneLineMeta>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DrivingModelData::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DrivingModelData::MetaData::Reader DrivingModelData::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::MetaData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::DrivingModelData::MetaData::Builder DrivingModelData::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::MetaData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DrivingModelData::MetaData::Pipeline DrivingModelData::Pipeline::getMeta() {
  return  ::cereal::DrivingModelData::MetaData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void DrivingModelData::Builder::setMeta( ::cereal::DrivingModelData::MetaData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::MetaData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DrivingModelData::MetaData::Builder DrivingModelData::Builder::initMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::MetaData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DrivingModelData::Builder::adoptMeta(
    ::capnp::Orphan< ::cereal::DrivingModelData::MetaData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::MetaData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DrivingModelData::MetaData> DrivingModelData::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::MetaData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DrivingModelData::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DrivingModelData::PolyPath::Reader DrivingModelData::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::PolyPath>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::DrivingModelData::PolyPath::Builder DrivingModelData::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::PolyPath>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DrivingModelData::PolyPath::Pipeline DrivingModelData::Pipeline::getPath() {
  return  ::cereal::DrivingModelData::PolyPath::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void DrivingModelData::Builder::setPath( ::cereal::DrivingModelData::PolyPath::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::PolyPath>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DrivingModelData::PolyPath::Builder DrivingModelData::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::PolyPath>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DrivingModelData::Builder::adoptPath(
    ::capnp::Orphan< ::cereal::DrivingModelData::PolyPath>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::PolyPath>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DrivingModelData::PolyPath> DrivingModelData::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData::PolyPath>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float DrivingModelData::Reader::getFrameDropPerc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DrivingModelData::Builder::getFrameDropPerc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::Builder::setFrameDropPerc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DrivingModelData::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DrivingModelData::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool DrivingModelData::PolyPath::Reader::hasXCoefficients() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::PolyPath::Builder::hasXCoefficients() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DrivingModelData::PolyPath::Reader::getXCoefficients() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DrivingModelData::PolyPath::Builder::getXCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DrivingModelData::PolyPath::Builder::setXCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DrivingModelData::PolyPath::Builder::setXCoefficients(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DrivingModelData::PolyPath::Builder::initXCoefficients(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DrivingModelData::PolyPath::Builder::adoptXCoefficients(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DrivingModelData::PolyPath::Builder::disownXCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DrivingModelData::PolyPath::Reader::hasYCoefficients() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::PolyPath::Builder::hasYCoefficients() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DrivingModelData::PolyPath::Reader::getYCoefficients() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DrivingModelData::PolyPath::Builder::getYCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DrivingModelData::PolyPath::Builder::setYCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DrivingModelData::PolyPath::Builder::setYCoefficients(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DrivingModelData::PolyPath::Builder::initYCoefficients(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DrivingModelData::PolyPath::Builder::adoptYCoefficients(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DrivingModelData::PolyPath::Builder::disownYCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DrivingModelData::PolyPath::Reader::hasZCoefficients() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingModelData::PolyPath::Builder::hasZCoefficients() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DrivingModelData::PolyPath::Reader::getZCoefficients() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DrivingModelData::PolyPath::Builder::getZCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DrivingModelData::PolyPath::Builder::setZCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DrivingModelData::PolyPath::Builder::setZCoefficients(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DrivingModelData::PolyPath::Builder::initZCoefficients(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DrivingModelData::PolyPath::Builder::adoptZCoefficients(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DrivingModelData::PolyPath::Builder::disownZCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DrivingModelData::LaneLineMeta::Reader::getLeftY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DrivingModelData::LaneLineMeta::Builder::getLeftY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::LaneLineMeta::Builder::setLeftY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DrivingModelData::LaneLineMeta::Reader::getRightY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DrivingModelData::LaneLineMeta::Builder::getRightY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::LaneLineMeta::Builder::setRightY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DrivingModelData::LaneLineMeta::Reader::getLeftProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DrivingModelData::LaneLineMeta::Builder::getLeftProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::LaneLineMeta::Builder::setLeftProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DrivingModelData::LaneLineMeta::Reader::getRightProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DrivingModelData::LaneLineMeta::Builder::getRightProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::LaneLineMeta::Builder::setRightProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LaneChangeState DrivingModelData::MetaData::Reader::getLaneChangeState() const {
  return _reader.getDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LaneChangeState DrivingModelData::MetaData::Builder::getLaneChangeState() {
  return _builder.getDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::MetaData::Builder::setLaneChangeState( ::cereal::LaneChangeState value) {
  _builder.setDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LaneChangeDirection DrivingModelData::MetaData::Reader::getLaneChangeDirection() const {
  return _reader.getDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LaneChangeDirection DrivingModelData::MetaData::Builder::getLaneChangeDirection() {
  return _builder.getDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DrivingModelData::MetaData::Builder::setLaneChangeDirection( ::cereal::LaneChangeDirection value) {
  _builder.setDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool XYZTData::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool XYZTData::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool XYZTData::Reader::hasZ() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasZ() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getZ() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getZ() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setZ( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setZ(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initZ(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptZ(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownZ() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool XYZTData::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setT(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initT(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptT(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool XYZTData::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool XYZTData::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool XYZTData::Reader::hasZStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool XYZTData::Builder::hasZStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader XYZTData::Reader::getZStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::getZStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void XYZTData::Builder::setZStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void XYZTData::Builder::setZStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder XYZTData::Builder::initZStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void XYZTData::Builder::adoptZStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> XYZTData::Builder::disownZStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint32_t ModelDataV2::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelDataV2::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelDataV2::Reader::getFrameAge() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelDataV2::Builder::getFrameAge() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameAge( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::Reader::getFrameDropPerc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Builder::getFrameDropPerc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameDropPerc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ModelDataV2::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ModelDataV2::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::XYZTData::Reader ModelDataV2::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::XYZTData::Pipeline ModelDataV2::Pipeline::getPosition() {
  return  ::cereal::XYZTData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setPosition( ::cereal::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptPosition(
    ::capnp::Orphan< ::cereal::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::XYZTData> ModelDataV2::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::XYZTData::Reader ModelDataV2::Reader::getOrientation() const {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::getOrientation() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::XYZTData::Pipeline ModelDataV2::Pipeline::getOrientation() {
  return  ::cereal::XYZTData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setOrientation( ::cereal::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::initOrientation() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptOrientation(
    ::capnp::Orphan< ::cereal::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::XYZTData> ModelDataV2::Builder::disownOrientation() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::XYZTData::Reader ModelDataV2::Reader::getVelocity() const {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::getVelocity() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::XYZTData::Pipeline ModelDataV2::Pipeline::getVelocity() {
  return  ::cereal::XYZTData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setVelocity( ::cereal::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::initVelocity() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptVelocity(
    ::capnp::Orphan< ::cereal::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::XYZTData> ModelDataV2::Builder::disownVelocity() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasOrientationRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasOrientationRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::XYZTData::Reader ModelDataV2::Reader::getOrientationRate() const {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::getOrientationRate() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::XYZTData::Pipeline ModelDataV2::Pipeline::getOrientationRate() {
  return  ::cereal::XYZTData::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setOrientationRate( ::cereal::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::initOrientationRate() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptOrientationRate(
    ::capnp::Orphan< ::cereal::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::XYZTData> ModelDataV2::Builder::disownOrientationRate() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLaneLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLaneLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getLaneLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLaneLines( ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initLaneLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLaneLines(
    ::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLaneLineProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLaneLineProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Reader::getLaneLineProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::getLaneLineProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLaneLineProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Builder::setLaneLineProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::initLaneLineProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLaneLineProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Builder::disownLaneLineProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasRoadEdges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasRoadEdges() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getRoadEdges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getRoadEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setRoadEdges( ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initRoadEdges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptRoadEdges(
    ::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownRoadEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::XYZTData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLeads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLeads() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getLeads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getLeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLeads( ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initLeads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLeads(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownLeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV2,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::MetaData::Reader ModelDataV2::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::MetaData::Builder ModelDataV2::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::MetaData::Pipeline ModelDataV2::Pipeline::getMeta() {
  return  ::cereal::ModelDataV2::MetaData::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setMeta( ::cereal::ModelDataV2::MetaData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::MetaData::Builder ModelDataV2::Builder::initMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptMeta(
    ::capnp::Orphan< ::cereal::ModelDataV2::MetaData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::MetaData> ModelDataV2::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::MetaData>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasLaneLineStds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLaneLineStds() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Reader::getLaneLineStds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::getLaneLineStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLaneLineStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Builder::setLaneLineStds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::initLaneLineStds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLaneLineStds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Builder::disownLaneLineStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasRoadEdgeStds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasRoadEdgeStds() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Reader::getRoadEdgeStds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::getRoadEdgeStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setRoadEdgeStds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Builder::setRoadEdgeStds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Builder::initRoadEdgeStds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptRoadEdgeStds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Builder::disownRoadEdgeStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline float ModelDataV2::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasRawPredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasRawPredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ModelDataV2::Reader::getRawPredictions() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ModelDataV2::Builder::getRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setRawPredictions( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ModelDataV2::Builder::initRawPredictions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptRawPredictions(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ModelDataV2::Builder::disownRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline float ModelDataV2::Reader::getGpuExecutionTimeDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Builder::getGpuExecutionTimeDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setGpuExecutionTimeDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasLeadsV3() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLeadsV3() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader ModelDataV2::Reader::getLeadsV3() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::getLeadsV3() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::setLeadsV3( ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>::Builder ModelDataV2::Builder::initLeadsV3(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Builder::adoptLeadsV3(
    ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>> ModelDataV2::Builder::disownLeadsV3() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ModelDataV2::LeadDataV3,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::XYZTData::Reader ModelDataV2::Reader::getAcceleration() const {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::getAcceleration() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::XYZTData::Pipeline ModelDataV2::Pipeline::getAcceleration() {
  return  ::cereal::XYZTData::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setAcceleration( ::cereal::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::XYZTData::Builder ModelDataV2::Builder::initAcceleration() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptAcceleration(
    ::capnp::Orphan< ::cereal::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::XYZTData> ModelDataV2::Builder::disownAcceleration() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::uint32_t ModelDataV2::Reader::getFrameIdExtra() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelDataV2::Builder::getFrameIdExtra() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setFrameIdExtra( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasTemporalPoseDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasTemporalPoseDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::Pose::Reader ModelDataV2::Reader::getTemporalPoseDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::Pose::Builder ModelDataV2::Builder::getTemporalPoseDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::Pose::Pipeline ModelDataV2::Pipeline::getTemporalPoseDEPRECATED() {
  return  ::cereal::ModelDataV2::Pose::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setTemporalPoseDEPRECATED( ::cereal::ModelDataV2::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::Pose::Builder ModelDataV2::Builder::initTemporalPoseDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptTemporalPoseDEPRECATED(
    ::capnp::Orphan< ::cereal::ModelDataV2::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::Pose> ModelDataV2::Builder::disownTemporalPoseDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::getNavEnabledDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}

inline bool ModelDataV2::Builder::getNavEnabledDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setNavEnabledDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ModelDataV2::ConfidenceClass ModelDataV2::Reader::getConfidence() const {
  return _reader.getDataField< ::cereal::ModelDataV2::ConfidenceClass>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ModelDataV2::ConfidenceClass ModelDataV2::Builder::getConfidence() {
  return _builder.getDataField< ::cereal::ModelDataV2::ConfidenceClass>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setConfidence( ::cereal::ModelDataV2::ConfidenceClass value) {
  _builder.setDataField< ::cereal::ModelDataV2::ConfidenceClass>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ModelDataV2::Reader::getLocationMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ModelDataV2::Builder::getLocationMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Builder::setLocationMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Reader::hasLateralPlannerSolutionDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasLateralPlannerSolutionDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::LateralPlannerSolution::Reader ModelDataV2::Reader::getLateralPlannerSolutionDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::LateralPlannerSolution>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::LateralPlannerSolution::Builder ModelDataV2::Builder::getLateralPlannerSolutionDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::LateralPlannerSolution>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::LateralPlannerSolution::Pipeline ModelDataV2::Pipeline::getLateralPlannerSolutionDEPRECATED() {
  return  ::cereal::ModelDataV2::LateralPlannerSolution::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setLateralPlannerSolutionDEPRECATED( ::cereal::ModelDataV2::LateralPlannerSolution::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::LateralPlannerSolution>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::LateralPlannerSolution::Builder ModelDataV2::Builder::initLateralPlannerSolutionDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::LateralPlannerSolution>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptLateralPlannerSolutionDEPRECATED(
    ::capnp::Orphan< ::cereal::ModelDataV2::LateralPlannerSolution>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::LateralPlannerSolution>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::LateralPlannerSolution> ModelDataV2::Builder::disownLateralPlannerSolutionDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::LateralPlannerSolution>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Reader::hasAction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Builder::hasAction() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::Action::Reader ModelDataV2::Reader::getAction() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::Action::Builder ModelDataV2::Builder::getAction() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::Action::Pipeline ModelDataV2::Pipeline::getAction() {
  return  ::cereal::ModelDataV2::Action::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::Builder::setAction( ::cereal::ModelDataV2::Action::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::Action::Builder ModelDataV2::Builder::initAction() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Builder::adoptAction(
    ::capnp::Orphan< ::cereal::ModelDataV2::Action>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::Action> ModelDataV2::Builder::disownAction() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::Action>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline float ModelDataV2::LeadDataV2::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV2::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV2::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::LeadDataV2::Reader::getT() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV2::Builder::getT() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV2::Builder::setT(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::LeadDataV2::Reader::hasXyva() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV2::Builder::hasXyva() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV2::Reader::getXyva() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::getXyva() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV2::Builder::setXyva( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV2::Builder::setXyva(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::initXyva(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV2::Builder::adoptXyva(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV2::Builder::disownXyva() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV2::Reader::hasXyvaStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV2::Builder::hasXyvaStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV2::Reader::getXyvaStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::getXyvaStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV2::Builder::setXyvaStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV2::Builder::setXyvaStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV2::Builder::initXyvaStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV2::Builder::adoptXyvaStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV2::Builder::disownXyvaStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float ModelDataV2::LeadDataV3::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV3::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV3::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::LeadDataV3::Reader::getProbTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::LeadDataV3::Builder::getProbTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::LeadDataV3::Builder::setProbTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::LeadDataV3::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setT(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initT(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptT(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasVStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasVStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getVStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getVStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setVStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setVStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initVStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptVStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownVStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setA(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LeadDataV3::Reader::hasAStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LeadDataV3::Builder::hasAStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LeadDataV3::Reader::getAStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::getAStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LeadDataV3::Builder::setAStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LeadDataV3::Builder::setAStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LeadDataV3::Builder::initAStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LeadDataV3::Builder::adoptAStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LeadDataV3::Builder::disownAStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline float ModelDataV2::MetaData::Reader::getEngagedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getEngagedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setEngagedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::MetaData::Reader::hasDesirePrediction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::MetaData::Builder::hasDesirePrediction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::MetaData::Reader::getDesirePrediction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::getDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::MetaData::Builder::setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::MetaData::Builder::setDesirePrediction(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::initDesirePrediction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::MetaData::Builder::adoptDesirePrediction(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::MetaData::Builder::disownDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ModelDataV2::MetaData::Reader::getBrakeDisengageProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getBrakeDisengageProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setBrakeDisengageProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::MetaData::Reader::getGasDisengageProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getGasDisengageProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setGasDisengageProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::MetaData::Reader::getSteerOverrideProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::MetaData::Builder::getSteerOverrideProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setSteerOverrideProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::MetaData::Reader::hasDesireState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::MetaData::Builder::hasDesireState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::MetaData::Reader::getDesireState() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::getDesireState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::MetaData::Builder::setDesireState( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::MetaData::Builder::setDesireState(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::MetaData::Builder::initDesireState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::MetaData::Builder::adoptDesireState(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::MetaData::Builder::disownDesireState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::MetaData::Reader::hasDisengagePredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::MetaData::Builder::hasDisengagePredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::DisengagePredictions::Reader ModelDataV2::MetaData::Reader::getDisengagePredictions() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::DisengagePredictions::Builder ModelDataV2::MetaData::Builder::getDisengagePredictions() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelDataV2::DisengagePredictions::Pipeline ModelDataV2::MetaData::Pipeline::getDisengagePredictions() {
  return  ::cereal::ModelDataV2::DisengagePredictions::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelDataV2::MetaData::Builder::setDisengagePredictions( ::cereal::ModelDataV2::DisengagePredictions::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::DisengagePredictions::Builder ModelDataV2::MetaData::Builder::initDisengagePredictions() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::MetaData::Builder::adoptDisengagePredictions(
    ::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2::DisengagePredictions> ModelDataV2::MetaData::Builder::disownDisengagePredictions() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2::DisengagePredictions>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::MetaData::Reader::getHardBrakePredicted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool ModelDataV2::MetaData::Builder::getHardBrakePredicted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setHardBrakePredicted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LaneChangeState ModelDataV2::MetaData::Reader::getLaneChangeState() const {
  return _reader.getDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LaneChangeState ModelDataV2::MetaData::Builder::getLaneChangeState() {
  return _builder.getDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setLaneChangeState( ::cereal::LaneChangeState value) {
  _builder.setDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LaneChangeDirection ModelDataV2::MetaData::Reader::getLaneChangeDirection() const {
  return _reader.getDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LaneChangeDirection ModelDataV2::MetaData::Builder::getLaneChangeDirection() {
  return _builder.getDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::MetaData::Builder::setLaneChangeDirection( ::cereal::LaneChangeDirection value) {
  _builder.setDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setT( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setT(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initT(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptT(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrakeDisengageProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrakeDisengageProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrakeDisengageProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrakeDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrakeDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrakeDisengageProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrakeDisengageProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrakeDisengageProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrakeDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasGasDisengageProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasGasDisengageProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getGasDisengageProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getGasDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setGasDisengageProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setGasDisengageProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initGasDisengageProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptGasDisengageProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownGasDisengageProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasSteerOverrideProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasSteerOverrideProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getSteerOverrideProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getSteerOverrideProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setSteerOverrideProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setSteerOverrideProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initSteerOverrideProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptSteerOverrideProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownSteerOverrideProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrake3MetersPerSecondSquaredProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrake3MetersPerSecondSquaredProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrake3MetersPerSecondSquaredProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrake3MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake3MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake3MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrake3MetersPerSecondSquaredProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrake3MetersPerSecondSquaredProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrake3MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrake4MetersPerSecondSquaredProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrake4MetersPerSecondSquaredProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrake4MetersPerSecondSquaredProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrake4MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake4MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake4MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrake4MetersPerSecondSquaredProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrake4MetersPerSecondSquaredProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrake4MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrake5MetersPerSecondSquaredProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrake5MetersPerSecondSquaredProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrake5MetersPerSecondSquaredProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrake5MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake5MetersPerSecondSquaredProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrake5MetersPerSecondSquaredProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrake5MetersPerSecondSquaredProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrake5MetersPerSecondSquaredProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrake5MetersPerSecondSquaredProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasGasPressProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasGasPressProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getGasPressProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getGasPressProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setGasPressProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setGasPressProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initGasPressProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptGasPressProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownGasPressProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::DisengagePredictions::Reader::hasBrakePressProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::DisengagePredictions::Builder::hasBrakePressProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::DisengagePredictions::Reader::getBrakePressProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::getBrakePressProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrakePressProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::DisengagePredictions::Builder::setBrakePressProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::DisengagePredictions::Builder::initBrakePressProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::DisengagePredictions::Builder::adoptBrakePressProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::DisengagePredictions::Builder::disownBrakePressProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::Pose::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::Pose::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::Pose::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::Pose::Builder::setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::Pose::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::Pose::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::Pose::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::Pose::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasYaw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasYaw() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getYaw() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getYaw() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYaw( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYaw(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initYaw(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptYaw(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownYaw() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasYawRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasYawRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getYawRate() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getYawRate() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYawRate( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYawRate(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initYawRate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptYawRate(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownYawRate() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasYawStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasYawStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getYawStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getYawStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYawStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYawStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initYawStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptYawStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownYawStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelDataV2::LateralPlannerSolution::Reader::hasYawRateStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelDataV2::LateralPlannerSolution::Builder::hasYawRateStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelDataV2::LateralPlannerSolution::Reader::getYawRateStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::getYawRateStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYawRateStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::setYawRateStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelDataV2::LateralPlannerSolution::Builder::initYawRateStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelDataV2::LateralPlannerSolution::Builder::adoptYawRateStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelDataV2::LateralPlannerSolution::Builder::disownYawRateStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float ModelDataV2::Action::Reader::getDesiredCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Action::Builder::getDesiredCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Action::Builder::setDesiredCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelDataV2::Action::Reader::getDesiredAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelDataV2::Action::Builder::getDesiredAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Action::Builder::setDesiredAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2::Action::Reader::getShouldStop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool ModelDataV2::Action::Builder::getShouldStop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2::Action::Builder::setShouldStop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::EncodeIndex::Type EncodeIndex::Reader::getType() const {
  return _reader.getDataField< ::cereal::EncodeIndex::Type>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::EncodeIndex::Type EncodeIndex::Builder::getType() {
  return _builder.getDataField< ::cereal::EncodeIndex::Type>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setType( ::cereal::EncodeIndex::Type value) {
  _builder.setDataField< ::cereal::EncodeIndex::Type>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t EncodeIndex::Reader::getSegmentNum() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t EncodeIndex::Builder::getSegmentNum() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentNum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getSegmentId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getSegmentId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getSegmentIdEncode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getSegmentIdEncode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentIdEncode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EncodeIndex::Reader::getTimestampSof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EncodeIndex::Builder::getTimestampSof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setTimestampSof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EncodeIndex::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EncodeIndex::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getLen() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getLen() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setLen( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AndroidLogEntry::Reader::getId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AndroidLogEntry::Builder::getId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AndroidLogEntry::Reader::getTs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AndroidLogEntry::Builder::getTs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setTs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AndroidLogEntry::Reader::getPriority() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AndroidLogEntry::Builder::getPriority() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setPriority( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidLogEntry::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidLogEntry::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidLogEntry::Reader::getTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidLogEntry::Builder::getTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidLogEntry::Reader::hasTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidLogEntry::Builder::hasTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AndroidLogEntry::Reader::getTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::getTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidLogEntry::Builder::setTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::initTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AndroidLogEntry::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AndroidLogEntry::Builder::disownTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidLogEntry::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidLogEntry::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AndroidLogEntry::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AndroidLogEntry::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AndroidLogEntry::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AndroidLogEntry::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverAssistance::Reader::getLeftLaneDeparture() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DriverAssistance::Builder::getLeftLaneDeparture() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverAssistance::Builder::setLeftLaneDeparture(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DriverAssistance::Reader::getRightLaneDeparture() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool DriverAssistance::Builder::getRightLaneDeparture() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverAssistance::Builder::setRightLaneDeparture(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getLateralValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getLateralValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setLateralValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::hasDPolyDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasDPolyDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getDPolyDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getDPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setDPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setDPolyDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initDPolyDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptDPolyDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownDPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::Reader::getLongitudinalValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getLongitudinalValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setLongitudinalValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getVTargetDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getVTargetDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setVTargetDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getATargetMinDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getATargetMinDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setATargetMinDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getATargetMaxDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getATargetMaxDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setATargetMaxDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getJerkFactorDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getJerkFactorDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setJerkFactorDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getHasLead() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getHasLead() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setHasLead(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LongitudinalPlan::Reader::getModelMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LongitudinalPlan::Builder::getModelMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setModelMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LongitudinalPlan::Reader::getRadarStateMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LongitudinalPlan::Builder::getRadarStateMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setRadarStateMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getLaneWidthDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getLaneWidthDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setLaneWidthDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::hasGpsTrajectoryDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasGpsTrajectoryDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LongitudinalPlan::GpsTrajectory::Reader LongitudinalPlan::Reader::getGpsTrajectoryDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan::GpsTrajectory>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LongitudinalPlan::GpsTrajectory::Builder LongitudinalPlan::Builder::getGpsTrajectoryDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan::GpsTrajectory>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LongitudinalPlan::GpsTrajectory::Pipeline LongitudinalPlan::Pipeline::getGpsTrajectoryDEPRECATED() {
  return  ::cereal::LongitudinalPlan::GpsTrajectory::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LongitudinalPlan::Builder::setGpsTrajectoryDEPRECATED( ::cereal::LongitudinalPlan::GpsTrajectory::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan::GpsTrajectory>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LongitudinalPlan::GpsTrajectory::Builder LongitudinalPlan::Builder::initGpsTrajectoryDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan::GpsTrajectory>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::adoptGpsTrajectoryDEPRECATED(
    ::capnp::Orphan< ::cereal::LongitudinalPlan::GpsTrajectory>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan::GpsTrajectory>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LongitudinalPlan::GpsTrajectory> LongitudinalPlan::Builder::disownGpsTrajectoryDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan::GpsTrajectory>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::Reader::hasEventsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasEventsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader LongitudinalPlan::Reader::getEventsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder LongitudinalPlan::Builder::getEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder LongitudinalPlan::Builder::initEventsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> LongitudinalPlan::Builder::disownEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float LongitudinalPlan::Reader::getVTargetFutureDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getVTargetFutureDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setVTargetFutureDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource LongitudinalPlan::Reader::getLongitudinalPlanSource() const {
  return _reader.getDataField< ::cereal::LongitudinalPlan::LongitudinalPlanSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlan::LongitudinalPlanSource LongitudinalPlan::Builder::getLongitudinalPlanSource() {
  return _builder.getDataField< ::cereal::LongitudinalPlan::LongitudinalPlanSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setLongitudinalPlanSource( ::cereal::LongitudinalPlan::LongitudinalPlanSource value) {
  _builder.setDataField< ::cereal::LongitudinalPlan::LongitudinalPlanSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getVCruiseDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getVCruiseDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setVCruiseDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getACruiseDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getACruiseDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setACruiseDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getATarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getATarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setATarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getGpsPlannerActiveDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getGpsPlannerActiveDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setGpsPlannerActiveDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getVMaxDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getVMaxDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setVMaxDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getVCurvatureDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getVCurvatureDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setVCurvatureDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getDecelForTurnDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getDecelForTurnDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setDecelForTurnDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getHasLeftLaneDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getHasLeftLaneDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setHasLeftLaneDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getHasRightLaneDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getHasRightLaneDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setHasRightLaneDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getMapValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getMapValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setMapValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getVStartDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getVStartDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setVStartDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getAStartDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getAStartDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setAStartDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getRadarValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getRadarValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setRadarValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlan::Reader::getProcessingDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getProcessingDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setProcessingDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getRadarCanErrorDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getRadarCanErrorDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setRadarCanErrorDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getCommIssueDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getCommIssueDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setCommIssueDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::hasAccels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasAccels() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getAccels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getAccels() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setAccels( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setAccels(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initAccels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptAccels(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownAccels() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::Reader::hasSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getSpeeds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setSpeeds( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setSpeeds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initSpeeds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptSpeeds(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::Reader::hasJerks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::Builder::hasJerks() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::Reader::getJerks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::getJerks() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::Builder::setJerks( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::Builder::setJerks(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::Builder::initJerks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::Builder::adoptJerks(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::Builder::disownJerks() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float LongitudinalPlan::Reader::getSolverExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlan::Builder::getSolverExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setSolverExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPersonality LongitudinalPlan::Reader::getPersonalityDEPRECATED() const {
  return _reader.getDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPersonality LongitudinalPlan::Builder::getPersonalityDEPRECATED() {
  return _builder.getDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setPersonalityDEPRECATED( ::cereal::LongitudinalPersonality value) {
  _builder.setDataField< ::cereal::LongitudinalPersonality>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getShouldStop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getShouldStop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setShouldStop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getAllowThrottle() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getAllowThrottle() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setAllowThrottle(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::Reader::getAllowBrake() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlan::Builder::getAllowBrake() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlan::Builder::setAllowBrake(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlan::GpsTrajectory::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::GpsTrajectory::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::GpsTrajectory::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::GpsTrajectory::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlan::GpsTrajectory::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlan::GpsTrajectory::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlan::GpsTrajectory::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlan::GpsTrajectory::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlan::GpsTrajectory::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlan::GpsTrajectory::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UiPlan::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UiPlan::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::XYZTData::Reader UiPlan::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::XYZTData::Builder UiPlan::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::XYZTData::Pipeline UiPlan::Pipeline::getPosition() {
  return  ::cereal::XYZTData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UiPlan::Builder::setPosition( ::cereal::XYZTData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::XYZTData::Builder UiPlan::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UiPlan::Builder::adoptPosition(
    ::capnp::Orphan< ::cereal::XYZTData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::XYZTData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::XYZTData> UiPlan::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::XYZTData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UiPlan::Reader::hasAccel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UiPlan::Builder::hasAccel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader UiPlan::Reader::getAccel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder UiPlan::Builder::getAccel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UiPlan::Builder::setAccel( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UiPlan::Builder::setAccel(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder UiPlan::Builder::initAccel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UiPlan::Builder::adoptAccel(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> UiPlan::Builder::disownAccel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t UiPlan::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UiPlan::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UiPlan::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getLaneWidthDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getLaneWidthDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLaneWidthDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasDPolyDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasDPolyDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getDPolyDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getDPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setDPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setDPolyDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initDPolyDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptDPolyDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownDPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LateralPlan::Reader::hasCPolyDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasCPolyDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getCPolyDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getCPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setCPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setCPolyDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initCPolyDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptCPolyDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownCPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float LateralPlan::Reader::getCProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getCProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setCProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasLPolyDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasLPolyDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getLPolyDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getLPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setLPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setLPolyDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initLPolyDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptLPolyDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownLPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float LateralPlan::Reader::getLProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getLProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasRPolyDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasRPolyDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getRPolyDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getRPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setRPolyDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setRPolyDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initRPolyDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptRPolyDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownRPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float LateralPlan::Reader::getRProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getRProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setRProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getSteeringAngleDegDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getSteeringAngleDegDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setSteeringAngleDegDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getMpcSolutionValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getMpcSolutionValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setMpcSolutionValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getParamsValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getParamsValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setParamsValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getAngleOffsetDegDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getAngleOffsetDegDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setAngleOffsetDegDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getModelValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getModelValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setModelValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getSteeringRateDegDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getSteeringRateDegDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setSteeringRateDegDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getSensorValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getSensorValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setSensorValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getCommIssueDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getCommIssueDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setCommIssueDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::getPosenetValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getPosenetValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setPosenetValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::Desire LateralPlan::Reader::getDesire() const {
  return _reader.getDataField< ::cereal::Desire>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::cereal::Desire LateralPlan::Builder::getDesire() {
  return _builder.getDataField< ::cereal::Desire>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setDesire( ::cereal::Desire value) {
  _builder.setDataField< ::cereal::Desire>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LaneChangeState LateralPlan::Reader::getLaneChangeState() const {
  return _reader.getDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LaneChangeState LateralPlan::Builder::getLaneChangeState() {
  return _builder.getDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLaneChangeState( ::cereal::LaneChangeState value) {
  _builder.setDataField< ::cereal::LaneChangeState>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LaneChangeDirection LateralPlan::Reader::getLaneChangeDirection() const {
  return _reader.getDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LaneChangeDirection LateralPlan::Builder::getLaneChangeDirection() {
  return _builder.getDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setLaneChangeDirection( ::cereal::LaneChangeDirection value) {
  _builder.setDataField< ::cereal::LaneChangeDirection>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasDPathPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasDPathPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getDPathPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getDPathPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setDPathPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setDPathPoints(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initDPathPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptDPathPoints(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownDPathPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float LateralPlan::Reader::getDProbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getDProbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setDProbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getCurvatureDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getCurvatureDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setCurvatureDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getCurvatureRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getCurvatureRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setCurvatureRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getRawCurvatureDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getRawCurvatureDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setRawCurvatureDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getRawCurvatureRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getRawCurvatureRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setRawCurvatureRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasPsis() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasPsis() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getPsis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getPsis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setPsis( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setPsis(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initPsis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptPsis(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownPsis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LateralPlan::Reader::hasCurvatures() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasCurvatures() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getCurvatures() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getCurvatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setCurvatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setCurvatures(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initCurvatures(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptCurvatures(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownCurvatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool LateralPlan::Reader::hasCurvatureRates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasCurvatureRates() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::Reader::getCurvatureRates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::getCurvatureRates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::setCurvatureRates( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::Builder::setCurvatureRates(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::Builder::initCurvatureRates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::Builder::adoptCurvatureRates(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::Builder::disownCurvatureRates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool LateralPlan::Reader::getUseLaneLines() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<166>() * ::capnp::ELEMENTS);
}

inline bool LateralPlan::Builder::getUseLaneLines() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<166>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setUseLaneLines(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<166>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getSolverExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getSolverExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setSolverExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LateralPlan::Reader::getModelMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LateralPlan::Builder::getModelMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setModelMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlan::Reader::getSolverCost() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LateralPlan::Builder::getSolverCost() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LateralPlan::Builder::setSolverCost(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlan::Reader::hasSolverState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::Builder::hasSolverState() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LateralPlan::SolverState::Reader LateralPlan::Reader::getSolverState() const {
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan::SolverState>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::LateralPlan::SolverState::Builder LateralPlan::Builder::getSolverState() {
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan::SolverState>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LateralPlan::SolverState::Pipeline LateralPlan::Pipeline::getSolverState() {
  return  ::cereal::LateralPlan::SolverState::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void LateralPlan::Builder::setSolverState( ::cereal::LateralPlan::SolverState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LateralPlan::SolverState>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LateralPlan::SolverState::Builder LateralPlan::Builder::initSolverState() {
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan::SolverState>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void LateralPlan::Builder::adoptSolverState(
    ::capnp::Orphan< ::cereal::LateralPlan::SolverState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LateralPlan::SolverState>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LateralPlan::SolverState> LateralPlan::Builder::disownSolverState() {
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan::SolverState>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool LateralPlan::SolverState::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::SolverState::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader LateralPlan::SolverState::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder LateralPlan::SolverState::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LateralPlan::SolverState::Builder::setX( ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::SolverState::Builder::setX(::kj::ArrayPtr<const  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder LateralPlan::SolverState::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::SolverState::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> LateralPlan::SolverState::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LateralPlan::SolverState::Reader::hasU() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlan::SolverState::Builder::hasU() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlan::SolverState::Reader::getU() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::SolverState::Builder::getU() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LateralPlan::SolverState::Builder::setU( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LateralPlan::SolverState::Builder::setU(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlan::SolverState::Builder::initU(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LateralPlan::SolverState::Builder::adoptU(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlan::SolverState::Builder::disownU() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getPositionECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptPositionECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasPositionGeodetic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasPositionGeodetic() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getPositionGeodetic() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getPositionGeodetic() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getPositionGeodetic() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setPositionGeodetic( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initPositionGeodetic() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptPositionGeodetic(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownPositionGeodetic() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityNED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityNED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityNED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityDevice() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityDevice(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAccelerationDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAccelerationDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAccelerationDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAccelerationDevice() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAccelerationDevice( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAccelerationDevice(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasOrientationECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasOrientationECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getOrientationECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getOrientationECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptOrientationECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasOrientationNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasOrientationNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getOrientationNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getOrientationNED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptOrientationNED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAngularVelocityDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAngularVelocityDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAngularVelocityDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAngularVelocityDevice() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAngularVelocityDevice( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAngularVelocityDevice(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasCalibratedOrientationNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasCalibratedOrientationNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getCalibratedOrientationNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getCalibratedOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getCalibratedOrientationNED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setCalibratedOrientationNED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initCalibratedOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptCalibratedOrientationNED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownCalibratedOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasVelocityCalibrated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasVelocityCalibrated() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getVelocityCalibrated() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getVelocityCalibrated() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptVelocityCalibrated(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAccelerationCalibrated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAccelerationCalibrated() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAccelerationCalibrated() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAccelerationCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAccelerationCalibrated() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAccelerationCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAccelerationCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAccelerationCalibrated(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAccelerationCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::hasAngularVelocityCalibrated() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasAngularVelocityCalibrated() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getAngularVelocityCalibrated() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getAngularVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getAngularVelocityCalibrated() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setAngularVelocityCalibrated( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initAngularVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptAngularVelocityCalibrated(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownAngularVelocityCalibrated() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveLocationKalman::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveLocationKalman::Builder::getGpsWeek() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setGpsWeek( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationKalman::Reader::getGpsTimeOfWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double LiveLocationKalman::Builder::getGpsTimeOfWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setGpsTimeOfWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LiveLocationKalman::Status LiveLocationKalman::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::LiveLocationKalman::Status>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveLocationKalman::Status LiveLocationKalman::Builder::getStatus() {
  return _builder.getDataField< ::cereal::LiveLocationKalman::Status>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setStatus( ::cereal::LiveLocationKalman::Status value) {
  _builder.setDataField< ::cereal::LiveLocationKalman::Status>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t LiveLocationKalman::Reader::getUnixTimestampMillis() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t LiveLocationKalman::Builder::getUnixTimestampMillis() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setUnixTimestampMillis( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Reader::getInputsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getInputsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setInputsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::getPosenetOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getPosenetOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setPosenetOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::getGpsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getGpsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setGpsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::hasCalibratedOrientationECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasCalibratedOrientationECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getCalibratedOrientationECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getCalibratedOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getCalibratedOrientationECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setCalibratedOrientationECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initCalibratedOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptCalibratedOrientationECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownCalibratedOrientationECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Reader::getSensorsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getSensorsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setSensorsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveLocationKalman::Reader::getDeviceStable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, true);
}

inline bool LiveLocationKalman::Builder::getDeviceStable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, true);
}
inline void LiveLocationKalman::Builder::setDeviceStable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value, true);
}

inline double LiveLocationKalman::Reader::getTimeSinceReset() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double LiveLocationKalman::Builder::getTimeSinceReset() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setTimeSinceReset(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Reader::getExcessiveResets() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}

inline bool LiveLocationKalman::Builder::getExcessiveResets() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setExcessiveResets(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationKalman::Reader::getTimeToFirstFix() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveLocationKalman::Builder::getTimeToFirstFix() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Builder::setTimeToFirstFix(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationKalman::Reader::hasFilterState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Builder::hasFilterState() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveLocationKalman::Reader::getFilterState() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::getFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveLocationKalman::Pipeline::getFilterState() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void LiveLocationKalman::Builder::setFilterState( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveLocationKalman::Builder::initFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Builder::adoptFilterState(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveLocationKalman::Builder::disownFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Measurement::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Measurement::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationKalman::Measurement::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Measurement::Builder::setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLocationKalman::Measurement::Builder::setValue(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLocationKalman::Measurement::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveLocationKalman::Measurement::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Measurement::Reader::hasStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationKalman::Measurement::Builder::hasStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveLocationKalman::Measurement::Reader::getStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::getStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationKalman::Measurement::Builder::setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLocationKalman::Measurement::Builder::setStd(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveLocationKalman::Measurement::Builder::initStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLocationKalman::Measurement::Builder::adoptStd(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveLocationKalman::Measurement::Builder::disownStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationKalman::Measurement::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveLocationKalman::Measurement::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationKalman::Measurement::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::Reader::hasOrientationNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::Builder::hasOrientationNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LivePose::XYZMeasurement::Reader LivePose::Reader::getOrientationNED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::getOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LivePose::XYZMeasurement::Pipeline LivePose::Pipeline::getOrientationNED() {
  return  ::cereal::LivePose::XYZMeasurement::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LivePose::Builder::setOrientationNED( ::cereal::LivePose::XYZMeasurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::initOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LivePose::Builder::adoptOrientationNED(
    ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> LivePose::Builder::disownOrientationNED() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LivePose::Reader::hasVelocityDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::Builder::hasVelocityDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LivePose::XYZMeasurement::Reader LivePose::Reader::getVelocityDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::getVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LivePose::XYZMeasurement::Pipeline LivePose::Pipeline::getVelocityDevice() {
  return  ::cereal::LivePose::XYZMeasurement::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LivePose::Builder::setVelocityDevice( ::cereal::LivePose::XYZMeasurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::initVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LivePose::Builder::adoptVelocityDevice(
    ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> LivePose::Builder::disownVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LivePose::Reader::hasAccelerationDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::Builder::hasAccelerationDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LivePose::XYZMeasurement::Reader LivePose::Reader::getAccelerationDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::getAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LivePose::XYZMeasurement::Pipeline LivePose::Pipeline::getAccelerationDevice() {
  return  ::cereal::LivePose::XYZMeasurement::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LivePose::Builder::setAccelerationDevice( ::cereal::LivePose::XYZMeasurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::initAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LivePose::Builder::adoptAccelerationDevice(
    ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> LivePose::Builder::disownAccelerationDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LivePose::Reader::hasAngularVelocityDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::Builder::hasAngularVelocityDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LivePose::XYZMeasurement::Reader LivePose::Reader::getAngularVelocityDevice() const {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::getAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LivePose::XYZMeasurement::Pipeline LivePose::Pipeline::getAngularVelocityDevice() {
  return  ::cereal::LivePose::XYZMeasurement::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void LivePose::Builder::setAngularVelocityDevice( ::cereal::LivePose::XYZMeasurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LivePose::XYZMeasurement::Builder LivePose::Builder::initAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LivePose::Builder::adoptAngularVelocityDevice(
    ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LivePose::XYZMeasurement> LivePose::Builder::disownAngularVelocityDevice() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::XYZMeasurement>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LivePose::Reader::getInputsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LivePose::Builder::getInputsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LivePose::Builder::setInputsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::Reader::getPosenetOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LivePose::Builder::getPosenetOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LivePose::Builder::setPosenetOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::Reader::getSensorsOK() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LivePose::Builder::getSensorsOK() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LivePose::Builder::setSensorsOK(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::Reader::hasDebugFilterState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::Builder::hasDebugFilterState() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LivePose::FilterState::Reader LivePose::Reader::getDebugFilterState() const {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::FilterState>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::LivePose::FilterState::Builder LivePose::Builder::getDebugFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::FilterState>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LivePose::FilterState::Pipeline LivePose::Pipeline::getDebugFilterState() {
  return  ::cereal::LivePose::FilterState::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void LivePose::Builder::setDebugFilterState( ::cereal::LivePose::FilterState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::FilterState>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LivePose::FilterState::Builder LivePose::Builder::initDebugFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::FilterState>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LivePose::Builder::adoptDebugFilterState(
    ::capnp::Orphan< ::cereal::LivePose::FilterState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LivePose::FilterState>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LivePose::FilterState> LivePose::Builder::disownDebugFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LivePose::FilterState>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float LivePose::XYZMeasurement::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LivePose::XYZMeasurement::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LivePose::XYZMeasurement::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LivePose::XYZMeasurement::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LivePose::XYZMeasurement::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LivePose::XYZMeasurement::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LivePose::XYZMeasurement::Reader::getXStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LivePose::XYZMeasurement::Builder::getXStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setXStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LivePose::XYZMeasurement::Reader::getYStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LivePose::XYZMeasurement::Builder::getYStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setYStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LivePose::XYZMeasurement::Reader::getZStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LivePose::XYZMeasurement::Builder::getZStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setZStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::XYZMeasurement::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool LivePose::XYZMeasurement::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void LivePose::XYZMeasurement::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::FilterState::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::FilterState::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LivePose::FilterState::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LivePose::FilterState::Builder::setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LivePose::FilterState::Builder::setValue(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LivePose::FilterState::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LivePose::FilterState::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LivePose::FilterState::Reader::hasStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::FilterState::Builder::hasStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LivePose::FilterState::Reader::getStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Builder::getStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LivePose::FilterState::Builder::setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LivePose::FilterState::Builder::setStd(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Builder::initStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LivePose::FilterState::Builder::adoptStd(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LivePose::FilterState::Builder::disownStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LivePose::FilterState::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LivePose::FilterState::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LivePose::FilterState::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::FilterState::Reader::hasObservations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::FilterState::Builder::hasObservations() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Reader LivePose::FilterState::Reader::getObservations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Builder LivePose::FilterState::Builder::getObservations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LivePose::FilterState::Builder::setObservations( ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>::Builder LivePose::FilterState::Builder::initObservations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LivePose::FilterState::Builder::adoptObservations(
    ::capnp::Orphan< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>> LivePose::FilterState::Builder::disownObservations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LivePose::FilterState::Observation,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t LivePose::FilterState::Observation::Reader::getKind() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LivePose::FilterState::Observation::Builder::getKind() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LivePose::FilterState::Observation::Builder::setKind( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LivePose::FilterState::Observation::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::FilterState::Observation::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LivePose::FilterState::Observation::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Observation::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LivePose::FilterState::Observation::Builder::setValue( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LivePose::FilterState::Observation::Builder::setValue(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Observation::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LivePose::FilterState::Observation::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LivePose::FilterState::Observation::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LivePose::FilterState::Observation::Reader::hasError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LivePose::FilterState::Observation::Builder::hasError() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LivePose::FilterState::Observation::Reader::getError() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Observation::Builder::getError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LivePose::FilterState::Observation::Builder::setError( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LivePose::FilterState::Observation::Builder::setError(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LivePose::FilterState::Observation::Builder::initError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LivePose::FilterState::Observation::Builder::adoptError(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LivePose::FilterState::Observation::Builder::disownError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasCpuTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasCpuTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader ProcLog::Reader::getCpuTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::getCpuTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::setCpuTimes( ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::initCpuTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Builder::adoptCpuTimes(
    ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>> ProcLog::Builder::disownCpuTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasMem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasMem() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ProcLog::Mem::Reader ProcLog::Reader::getMem() const {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ProcLog::Mem::Builder ProcLog::Builder::getMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ProcLog::Mem::Pipeline ProcLog::Pipeline::getMem() {
  return  ::cereal::ProcLog::Mem::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ProcLog::Builder::setMem( ::cereal::ProcLog::Mem::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ProcLog::Mem::Builder ProcLog::Builder::initMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::adoptMem(
    ::capnp::Orphan< ::cereal::ProcLog::Mem>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ProcLog::Mem> ProcLog::Builder::disownMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasProcs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasProcs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader ProcLog::Reader::getProcs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::getProcs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::setProcs( ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>::Builder ProcLog::Builder::initProcs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Builder::adoptProcs(
    ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>> ProcLog::Builder::disownProcs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t ProcLog::Process::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ProcLog::Process::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcLog::Process::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcLog::Process::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t ProcLog::Process::Reader::getState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ProcLog::Process::Builder::getState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getPpid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getPpid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPpid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuChildrenUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuChildrenUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuChildrenUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuChildrenSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuChildrenSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuChildrenSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ProcLog::Process::Reader::getPriority() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ProcLog::Process::Builder::getPriority() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPriority( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getNice() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getNice() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setNice( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getNumThreads() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getNumThreads() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setNumThreads( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double ProcLog::Process::Reader::getStartTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double ProcLog::Process::Builder::getStartTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setStartTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Process::Reader::getMemVms() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Process::Builder::getMemVms() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setMemVms( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Process::Reader::getMemRss() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Process::Builder::getMemRss() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setMemRss( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getProcessor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getProcessor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setProcessor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ProcLog::Process::Reader::hasCmdline() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasCmdline() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ProcLog::Process::Reader::getCmdline() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ProcLog::Process::Builder::getCmdline() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setCmdline( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ProcLog::Process::Builder::setCmdline(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ProcLog::Process::Builder::initCmdline(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptCmdline(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ProcLog::Process::Builder::disownCmdline() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Process::Reader::hasExe() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasExe() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcLog::Process::Reader::getExe() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::getExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setExe( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::initExe(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptExe(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcLog::Process::Builder::disownExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int64_t ProcLog::CPUTimes::Reader::getCpuNum() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ProcLog::CPUTimes::Builder::getCpuNum() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setCpuNum( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getNice() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getNice() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setNice(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIdle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIdle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIdle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIowait() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIowait() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIowait(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIrq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIrq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIrq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getSoftirq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getSoftirq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setSoftirq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getFree() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getFree() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setFree( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getAvailable() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getAvailable() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setAvailable( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getBuffers() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getBuffers() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setBuffers( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getCached() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getCached() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setCached( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getActive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getActive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setActive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getInactive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getInactive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setInactive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getShared() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getShared() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setShared( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GnssMeasurements::Reader::getMeasTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GnssMeasurements::Builder::getMeasTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setMeasTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t GnssMeasurements::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t GnssMeasurements::Builder::getGpsWeek() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setGpsWeek( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::Reader::getGpsTimeOfWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::Builder::getGpsTimeOfWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setGpsTimeOfWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GnssMeasurements::Reader::hasCorrectedMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasCorrectedMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader GnssMeasurements::Reader::getCorrectedMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder GnssMeasurements::Builder::getCorrectedMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::setCorrectedMeasurements( ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>::Builder GnssMeasurements::Builder::initCorrectedMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::Builder::adoptCorrectedMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>> GnssMeasurements::Builder::disownCorrectedMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::CorrectedMeasurement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasKalmanPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasKalmanPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getKalmanPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getKalmanPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getKalmanPositionECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setKalmanPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initKalmanPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptKalmanPositionECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownKalmanPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasKalmanVelocityECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasKalmanVelocityECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getKalmanVelocityECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getKalmanVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getKalmanVelocityECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setKalmanVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initKalmanVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptKalmanVelocityECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownKalmanVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getPositionECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setPositionECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptPositionECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownPositionECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::Reader::hasVelocityECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasVelocityECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader GnssMeasurements::Reader::getVelocityECEF() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::getVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline GnssMeasurements::Pipeline::getVelocityECEF() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::Builder::setVelocityECEF( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder GnssMeasurements::Builder::initVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::adoptVelocityECEF(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> GnssMeasurements::Builder::disownVelocityECEF() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float GnssMeasurements::Reader::getTimeToFirstFix() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float GnssMeasurements::Builder::getTimeToFirstFix() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::Builder::setTimeToFirstFix(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool GnssMeasurements::Reader::hasEphemerisStatuses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::Builder::hasEphemerisStatuses() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Reader GnssMeasurements::Reader::getEphemerisStatuses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Builder GnssMeasurements::Builder::getEphemerisStatuses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::Builder::setEphemerisStatuses( ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>::Builder GnssMeasurements::Builder::initEphemerisStatuses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::Builder::adoptEphemerisStatuses(
    ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>> GnssMeasurements::Builder::disownEphemerisStatuses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::GnssMeasurements::EphemerisStatus,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::cereal::GnssMeasurements::ConstellationId GnssMeasurements::EphemerisStatus::Reader::getConstellationId() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::ConstellationId GnssMeasurements::EphemerisStatus::Builder::getConstellationId() {
  return _builder.getDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisStatus::Builder::setConstellationId( ::cereal::GnssMeasurements::ConstellationId value) {
  _builder.setDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t GnssMeasurements::EphemerisStatus::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t GnssMeasurements::EphemerisStatus::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisStatus::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::GnssMeasurements::EphemerisType GnssMeasurements::EphemerisStatus::Reader::getType() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::EphemerisType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::EphemerisType GnssMeasurements::EphemerisStatus::Builder::getType() {
  return _builder.getDataField< ::cereal::GnssMeasurements::EphemerisType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisStatus::Builder::setType( ::cereal::GnssMeasurements::EphemerisType value) {
  _builder.setDataField< ::cereal::GnssMeasurements::EphemerisType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::GnssMeasurements::EphemerisSource GnssMeasurements::EphemerisStatus::Reader::getSource() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::EphemerisSource>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::EphemerisSource GnssMeasurements::EphemerisStatus::Builder::getSource() {
  return _builder.getDataField< ::cereal::GnssMeasurements::EphemerisSource>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisStatus::Builder::setSource( ::cereal::GnssMeasurements::EphemerisSource value) {
  _builder.setDataField< ::cereal::GnssMeasurements::EphemerisSource>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t GnssMeasurements::EphemerisStatus::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t GnssMeasurements::EphemerisStatus::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisStatus::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::EphemerisStatus::Reader::getTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::EphemerisStatus::Builder::getTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisStatus::Builder::setTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::GnssMeasurements::ConstellationId GnssMeasurements::CorrectedMeasurement::Reader::getConstellationId() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::ConstellationId GnssMeasurements::CorrectedMeasurement::Builder::getConstellationId() {
  return _builder.getDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setConstellationId( ::cereal::GnssMeasurements::ConstellationId value) {
  _builder.setDataField< ::cereal::GnssMeasurements::ConstellationId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t GnssMeasurements::CorrectedMeasurement::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t GnssMeasurements::CorrectedMeasurement::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t GnssMeasurements::CorrectedMeasurement::Reader::getGlonassFrequency() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int8_t GnssMeasurements::CorrectedMeasurement::Builder::getGlonassFrequency() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setGlonassFrequency( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorange() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorange() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorange(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorangeStd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorangeStd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorangeStd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorangeRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorangeRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorangeRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double GnssMeasurements::CorrectedMeasurement::Reader::getPseudorangeRateStd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double GnssMeasurements::CorrectedMeasurement::Builder::getPseudorangeRateStd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setPseudorangeRateStd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool GnssMeasurements::CorrectedMeasurement::Reader::hasSatPos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::CorrectedMeasurement::Builder::hasSatPos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader GnssMeasurements::CorrectedMeasurement::Reader::getSatPos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::getSatPos() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatPos( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatPos(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::initSatPos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::adoptSatPos(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> GnssMeasurements::CorrectedMeasurement::Builder::disownSatPos() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::CorrectedMeasurement::Reader::hasSatVel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::CorrectedMeasurement::Builder::hasSatVel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader GnssMeasurements::CorrectedMeasurement::Reader::getSatVel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::getSatVel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatVel( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::setSatVel(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder GnssMeasurements::CorrectedMeasurement::Builder::initSatVel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::adoptSatVel(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> GnssMeasurements::CorrectedMeasurement::Builder::disownSatVel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GnssMeasurements::CorrectedMeasurement::Reader::hasEphemerisSourceDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GnssMeasurements::CorrectedMeasurement::Builder::hasEphemerisSourceDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Reader GnssMeasurements::CorrectedMeasurement::Reader::getEphemerisSourceDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Builder GnssMeasurements::CorrectedMeasurement::Builder::getEphemerisSourceDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Pipeline GnssMeasurements::CorrectedMeasurement::Pipeline::getEphemerisSourceDEPRECATED() {
  return  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GnssMeasurements::CorrectedMeasurement::Builder::setEphemerisSourceDEPRECATED( ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED::Builder GnssMeasurements::CorrectedMeasurement::Builder::initEphemerisSourceDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GnssMeasurements::CorrectedMeasurement::Builder::adoptEphemerisSourceDEPRECATED(
    ::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED> GnssMeasurements::CorrectedMeasurement::Builder::disownEphemerisSourceDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements::EphemerisSourceDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::GnssMeasurements::EphemerisType GnssMeasurements::EphemerisSourceDEPRECATED::Reader::getType() const {
  return _reader.getDataField< ::cereal::GnssMeasurements::EphemerisType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GnssMeasurements::EphemerisType GnssMeasurements::EphemerisSourceDEPRECATED::Builder::getType() {
  return _builder.getDataField< ::cereal::GnssMeasurements::EphemerisType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisSourceDEPRECATED::Builder::setType( ::cereal::GnssMeasurements::EphemerisType value) {
  _builder.setDataField< ::cereal::GnssMeasurements::EphemerisType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t GnssMeasurements::EphemerisSourceDEPRECATED::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t GnssMeasurements::EphemerisSourceDEPRECATED::Builder::getGpsWeek() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisSourceDEPRECATED::Builder::setGpsWeek( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t GnssMeasurements::EphemerisSourceDEPRECATED::Reader::getGpsTimeOfWeek() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t GnssMeasurements::EphemerisSourceDEPRECATED::Builder::getGpsTimeOfWeek() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GnssMeasurements::EphemerisSourceDEPRECATED::Builder::setGpsTimeOfWeek( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::Which UbloxGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::UbloxGnss::Which UbloxGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::Reader::isMeasurementReport() const {
  return which() == UbloxGnss::MEASUREMENT_REPORT;
}
inline bool UbloxGnss::Builder::isMeasurementReport() {
  return which() == UbloxGnss::MEASUREMENT_REPORT;
}
inline bool UbloxGnss::Reader::hasMeasurementReport() const {
  if (which() != UbloxGnss::MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasMeasurementReport() {
  if (which() != UbloxGnss::MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::Reader UbloxGnss::Reader::getMeasurementReport() const {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::Builder UbloxGnss::Builder::getMeasurementReport() {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setMeasurementReport( ::cereal::UbloxGnss::MeasurementReport::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::Builder UbloxGnss::Builder::initMeasurementReport() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptMeasurementReport(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport> UbloxGnss::Builder::disownMeasurementReport() {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isEphemeris() const {
  return which() == UbloxGnss::EPHEMERIS;
}
inline bool UbloxGnss::Builder::isEphemeris() {
  return which() == UbloxGnss::EPHEMERIS;
}
inline bool UbloxGnss::Reader::hasEphemeris() const {
  if (which() != UbloxGnss::EPHEMERIS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasEphemeris() {
  if (which() != UbloxGnss::EPHEMERIS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::Ephemeris::Reader UbloxGnss::Reader::getEphemeris() const {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::Ephemeris::Builder UbloxGnss::Builder::getEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setEphemeris( ::cereal::UbloxGnss::Ephemeris::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::Ephemeris::Builder UbloxGnss::Builder::initEphemeris() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptEphemeris(
    ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris> UbloxGnss::Builder::disownEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isIonoData() const {
  return which() == UbloxGnss::IONO_DATA;
}
inline bool UbloxGnss::Builder::isIonoData() {
  return which() == UbloxGnss::IONO_DATA;
}
inline bool UbloxGnss::Reader::hasIonoData() const {
  if (which() != UbloxGnss::IONO_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasIonoData() {
  if (which() != UbloxGnss::IONO_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::IonoData::Reader UbloxGnss::Reader::getIonoData() const {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::IonoData::Builder UbloxGnss::Builder::getIonoData() {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setIonoData( ::cereal::UbloxGnss::IonoData::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::IonoData::Builder UbloxGnss::Builder::initIonoData() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptIonoData(
    ::capnp::Orphan< ::cereal::UbloxGnss::IonoData>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::IonoData> UbloxGnss::Builder::disownIonoData() {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isHwStatus() const {
  return which() == UbloxGnss::HW_STATUS;
}
inline bool UbloxGnss::Builder::isHwStatus() {
  return which() == UbloxGnss::HW_STATUS;
}
inline bool UbloxGnss::Reader::hasHwStatus() const {
  if (which() != UbloxGnss::HW_STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasHwStatus() {
  if (which() != UbloxGnss::HW_STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::HwStatus::Reader UbloxGnss::Reader::getHwStatus() const {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::HwStatus::Builder UbloxGnss::Builder::getHwStatus() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setHwStatus( ::cereal::UbloxGnss::HwStatus::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::HwStatus::Builder UbloxGnss::Builder::initHwStatus() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptHwStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus> UbloxGnss::Builder::disownHwStatus() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isHwStatus2() const {
  return which() == UbloxGnss::HW_STATUS2;
}
inline bool UbloxGnss::Builder::isHwStatus2() {
  return which() == UbloxGnss::HW_STATUS2;
}
inline bool UbloxGnss::Reader::hasHwStatus2() const {
  if (which() != UbloxGnss::HW_STATUS2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasHwStatus2() {
  if (which() != UbloxGnss::HW_STATUS2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::HwStatus2::Reader UbloxGnss::Reader::getHwStatus2() const {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::HwStatus2::Builder UbloxGnss::Builder::getHwStatus2() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setHwStatus2( ::cereal::UbloxGnss::HwStatus2::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS2);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::HwStatus2::Builder UbloxGnss::Builder::initHwStatus2() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS2);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptHwStatus2(
    ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS2);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus2> UbloxGnss::Builder::disownHwStatus2() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus2>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isGlonassEphemeris() const {
  return which() == UbloxGnss::GLONASS_EPHEMERIS;
}
inline bool UbloxGnss::Builder::isGlonassEphemeris() {
  return which() == UbloxGnss::GLONASS_EPHEMERIS;
}
inline bool UbloxGnss::Reader::hasGlonassEphemeris() const {
  if (which() != UbloxGnss::GLONASS_EPHEMERIS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasGlonassEphemeris() {
  if (which() != UbloxGnss::GLONASS_EPHEMERIS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::GlonassEphemeris::Reader UbloxGnss::Reader::getGlonassEphemeris() const {
  KJ_IREQUIRE((which() == UbloxGnss::GLONASS_EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::GlonassEphemeris>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::GlonassEphemeris::Builder UbloxGnss::Builder::getGlonassEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::GLONASS_EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::GlonassEphemeris>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setGlonassEphemeris( ::cereal::UbloxGnss::GlonassEphemeris::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::GLONASS_EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::GlonassEphemeris>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::GlonassEphemeris::Builder UbloxGnss::Builder::initGlonassEphemeris() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::GLONASS_EPHEMERIS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::GlonassEphemeris>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptGlonassEphemeris(
    ::capnp::Orphan< ::cereal::UbloxGnss::GlonassEphemeris>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::GLONASS_EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::GlonassEphemeris>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::GlonassEphemeris> UbloxGnss::Builder::disownGlonassEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::GLONASS_EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::GlonassEphemeris>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isSatReport() const {
  return which() == UbloxGnss::SAT_REPORT;
}
inline bool UbloxGnss::Builder::isSatReport() {
  return which() == UbloxGnss::SAT_REPORT;
}
inline bool UbloxGnss::Reader::hasSatReport() const {
  if (which() != UbloxGnss::SAT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasSatReport() {
  if (which() != UbloxGnss::SAT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::SatReport::Reader UbloxGnss::Reader::getSatReport() const {
  KJ_IREQUIRE((which() == UbloxGnss::SAT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::SatReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::SatReport::Builder UbloxGnss::Builder::getSatReport() {
  KJ_IREQUIRE((which() == UbloxGnss::SAT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::SatReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setSatReport( ::cereal::UbloxGnss::SatReport::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::SAT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::SatReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::SatReport::Builder UbloxGnss::Builder::initSatReport() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::SAT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::SatReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptSatReport(
    ::capnp::Orphan< ::cereal::UbloxGnss::SatReport>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::SAT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::SatReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::SatReport> UbloxGnss::Builder::disownSatReport() {
  KJ_IREQUIRE((which() == UbloxGnss::SAT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::SatReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t UbloxGnss::SatReport::Reader::getITow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::SatReport::Builder::getITow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::Builder::setITow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::SatReport::Reader::hasSvs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::SatReport::Builder::hasSvs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Reader UbloxGnss::SatReport::Reader::getSvs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Builder UbloxGnss::SatReport::Builder::getSvs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::SatReport::Builder::setSvs( ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>::Builder UbloxGnss::SatReport::Builder::initSvs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::SatReport::Builder::adoptSvs(
    ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>> UbloxGnss::SatReport::Builder::disownSvs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::SatReport::SatInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t UbloxGnss::SatReport::SatInfo::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::SatReport::SatInfo::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::SatReport::SatInfo::Reader::getGnssId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::SatReport::SatInfo::Builder::getGnssId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setGnssId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::SatReport::SatInfo::Reader::getFlagsBitfield() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::SatReport::SatInfo::Builder::getFlagsBitfield() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setFlagsBitfield( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::SatReport::SatInfo::Reader::getCno() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::SatReport::SatInfo::Builder::getCno() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setCno( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t UbloxGnss::SatReport::SatInfo::Reader::getElevationDeg() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int8_t UbloxGnss::SatReport::SatInfo::Builder::getElevationDeg() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setElevationDeg( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t UbloxGnss::SatReport::SatInfo::Reader::getAzimuthDeg() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t UbloxGnss::SatReport::SatInfo::Builder::getAzimuthDeg() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setAzimuthDeg( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::SatReport::SatInfo::Reader::getPseudorangeResidual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::SatReport::SatInfo::Builder::getPseudorangeResidual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::SatReport::SatInfo::Builder::setPseudorangeResidual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::MeasurementReport::Reader::getRcvTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Builder::getRcvTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setRcvTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Reader::getLeapSeconds() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Builder::getLeapSeconds() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setLeapSeconds( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Reader::hasReceiverStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Builder::hasReceiverStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader UbloxGnss::MeasurementReport::Reader::getReceiverStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder UbloxGnss::MeasurementReport::Builder::getReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline UbloxGnss::MeasurementReport::Pipeline::getReceiverStatus() {
  return  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UbloxGnss::MeasurementReport::Builder::setReceiverStatus( ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder UbloxGnss::MeasurementReport::Builder::initReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Builder::adoptReceiverStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus> UbloxGnss::MeasurementReport::Builder::disownReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Reader::getNumMeas() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Builder::getNumMeas() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setNumMeas( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Reader::hasMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Builder::hasMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader UbloxGnss::MeasurementReport::Reader::getMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder UbloxGnss::MeasurementReport::Builder::getMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Builder::setMeasurements( ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>::Builder UbloxGnss::MeasurementReport::Builder::initMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::MeasurementReport::Builder::adoptMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>> UbloxGnss::MeasurementReport::Builder::disownMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Reader::getLeapSecValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Builder::getLeapSecValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::ReceiverStatus::Builder::setLeapSecValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Reader::getClkReset() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Builder::getClkReset() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::ReceiverStatus::Builder::setClkReset(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::Reader::hasTrackingStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Measurement::Builder::hasTrackingStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader UbloxGnss::MeasurementReport::Measurement::Reader::getTrackingStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder UbloxGnss::MeasurementReport::Measurement::Builder::getTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline UbloxGnss::MeasurementReport::Measurement::Pipeline::getTrackingStatus() {
  return  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setTrackingStatus( ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder UbloxGnss::MeasurementReport::Measurement::Builder::initTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::adoptTrackingStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus> UbloxGnss::MeasurementReport::Measurement::Builder::disownTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double UbloxGnss::MeasurementReport::Measurement::Reader::getPseudorange() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Measurement::Builder::getPseudorange() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setPseudorange(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::MeasurementReport::Measurement::Reader::getCarrierCycles() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Measurement::Builder::getCarrierCycles() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCarrierCycles(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getDoppler() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getDoppler() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setDoppler(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getGnssId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getGnssId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setGnssId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setGlonassFrequencyIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Measurement::Reader::getLocktime() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Measurement::Builder::getLocktime() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setLocktime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getCno() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getCno() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCno( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getPseudorangeStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getPseudorangeStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setPseudorangeStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getCarrierPhaseStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getCarrierPhaseStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCarrierPhaseStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getDopplerStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getDopplerStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setDopplerStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getSigId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getSigId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setSigId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getPseudorangeValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getPseudorangeValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setPseudorangeValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getCarrierPhaseValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getCarrierPhaseValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setCarrierPhaseValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getHalfCycleValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getHalfCycleValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setHalfCycleValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getHalfCycleSubtracted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getHalfCycleSubtracted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setHalfCycleSubtracted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getSvId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getSvId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getYear() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getYear() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setYear( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getMonth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getMonth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setMonth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getHour() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getHour() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setHour( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getMinute() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getMinute() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setMinute( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::Ephemeris::Reader::getSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::Ephemeris::Builder::getSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIode() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIode() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIode(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCrs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCrs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCrs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getDeltaN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getDeltaN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setDeltaN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getM0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getM0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setM0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCuc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCuc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCuc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getEcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getEcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setEcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCus() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCus() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCus(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getToe() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getToe() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToe(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCic() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCic() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCic(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmega0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmega0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmega0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCis() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCis() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCis(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getI0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getI0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setI0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCrc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCrc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCrc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmega() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmega() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmega(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmegaDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmegaDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmegaDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCodesL2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCodesL2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCodesL2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getGpsWeekDEPRECATED() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getGpsWeekDEPRECATED() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setGpsWeekDEPRECATED(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getL2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getL2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setL2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getSvAcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getSvAcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvAcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getSvHealth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getSvHealth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvHealth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getTgd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getTgd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTgd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIodc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIodc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIodc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getTransmissionTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getTransmissionTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTransmissionTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getFitInterval() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getFitInterval() {
  return _builder.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setFitInterval(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getToc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getToc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::Ephemeris::Reader::getIonoCoeffsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::Ephemeris::Builder::getIonoCoeffsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoCoeffsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::Ephemeris::Reader::hasIonoAlpha() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Ephemeris::Builder::hasIonoAlpha() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::Ephemeris::Reader::getIonoAlpha() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::getIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Ephemeris::Builder::setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoAlpha(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::initIonoAlpha(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::Ephemeris::Builder::adoptIonoAlpha(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::Ephemeris::Builder::disownIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Ephemeris::Reader::hasIonoBeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Ephemeris::Builder::hasIonoBeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::Ephemeris::Reader::getIonoBeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::getIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Ephemeris::Builder::setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoBeta(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::Ephemeris::Builder::initIonoBeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::Ephemeris::Builder::adoptIonoBeta(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::Ephemeris::Builder::disownIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t UbloxGnss::Ephemeris::Reader::getTowCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::Ephemeris::Builder::getTowCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTowCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getToeWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getToeWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToeWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getTocWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getTocWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTocWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::IonoData::Reader::getSvHealth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::IonoData::Builder::getSvHealth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setSvHealth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::IonoData::Reader::getTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::IonoData::Builder::getTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::IonoData::Reader::getGpsWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::IonoData::Builder::getGpsWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setGpsWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::IonoData::Reader::hasIonoAlpha() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::IonoData::Builder::hasIonoAlpha() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::IonoData::Reader::getIonoAlpha() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::getIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::IonoData::Builder::setIonoAlpha( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::IonoData::Builder::setIonoAlpha(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::initIonoAlpha(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::IonoData::Builder::adoptIonoAlpha(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::IonoData::Builder::disownIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::IonoData::Reader::hasIonoBeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::IonoData::Builder::hasIonoBeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader UbloxGnss::IonoData::Reader::getIonoBeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::getIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::IonoData::Builder::setIonoBeta( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::IonoData::Builder::setIonoBeta(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder UbloxGnss::IonoData::Builder::initIonoBeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::IonoData::Builder::adoptIonoBeta(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> UbloxGnss::IonoData::Builder::disownIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::IonoData::Reader::getHealthValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::IonoData::Builder::getHealthValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setHealthValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::IonoData::Reader::getIonoCoeffsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::IonoData::Builder::getIonoCoeffsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setIonoCoeffsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::HwStatus::Reader::getNoisePerMS() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::HwStatus::Builder::getNoisePerMS() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setNoisePerMS( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::HwStatus::Reader::getAgcCnt() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::HwStatus::Builder::getAgcCnt() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAgcCnt( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState UbloxGnss::HwStatus::Reader::getAStatus() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState UbloxGnss::HwStatus::Builder::getAStatus() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAStatus( ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus UbloxGnss::HwStatus::Reader::getAPower() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus UbloxGnss::HwStatus::Builder::getAPower() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAPower( ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus::Reader::getJamInd() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus::Builder::getJamInd() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setJamInd( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus::Reader::getFlags() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus::Builder::getFlags() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setFlags( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t UbloxGnss::HwStatus2::Reader::getOfsI() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t UbloxGnss::HwStatus2::Builder::getOfsI() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setOfsI( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Reader::getMagI() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Builder::getMagI() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setMagI( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t UbloxGnss::HwStatus2::Reader::getOfsQ() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int8_t UbloxGnss::HwStatus2::Builder::getOfsQ() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setOfsQ( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Reader::getMagQ() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus2::Builder::getMagQ() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setMagQ( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource UbloxGnss::HwStatus2::Reader::getCfgSource() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus2::ConfigSource>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus2::ConfigSource UbloxGnss::HwStatus2::Builder::getCfgSource() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus2::ConfigSource>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setCfgSource( ::cereal::UbloxGnss::HwStatus2::ConfigSource value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus2::ConfigSource>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Reader::getLowLevCfg() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Builder::getLowLevCfg() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setLowLevCfg( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Reader::getPostStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::HwStatus2::Builder::getPostStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus2::Builder::setPostStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getSvId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getSvId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setSvId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getYear() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getYear() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setYear( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getDayInYear() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getDayInYear() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setDayInYear( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getHour() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getHour() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setHour( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getMinute() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getMinute() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setMinute( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::GlonassEphemeris::Reader::getSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::GlonassEphemeris::Builder::getSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getXVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getXVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setXVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getXAccel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getXAccel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setXAccel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getYVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getYVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setYVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getYAccel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getYAccel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setYAccel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getZVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getZVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setZVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getZAccel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getZAccel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setZAccel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getSvType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getSvType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setSvType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::GlonassEphemeris::Reader::getSvURA() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::GlonassEphemeris::Builder::getSvURA() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setSvURA(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getAge() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getAge() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setAge( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getSvHealth() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getSvHealth() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setSvHealth( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getTkDEPRECATED() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getTkDEPRECATED() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setTkDEPRECATED( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getTb() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getTb() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setTb( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getTauN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getTauN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setTauN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getDeltaTauN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getDeltaTauN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setDeltaTauN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::GlonassEphemeris::Reader::getGammaN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::GlonassEphemeris::Builder::getGammaN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setGammaN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getP1() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getP1() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setP1( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getP2() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getP2() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setP2( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getP3() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getP3() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setP3( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getP4() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getP4() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setP4( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::GlonassEphemeris::Reader::getFreqNumDEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::GlonassEphemeris::Builder::getFreqNumDEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setFreqNumDEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Reader::getN4() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::GlonassEphemeris::Builder::getN4() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setN4( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Reader::getNt() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::GlonassEphemeris::Builder::getNt() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setNt( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t UbloxGnss::GlonassEphemeris::Reader::getFreqNum() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline  ::int16_t UbloxGnss::GlonassEphemeris::Builder::getFreqNum() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setFreqNum( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UbloxGnss::GlonassEphemeris::Reader::getTkSeconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::GlonassEphemeris::Builder::getTkSeconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::GlonassEphemeris::Builder::setTkSeconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::Which QcomGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::cereal::QcomGnss::Which QcomGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QcomGnss::Reader::getLogTs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QcomGnss::Builder::getLogTs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::Builder::setLogTs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::Reader::isMeasurementReport() const {
  return which() == QcomGnss::MEASUREMENT_REPORT;
}
inline bool QcomGnss::Builder::isMeasurementReport() {
  return which() == QcomGnss::MEASUREMENT_REPORT;
}
inline bool QcomGnss::Reader::hasMeasurementReport() const {
  if (which() != QcomGnss::MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasMeasurementReport() {
  if (which() != QcomGnss::MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::MeasurementReport::Reader QcomGnss::Reader::getMeasurementReport() const {
  KJ_IREQUIRE((which() == QcomGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::MeasurementReport::Builder QcomGnss::Builder::getMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setMeasurementReport( ::cereal::QcomGnss::MeasurementReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::MeasurementReport::Builder QcomGnss::Builder::initMeasurementReport() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptMeasurementReport(
    ::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport> QcomGnss::Builder::disownMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isClockReport() const {
  return which() == QcomGnss::CLOCK_REPORT;
}
inline bool QcomGnss::Builder::isClockReport() {
  return which() == QcomGnss::CLOCK_REPORT;
}
inline bool QcomGnss::Reader::hasClockReport() const {
  if (which() != QcomGnss::CLOCK_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasClockReport() {
  if (which() != QcomGnss::CLOCK_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::ClockReport::Reader QcomGnss::Reader::getClockReport() const {
  KJ_IREQUIRE((which() == QcomGnss::CLOCK_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::ClockReport::Builder QcomGnss::Builder::getClockReport() {
  KJ_IREQUIRE((which() == QcomGnss::CLOCK_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setClockReport( ::cereal::QcomGnss::ClockReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::CLOCK_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::ClockReport::Builder QcomGnss::Builder::initClockReport() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::CLOCK_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptClockReport(
    ::capnp::Orphan< ::cereal::QcomGnss::ClockReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::CLOCK_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::ClockReport> QcomGnss::Builder::disownClockReport() {
  KJ_IREQUIRE((which() == QcomGnss::CLOCK_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isDrMeasurementReport() const {
  return which() == QcomGnss::DR_MEASUREMENT_REPORT;
}
inline bool QcomGnss::Builder::isDrMeasurementReport() {
  return which() == QcomGnss::DR_MEASUREMENT_REPORT;
}
inline bool QcomGnss::Reader::hasDrMeasurementReport() const {
  if (which() != QcomGnss::DR_MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasDrMeasurementReport() {
  if (which() != QcomGnss::DR_MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::DrMeasurementReport::Reader QcomGnss::Reader::getDrMeasurementReport() const {
  KJ_IREQUIRE((which() == QcomGnss::DR_MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::DrMeasurementReport::Builder QcomGnss::Builder::getDrMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::DR_MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setDrMeasurementReport( ::cereal::QcomGnss::DrMeasurementReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::DrMeasurementReport::Builder QcomGnss::Builder::initDrMeasurementReport() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptDrMeasurementReport(
    ::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport> QcomGnss::Builder::disownDrMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::DR_MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isDrSvPoly() const {
  return which() == QcomGnss::DR_SV_POLY;
}
inline bool QcomGnss::Builder::isDrSvPoly() {
  return which() == QcomGnss::DR_SV_POLY;
}
inline bool QcomGnss::Reader::hasDrSvPoly() const {
  if (which() != QcomGnss::DR_SV_POLY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasDrSvPoly() {
  if (which() != QcomGnss::DR_SV_POLY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::DrSvPolyReport::Reader QcomGnss::Reader::getDrSvPoly() const {
  KJ_IREQUIRE((which() == QcomGnss::DR_SV_POLY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::DrSvPolyReport::Builder QcomGnss::Builder::getDrSvPoly() {
  KJ_IREQUIRE((which() == QcomGnss::DR_SV_POLY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setDrSvPoly( ::cereal::QcomGnss::DrSvPolyReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_SV_POLY);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::DrSvPolyReport::Builder QcomGnss::Builder::initDrSvPoly() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_SV_POLY);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptDrSvPoly(
    ::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_SV_POLY);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport> QcomGnss::Builder::disownDrSvPoly() {
  KJ_IREQUIRE((which() == QcomGnss::DR_SV_POLY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isRawLog() const {
  return which() == QcomGnss::RAW_LOG;
}
inline bool QcomGnss::Builder::isRawLog() {
  return which() == QcomGnss::RAW_LOG;
}
inline bool QcomGnss::Reader::hasRawLog() const {
  if (which() != QcomGnss::RAW_LOG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasRawLog() {
  if (which() != QcomGnss::RAW_LOG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader QcomGnss::Reader::getRawLog() const {
  KJ_IREQUIRE((which() == QcomGnss::RAW_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder QcomGnss::Builder::getRawLog() {
  KJ_IREQUIRE((which() == QcomGnss::RAW_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setRawLog( ::capnp::Data::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::RAW_LOG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder QcomGnss::Builder::initRawLog(unsigned int size) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::RAW_LOG);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::Builder::adoptRawLog(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::RAW_LOG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> QcomGnss::Builder::disownRawLog() {
  KJ_IREQUIRE((which() == QcomGnss::RAW_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::MeasurementStatus::Reader::getSubMillisecondIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSubMillisecondIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSubMillisecondIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getSubBitTimeIsKnown() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSubBitTimeIsKnown() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSubBitTimeIsKnown(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getSatelliteTimeIsKnown() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSatelliteTimeIsKnown() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSatelliteTimeIsKnown(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getBitEdgeConfirmedFromSignal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getBitEdgeConfirmedFromSignal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setBitEdgeConfirmedFromSignal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMeasuredVelocity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMeasuredVelocity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMeasuredVelocity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getFineOrCoarseVelocity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getFineOrCoarseVelocity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setFineOrCoarseVelocity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLockPointValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLockPointValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLockPointValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLockPointPositive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLockPointPositive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLockPointPositive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLastUpdateFromDifference() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLastUpdateFromDifference() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLastUpdateFromDifference(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLastUpdateFromVelocityDifference() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLastUpdateFromVelocityDifference() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLastUpdateFromVelocityDifference(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getStrongIndicationOfCrossCorelation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getStrongIndicationOfCrossCorelation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setStrongIndicationOfCrossCorelation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getTentativeMeasurement() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getTentativeMeasurement() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setTentativeMeasurement(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMeasurementNotUsable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMeasurementNotUsable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMeasurementNotUsable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getSirCheckIsNeeded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSirCheckIsNeeded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSirCheckIsNeeded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getProbationMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getProbationMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setProbationMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGlonassMeanderBitEdgeValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGlonassMeanderBitEdgeValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGlonassMeanderBitEdgeValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGlonassTimeMarkValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGlonassTimeMarkValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGlonassTimeMarkValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsRoundRobinRxDiversity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsRoundRobinRxDiversity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsRoundRobinRxDiversity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsRxDiversity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsRxDiversity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsRxDiversity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsLowBandwidthRxDiversityCombined() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsLowBandwidthRxDiversityCombined() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsLowBandwidthRxDiversityCombined(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsHighBandwidthNu4() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsHighBandwidthNu4() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsHighBandwidthNu4(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsHighBandwidthNu8() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsHighBandwidthNu8() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsHighBandwidthNu8(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsHighBandwidthUniform() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsHighBandwidthUniform() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsHighBandwidthUniform(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMultipathIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMultipathIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMultipathIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getImdJammingIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getImdJammingIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setImdJammingIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLteB13TxJammingIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLteB13TxJammingIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLteB13TxJammingIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getFreshMeasurementIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getFreshMeasurementIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setFreshMeasurementIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMultipathEstimateIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMultipathEstimateIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMultipathEstimateIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getDirectionIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getDirectionIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setDirectionIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::MeasurementReport::Reader::getSource() const {
  return _reader.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::MeasurementReport::Builder::getSource() {
  return _builder.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setSource( ::cereal::QcomGnss::MeasurementSource value) {
  _builder.setDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::Reader::getGlonassCycleNumber() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::Builder::getGlonassCycleNumber() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setGlonassCycleNumber( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Reader::getGlonassNumberOfDays() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Builder::getGlonassNumberOfDays() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setGlonassNumberOfDays( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Reader::getMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Builder::getMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getClockFrequencyBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getClockFrequencyBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setClockFrequencyBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getClockFrequencyUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getClockFrequencyUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setClockFrequencyUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementReport::Reader::hasSv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::MeasurementReport::Builder::hasSv() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader QcomGnss::MeasurementReport::Reader::getSv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder QcomGnss::MeasurementReport::Builder::getSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::MeasurementReport::Builder::setSv( ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder QcomGnss::MeasurementReport::Builder::initSv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::MeasurementReport::Builder::adoptSv(
    ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>> QcomGnss::MeasurementReport::Builder::disownSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t QcomGnss::MeasurementReport::SV::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t QcomGnss::MeasurementReport::SV::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGlonassFrequencyIndex( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::MeasurementReport::SV::Reader::getObservationState() const {
  return _reader.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::MeasurementReport::SV::Builder::getObservationState() {
  return _builder.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setObservationState( ::cereal::QcomGnss::SVObservationState value) {
  _builder.setDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getGoodObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getGoodObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGoodObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getGpsParityErrorCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getGpsParityErrorCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGpsParityErrorCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getGlonassHemmingErrorCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getGlonassHemmingErrorCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGlonassHemmingErrorCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getFilterStages() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getFilterStages() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setFilterStages( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getCarrierNoise() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getCarrierNoise() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCarrierNoise( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t QcomGnss::MeasurementReport::SV::Reader::getLatency() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t QcomGnss::MeasurementReport::SV::Builder::getLatency() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setLatency( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getPredetectInterval() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getPredetectInterval() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setPredetectInterval( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getPostdetections() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getPostdetections() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setPostdetections( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Reader::getUnfilteredMeasurementIntegral() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Builder::getUnfilteredMeasurementIntegral() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredMeasurementIntegral( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredMeasurementFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredMeasurementFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredMeasurementFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementReport::SV::Reader::hasMeasurementStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::MeasurementReport::SV::Builder::hasMeasurementStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::MeasurementStatus::Reader QcomGnss::MeasurementReport::SV::Reader::getMeasurementStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::MeasurementReport::SV::Builder::getMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline QcomGnss::MeasurementReport::SV::Pipeline::getMeasurementStatus() {
  return  ::cereal::QcomGnss::MeasurementStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void QcomGnss::MeasurementReport::SV::Builder::setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::MeasurementReport::SV::Builder::initMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::MeasurementReport::SV::Builder::adoptMeasurementStatus(
    ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> QcomGnss::MeasurementReport::SV::Builder::disownMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Reader::getMultipathEstimate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Builder::getMultipathEstimate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setMultipathEstimate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getAzimuth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getAzimuth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setAzimuth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getElevation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getElevation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setElevation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QcomGnss::MeasurementReport::SV::Reader::getCarrierPhaseCyclesIntegral() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int32_t QcomGnss::MeasurementReport::SV::Builder::getCarrierPhaseCyclesIntegral() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCarrierPhaseCyclesIntegral( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getCarrierPhaseCyclesFraction() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getCarrierPhaseCyclesFraction() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCarrierPhaseCyclesFraction( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getFineSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getFineSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setFineSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getFineSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getFineSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setFineSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getCycleSlipCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getCycleSlipCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCycleSlipCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasFCount() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasFCount() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasFCount(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGpsWeek() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGpsWeek() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGpsWeek(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGpsMilliseconds() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGpsMilliseconds() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGpsMilliseconds(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getGpsMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getGpsMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGlonassYear() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGlonassYear() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGlonassYear(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGlonassYear() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGlonassYear() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassYear( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGlonassDay() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGlonassDay() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGlonassDay(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getGlonassDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getGlonassDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGlonassMilliseconds() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGlonassMilliseconds() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGlonassMilliseconds(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getGlonassMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getGlonassMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGlonassTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGlonassTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGlonassClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGlonassClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGlonassClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGlonassClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getBdsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getBdsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getBdsMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getBdsMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getBdsClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getBdsClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getGalWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getGalWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getGalMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getGalMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGalClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGalClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getClockFrequencyBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getClockFrequencyBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setClockFrequencyBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getClockFrequencyUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getClockFrequencyUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setClockFrequencyUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getFrequencySource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getFrequencySource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setFrequencySource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsLeapSeconds() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsLeapSeconds() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsLeapSeconds( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsLeapSecondsUncertainty() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsLeapSecondsUncertainty() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsLeapSecondsUncertainty( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsLeapSecondsSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsLeapSecondsSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsLeapSecondsSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGlonassTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGlonassTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGlonassTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGlonassTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGlonassTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGlonassTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToBdsTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToBdsTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToBdsTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToBdsTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToBdsTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToBdsTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsToGloTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsToGloTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsToGloTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsToGloTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsToGloTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsToGloTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGalTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGalTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGalTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGalTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGalTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGalTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToGloTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToGloTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToGloTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToGloTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToGloTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToGloTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToBdsTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToBdsTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToBdsTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToBdsTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToBdsTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToBdsTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasRtcTime() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasRtcTime() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasRtcTime(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getSystemRtcTime() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getSystemRtcTime() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setSystemRtcTime( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getFCountOffset() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getFCountOffset() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setFCountOffset( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getLpmRtcCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getLpmRtcCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setLpmRtcCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getClockResets() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getClockResets() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setClockResets( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getReason() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getReason() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setReason( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getSeqNum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getSeqNum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSeqNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getSeqMax() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getSeqMax() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSeqMax( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Reader::getRfLoss() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Builder::getRfLoss() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setRfLoss( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::Reader::getSystemRtcValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrMeasurementReport::Builder::getSystemRtcValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSystemRtcValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getClockResets() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getClockResets() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setClockResets( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t QcomGnss::DrMeasurementReport::Reader::getSystemRtcTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QcomGnss::DrMeasurementReport::Builder::getSystemRtcTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSystemRtcTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGpsLeapSeconds() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGpsLeapSeconds() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsLeapSeconds( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGpsLeapSecondsUncertainty() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGpsLeapSecondsUncertainty() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsLeapSecondsUncertainty( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGpsToGlonassTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGpsToGlonassTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsToGlonassTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGpsToGlonassTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGpsToGlonassTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsToGlonassTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGpsMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGpsMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGpsTimeBiasMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGpsTimeBiasMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsTimeBiasMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGpsClockTimeUncertaintyMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGpsClockTimeUncertaintyMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsClockTimeUncertaintyMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGpsClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGpsClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGlonassClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGlonassClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGlonassYear() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGlonassYear() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassYear( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Reader::getGlonassDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Builder::getGlonassDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGlonassMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGlonassMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGlonassTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGlonassTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGlonassClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGlonassClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getClockFrequencyBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getClockFrequencyBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setClockFrequencyBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getClockFrequencyUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getClockFrequencyUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setClockFrequencyUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getFrequencySource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getFrequencySource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setFrequencySource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::DrMeasurementReport::Reader::getSource() const {
  return _reader.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::DrMeasurementReport::Builder::getSource() {
  return _builder.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSource( ::cereal::QcomGnss::MeasurementSource value) {
  _builder.setDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::Reader::hasSv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrMeasurementReport::Builder::hasSv() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader QcomGnss::DrMeasurementReport::Reader::getSv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder QcomGnss::DrMeasurementReport::Builder::getSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrMeasurementReport::Builder::setSv( ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>::Builder QcomGnss::DrMeasurementReport::Builder::initSv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrMeasurementReport::Builder::adoptSv(
    ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>> QcomGnss::DrMeasurementReport::Builder::disownSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t QcomGnss::DrMeasurementReport::SV::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t QcomGnss::DrMeasurementReport::SV::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setGlonassFrequencyIndex( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::DrMeasurementReport::SV::Reader::getObservationState() const {
  return _reader.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::DrMeasurementReport::SV::Builder::getObservationState() {
  return _builder.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setObservationState( ::cereal::QcomGnss::SVObservationState value) {
  _builder.setDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getGoodObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getGoodObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setGoodObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getFilterStages() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getFilterStages() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilterStages( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getPredetectInterval() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getPredetectInterval() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setPredetectInterval( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getCycleSlipCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getCycleSlipCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setCycleSlipCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getPostdetections() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getPostdetections() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setPostdetections( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::SV::Reader::hasMeasurementStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrMeasurementReport::SV::Builder::hasMeasurementStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::MeasurementStatus::Reader QcomGnss::DrMeasurementReport::SV::Reader::getMeasurementStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::DrMeasurementReport::SV::Builder::getMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline QcomGnss::DrMeasurementReport::SV::Pipeline::getMeasurementStatus() {
  return  ::cereal::QcomGnss::MeasurementStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void QcomGnss::DrMeasurementReport::SV::Builder::setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::DrMeasurementReport::SV::Builder::initMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::adoptMeasurementStatus(
    ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> QcomGnss::DrMeasurementReport::SV::Builder::disownMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getCarrierNoise() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getCarrierNoise() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setCarrierNoise( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getRfLoss() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getRfLoss() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setRfLoss( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t QcomGnss::DrMeasurementReport::SV::Reader::getLatency() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int16_t QcomGnss::DrMeasurementReport::SV::Builder::getLatency() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setLatency( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredMeasurementFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredMeasurementFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredMeasurementFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getFilteredMeasurementIntegral() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getFilteredMeasurementIntegral() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredMeasurementIntegral( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredMeasurementFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredMeasurementFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredMeasurementFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredMeasurementIntegral() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredMeasurementIntegral() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredMeasurementIntegral( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getMultipathEstimate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getMultipathEstimate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setMultipathEstimate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getAzimuth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getAzimuth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setAzimuth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getElevation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getElevation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setElevation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getDopplerAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getDopplerAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setDopplerAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFineSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFineSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFineSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFineSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFineSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFineSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double QcomGnss::DrMeasurementReport::SV::Reader::getCarrierPhase() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double QcomGnss::DrMeasurementReport::SV::Builder::getCarrierPhase() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setCarrierPhase(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getParityErrorCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getParityErrorCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setParityErrorCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::SV::Reader::getGoodParity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrMeasurementReport::SV::Builder::getGoodParity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setGoodParity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Reader::getSvId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Builder::getSvId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setSvId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t QcomGnss::DrSvPolyReport::Reader::getFrequencyIndex() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int8_t QcomGnss::DrSvPolyReport::Builder::getFrequencyIndex() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setFrequencyIndex( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasPosition() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasPosition() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasPosition(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasIono() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasIono() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasIono(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasTropo() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasTropo() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasTropo(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasElevation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasElevation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasElevation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getPolyFromXtra() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getPolyFromXtra() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setPolyFromXtra(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasSbasIono() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasSbasIono() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasSbasIono(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Reader::getIode() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Builder::getIode() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setIode( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double QcomGnss::DrSvPolyReport::Reader::getT0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double QcomGnss::DrSvPolyReport::Builder::getT0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setT0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasXyz0() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasXyz0() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader QcomGnss::DrSvPolyReport::Reader::getXyz0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::getXyz0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyz0( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyz0(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::initXyz0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptXyz0(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> QcomGnss::DrSvPolyReport::Builder::disownXyz0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasXyzN() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasXyzN() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader QcomGnss::DrSvPolyReport::Reader::getXyzN() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::getXyzN() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyzN( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyzN(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::initXyzN(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptXyzN(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> QcomGnss::DrSvPolyReport::Builder::disownXyzN() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasOther() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasOther() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader QcomGnss::DrSvPolyReport::Reader::getOther() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::getOther() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setOther( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setOther(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::initOther(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptOther(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> QcomGnss::DrSvPolyReport::Builder::disownOther() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float QcomGnss::DrSvPolyReport::Reader::getPositionUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getPositionUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setPositionUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getIonoDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getIonoDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setIonoDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getIonoDot() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getIonoDot() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setIonoDot(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getSbasIonoDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getSbasIonoDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setSbasIonoDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getSbasIonoDot() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getSbasIonoDot() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setSbasIonoDot(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getTropoDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getTropoDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setTropoDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getElevation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getElevation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setElevation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getElevationDot() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getElevationDot() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setElevationDot(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getElevationUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getElevationUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setElevationUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasVelocityCoeff() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasVelocityCoeff() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader QcomGnss::DrSvPolyReport::Reader::getVelocityCoeff() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::getVelocityCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setVelocityCoeff( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setVelocityCoeff(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder QcomGnss::DrSvPolyReport::Builder::initVelocityCoeff(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptVelocityCoeff(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> QcomGnss::DrSvPolyReport::Builder::disownVelocityCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double QcomGnss::DrSvPolyReport::Reader::getGpsTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double QcomGnss::DrSvPolyReport::Builder::getGpsTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setGpsTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getBootTimeNanosDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getBootTimeNanosDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setBootTimeNanosDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getMonotonicNanosDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getMonotonicNanosDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setMonotonicNanosDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getMonotonicRawNanosDEPRECATD() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getMonotonicRawNanosDEPRECATD() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setMonotonicRawNanosDEPRECATD( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getWallTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getWallTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setWallTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getModemUptimeMillisDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getModemUptimeMillisDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setModemUptimeMillisDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMpcData::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMpcData::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMpcData::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveMpcData::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMpcData::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMpcData::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveMpcData::Reader::hasPsi() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasPsi() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMpcData::Reader::getPsi() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::getPsi() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setPsi( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setPsi(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::initPsi(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptPsi(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMpcData::Builder::disownPsi() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveMpcData::Reader::hasCurvature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasCurvature() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMpcData::Reader::getCurvature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::getCurvature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setCurvature( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setCurvature(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMpcData::Builder::initCurvature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptCurvature(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMpcData::Builder::disownCurvature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t LiveMpcData::Reader::getQpIterations() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LiveMpcData::Builder::getQpIterations() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveMpcData::Builder::setQpIterations( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveMpcData::Reader::getCalculationTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveMpcData::Builder::getCalculationTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMpcData::Builder::setCalculationTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double LiveMpcData::Reader::getCost() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double LiveMpcData::Builder::getCost() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMpcData::Builder::setCost(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLongitudinalMpcData::Reader::hasXEgo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasXEgo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLongitudinalMpcData::Reader::getXEgo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::getXEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setXEgo( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setXEgo(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::initXEgo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptXEgo(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLongitudinalMpcData::Builder::disownXEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasVEgo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasVEgo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLongitudinalMpcData::Reader::getVEgo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::getVEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setVEgo( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setVEgo(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::initVEgo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptVEgo(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLongitudinalMpcData::Builder::disownVEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasAEgo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasAEgo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLongitudinalMpcData::Reader::getAEgo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::getAEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setAEgo( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setAEgo(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::initAEgo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptAEgo(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLongitudinalMpcData::Builder::disownAEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasXLead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasXLead() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLongitudinalMpcData::Reader::getXLead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::getXLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setXLead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setXLead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::initXLead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptXLead(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLongitudinalMpcData::Builder::disownXLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasVLead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasVLead() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLongitudinalMpcData::Reader::getVLead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::getVLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setVLead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setVLead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::initVLead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptVLead(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLongitudinalMpcData::Builder::disownVLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasALead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasALead() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveLongitudinalMpcData::Reader::getALead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::getALead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setALead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setALead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveLongitudinalMpcData::Builder::initALead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptALead(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveLongitudinalMpcData::Builder::disownALead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float LiveLongitudinalMpcData::Reader::getALeadTau() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LiveLongitudinalMpcData::Builder::getALeadTau() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setALeadTau(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LiveLongitudinalMpcData::Reader::getQpIterations() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LiveLongitudinalMpcData::Builder::getQpIterations() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setQpIterations( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LiveLongitudinalMpcData::Reader::getMpcId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LiveLongitudinalMpcData::Builder::getMpcId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setMpcId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveLongitudinalMpcData::Reader::getCalculationTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveLongitudinalMpcData::Builder::getCalculationTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setCalculationTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double LiveLongitudinalMpcData::Reader::getCost() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double LiveLongitudinalMpcData::Builder::getCost() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setCost(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Joystick::Reader::hasAxes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Joystick::Builder::hasAxes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Joystick::Reader::getAxes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::getAxes() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Joystick::Builder::setAxes( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Joystick::Builder::setAxes(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::initAxes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Joystick::Builder::adoptAxes(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Joystick::Builder::disownAxes() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Joystick::Reader::hasButtons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Joystick::Builder::hasButtons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Joystick::Reader::getButtons() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::getButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Joystick::Builder::setButtons( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Joystick::Builder::setButtons(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Joystick::Builder::initButtons(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Joystick::Builder::adoptButtons(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Joystick::Builder::disownButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t DriverStateV2::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverStateV2::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::Reader::getDspExecutionTimeDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::Builder::getDspExecutionTimeDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::Builder::setDspExecutionTimeDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateV2::Reader::hasRawPredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::Builder::hasRawPredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader DriverStateV2::Reader::getRawPredictions() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder DriverStateV2::Builder::getRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverStateV2::Builder::setRawPredictions( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder DriverStateV2::Builder::initRawPredictions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::Builder::adoptRawPredictions(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> DriverStateV2::Builder::disownRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DriverStateV2::Reader::getPoorVisionProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::Builder::getPoorVisionProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::Builder::setPoorVisionProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::Reader::getWheelOnRightProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::Builder::getWheelOnRightProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::Builder::setWheelOnRightProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateV2::Reader::hasLeftDriverData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::Builder::hasLeftDriverData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverStateV2::DriverData::Reader DriverStateV2::Reader::getLeftDriverData() const {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverStateV2::DriverData::Builder DriverStateV2::Builder::getLeftDriverData() {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DriverStateV2::DriverData::Pipeline DriverStateV2::Pipeline::getLeftDriverData() {
  return  ::cereal::DriverStateV2::DriverData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DriverStateV2::Builder::setLeftDriverData( ::cereal::DriverStateV2::DriverData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverStateV2::DriverData::Builder DriverStateV2::Builder::initLeftDriverData() {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverStateV2::Builder::adoptLeftDriverData(
    ::capnp::Orphan< ::cereal::DriverStateV2::DriverData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverStateV2::DriverData> DriverStateV2::Builder::disownLeftDriverData() {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverStateV2::Reader::hasRightDriverData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::Builder::hasRightDriverData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverStateV2::DriverData::Reader DriverStateV2::Reader::getRightDriverData() const {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverStateV2::DriverData::Builder DriverStateV2::Builder::getRightDriverData() {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::DriverStateV2::DriverData::Pipeline DriverStateV2::Pipeline::getRightDriverData() {
  return  ::cereal::DriverStateV2::DriverData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void DriverStateV2::Builder::setRightDriverData( ::cereal::DriverStateV2::DriverData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverStateV2::DriverData::Builder DriverStateV2::Builder::initRightDriverData() {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DriverStateV2::Builder::adoptRightDriverData(
    ::capnp::Orphan< ::cereal::DriverStateV2::DriverData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverStateV2::DriverData> DriverStateV2::Builder::disownRightDriverData() {
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2::DriverData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DriverStateV2::Reader::getGpuExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::Builder::getGpuExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::Builder::setGpuExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateV2::DriverData::Reader::hasFaceOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::DriverData::Builder::hasFaceOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateV2::DriverData::Reader::getFaceOrientation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::getFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverStateV2::DriverData::Builder::setFaceOrientation( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DriverStateV2::DriverData::Builder::setFaceOrientation(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::initFaceOrientation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::DriverData::Builder::adoptFaceOrientation(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateV2::DriverData::Builder::disownFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DriverStateV2::DriverData::Reader::hasFaceOrientationStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::DriverData::Builder::hasFaceOrientationStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateV2::DriverData::Reader::getFaceOrientationStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::getFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverStateV2::DriverData::Builder::setFaceOrientationStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DriverStateV2::DriverData::Builder::setFaceOrientationStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::initFaceOrientationStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::DriverData::Builder::adoptFaceOrientationStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateV2::DriverData::Builder::disownFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverStateV2::DriverData::Reader::hasFacePosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::DriverData::Builder::hasFacePosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateV2::DriverData::Reader::getFacePosition() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::getFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DriverStateV2::DriverData::Builder::setFacePosition( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DriverStateV2::DriverData::Builder::setFacePosition(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::initFacePosition(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::DriverData::Builder::adoptFacePosition(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateV2::DriverData::Builder::disownFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DriverStateV2::DriverData::Reader::hasFacePositionStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::DriverData::Builder::hasFacePositionStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateV2::DriverData::Reader::getFacePositionStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::getFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DriverStateV2::DriverData::Builder::setFacePositionStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DriverStateV2::DriverData::Builder::setFacePositionStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::initFacePositionStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::DriverData::Builder::adoptFacePositionStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateV2::DriverData::Builder::disownFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float DriverStateV2::DriverData::Reader::getFaceProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getFaceProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setFaceProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::DriverData::Reader::getLeftEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getLeftEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setLeftEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::DriverData::Reader::getRightEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getRightEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setRightEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::DriverData::Reader::getLeftBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getLeftBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setLeftBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::DriverData::Reader::getRightBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getRightBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setRightBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::DriverData::Reader::getSunglassesProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getSunglassesProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setSunglassesProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateV2::DriverData::Reader::getOccludedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DriverStateV2::DriverData::Builder::getOccludedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverStateV2::DriverData::Builder::setOccludedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateV2::DriverData::Reader::hasReadyProb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::DriverData::Builder::hasReadyProb() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateV2::DriverData::Reader::getReadyProb() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::getReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DriverStateV2::DriverData::Builder::setReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DriverStateV2::DriverData::Builder::setReadyProb(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::initReadyProb(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::DriverData::Builder::adoptReadyProb(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateV2::DriverData::Builder::disownReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool DriverStateV2::DriverData::Reader::hasNotReadyProb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateV2::DriverData::Builder::hasNotReadyProb() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateV2::DriverData::Reader::getNotReadyProb() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::getNotReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DriverStateV2::DriverData::Builder::setNotReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void DriverStateV2::DriverData::Builder::setNotReadyProb(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateV2::DriverData::Builder::initNotReadyProb(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DriverStateV2::DriverData::Builder::adoptNotReadyProb(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateV2::DriverData::Builder::disownNotReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint32_t DriverStateDEPRECATED::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverStateDEPRECATED::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateDEPRECATED::Reader::hasDescriptorDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasDescriptorDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getDescriptorDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getDescriptorDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setDescriptorDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setDescriptorDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initDescriptorDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptDescriptorDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownDescriptorDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DriverStateDEPRECATED::Reader::getStdDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getStdDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setStdDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateDEPRECATED::Reader::hasFaceOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasFaceOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getFaceOrientation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setFaceOrientation( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setFaceOrientation(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initFaceOrientation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptFaceOrientation(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverStateDEPRECATED::Reader::hasFacePosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasFacePosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getFacePosition() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setFacePosition( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setFacePosition(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initFacePosition(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptFacePosition(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DriverStateDEPRECATED::Reader::getFaceProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getFaceProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setFaceProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getLeftEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getLeftEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setLeftEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getRightEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getRightEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setRightEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getLeftBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getLeftBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setLeftBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getRightBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getRightBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setRightBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getIrPwrDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getIrPwrDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setIrPwrDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateDEPRECATED::Reader::hasFaceOrientationStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasFaceOrientationStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getFaceOrientationStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setFaceOrientationStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setFaceOrientationStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initFaceOrientationStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptFaceOrientationStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DriverStateDEPRECATED::Reader::hasFacePositionStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasFacePositionStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getFacePositionStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setFacePositionStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setFacePositionStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initFacePositionStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptFacePositionStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float DriverStateDEPRECATED::Reader::getSunglassesProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getSunglassesProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setSunglassesProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateDEPRECATED::Reader::hasRawPredictions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasRawPredictions() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader DriverStateDEPRECATED::Reader::getRawPredictions() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder DriverStateDEPRECATED::Builder::getRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setRawPredictions( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder DriverStateDEPRECATED::Builder::initRawPredictions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptRawPredictions(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> DriverStateDEPRECATED::Builder::disownRawPredictions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float DriverStateDEPRECATED::Reader::getDspExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getDspExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setDspExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getPoorVision() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getPoorVision() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setPoorVision(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getPartialFace() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getPartialFace() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setPartialFace(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getDistractedPose() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getDistractedPose() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setDistractedPose(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getDistractedEyes() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getDistractedEyes() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setDistractedEyes(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getEyesOnRoad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getEyesOnRoad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setEyesOnRoad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getPhoneUse() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getPhoneUse() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setPhoneUse(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float DriverStateDEPRECATED::Reader::getOccludedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float DriverStateDEPRECATED::Builder::getOccludedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void DriverStateDEPRECATED::Builder::setOccludedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool DriverStateDEPRECATED::Reader::hasReadyProb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasReadyProb() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getReadyProb() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setReadyProb(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initReadyProb(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptReadyProb(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DriverStateDEPRECATED::Reader::hasNotReadyProb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool DriverStateDEPRECATED::Builder::hasNotReadyProb() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader DriverStateDEPRECATED::Reader::getNotReadyProb() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::getNotReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DriverStateDEPRECATED::Builder::setNotReadyProb( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void DriverStateDEPRECATED::Builder::setNotReadyProb(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder DriverStateDEPRECATED::Builder::initNotReadyProb(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void DriverStateDEPRECATED::Builder::adoptNotReadyProb(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> DriverStateDEPRECATED::Builder::disownNotReadyProb() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool DriverMonitoringState::Reader::hasEventsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverMonitoringState::Builder::hasEventsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader DriverMonitoringState::Reader::getEventsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder DriverMonitoringState::Builder::getEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverMonitoringState::Builder::setEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder DriverMonitoringState::Builder::initEventsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverMonitoringState::Builder::adoptEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> DriverMonitoringState::Builder::disownEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DriverMonitoringState::Reader::getFaceDetected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getFaceDetected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setFaceDetected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsDistracted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsDistracted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsDistracted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsRHD() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsRHD() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsRHD(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getRhdCheckedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getRhdCheckedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setRhdCheckedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getPosePitchOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getPosePitchOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPosePitchOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getPosePitchValidCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getPosePitchValidCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPosePitchValidCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getPoseYawOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getPoseYawOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPoseYawOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getPoseYawValidCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getPoseYawValidCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setPoseYawValidCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getStepChange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getStepChange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setStepChange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getAwarenessActive() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getAwarenessActive() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setAwarenessActive(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringState::Reader::getAwarenessPassive() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringState::Builder::getAwarenessPassive() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setAwarenessPassive(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsLowStd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsLowStd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsLowStd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getHiStdCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getHiStdCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setHiStdCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsPreviewDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsPreviewDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsPreviewDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::getIsActiveMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool DriverMonitoringState::Builder::getIsActiveMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setIsActiveMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DriverMonitoringState::Reader::getDistractedType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverMonitoringState::Builder::getDistractedType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringState::Builder::setDistractedType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DriverMonitoringState::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverMonitoringState::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader DriverMonitoringState::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder DriverMonitoringState::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverMonitoringState::Builder::setEvents( ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder DriverMonitoringState::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DriverMonitoringState::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>> DriverMonitoringState::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Boot::Reader::getWallTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Boot::Builder::getWallTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Boot::Builder::setWallTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Boot::Reader::hasLastKmsgDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasLastKmsgDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Boot::Reader::getLastKmsgDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Boot::Builder::getLastKmsgDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Boot::Builder::setLastKmsgDEPRECATED( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Boot::Builder::initLastKmsgDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Boot::Builder::adoptLastKmsgDEPRECATED(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Boot::Builder::disownLastKmsgDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Boot::Reader::hasLastPmsgDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasLastPmsgDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Boot::Reader::getLastPmsgDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Boot::Builder::getLastPmsgDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Boot::Builder::setLastPmsgDEPRECATED( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Boot::Builder::initLastPmsgDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Boot::Builder::adoptLastPmsgDEPRECATED(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Boot::Builder::disownLastPmsgDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Boot::Reader::hasLaunchLog() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasLaunchLog() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Boot::Reader::getLaunchLog() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Boot::Builder::getLaunchLog() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Boot::Builder::setLaunchLog( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Boot::Builder::initLaunchLog(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Boot::Builder::adoptLaunchLog(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Boot::Builder::disownLaunchLog() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Boot::Reader::hasPstore() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasPstore() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader Boot::Reader::getPstore() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder Boot::Builder::getPstore() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline Boot::Pipeline::getPstore() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Boot::Builder::setPstore( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder Boot::Builder::initPstore() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Boot::Builder::adoptPstore(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> Boot::Builder::disownPstore() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Boot::Reader::hasCommands() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasCommands() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader Boot::Reader::getCommands() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder Boot::Builder::getCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline Boot::Pipeline::getCommands() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Boot::Builder::setCommands( ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Data>::Builder Boot::Builder::initCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Boot::Builder::adoptCommands(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Data>> Boot::Builder::disownCommands() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Data>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveParametersData::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getGyroBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getGyroBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setGyroBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetAverageDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetAverageDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetAverageDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getStiffnessFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getStiffnessFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setStiffnessFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getSteerRatio() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getSteerRatio() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSteerRatio(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getSensorValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getSensorValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSensorValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getYawRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getYawRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setYawRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getPosenetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getPosenetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setPosenetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getPosenetValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getPosenetValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setPosenetValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetFastStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetFastStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetFastStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetAverageStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetAverageStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetAverageStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getStiffnessFactorStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getStiffnessFactorStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setStiffnessFactorStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getSteerRatioStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getSteerRatioStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSteerRatioStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getRoll() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getRoll() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setRoll(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::hasFilterStateDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveParametersData::Builder::hasFilterStateDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Measurement::Reader LiveParametersData::Reader::getFilterStateDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveParametersData::Builder::getFilterStateDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationKalman::Measurement::Pipeline LiveParametersData::Pipeline::getFilterStateDEPRECATED() {
  return  ::cereal::LiveLocationKalman::Measurement::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LiveParametersData::Builder::setFilterStateDEPRECATED( ::cereal::LiveLocationKalman::Measurement::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Measurement::Builder LiveParametersData::Builder::initFilterStateDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveParametersData::Builder::adoptFilterStateDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman::Measurement> LiveParametersData::Builder::disownFilterStateDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman::Measurement>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveParametersData::Reader::hasDebugFilterState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveParametersData::Builder::hasDebugFilterState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveParametersData::FilterState::Reader LiveParametersData::Reader::getDebugFilterState() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData::FilterState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveParametersData::FilterState::Builder LiveParametersData::Builder::getDebugFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData::FilterState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveParametersData::FilterState::Pipeline LiveParametersData::Pipeline::getDebugFilterState() {
  return  ::cereal::LiveParametersData::FilterState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LiveParametersData::Builder::setDebugFilterState( ::cereal::LiveParametersData::FilterState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData::FilterState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveParametersData::FilterState::Builder LiveParametersData::Builder::initDebugFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData::FilterState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveParametersData::Builder::adoptDebugFilterState(
    ::capnp::Orphan< ::cereal::LiveParametersData::FilterState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData::FilterState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveParametersData::FilterState> LiveParametersData::Builder::disownDebugFilterState() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData::FilterState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveParametersData::Reader::getAngleOffsetValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, true);
}

inline bool LiveParametersData::Builder::getAngleOffsetValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, true);
}
inline void LiveParametersData::Builder::setAngleOffsetValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveParametersData::Reader::getAngleOffsetAverageValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, true);
}

inline bool LiveParametersData::Builder::getAngleOffsetAverageValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, true);
}
inline void LiveParametersData::Builder::setAngleOffsetAverageValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveParametersData::Reader::getSteerRatioValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, true);
}

inline bool LiveParametersData::Builder::getSteerRatioValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, true);
}
inline void LiveParametersData::Builder::setSteerRatioValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveParametersData::Reader::getStiffnessFactorValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, true);
}

inline bool LiveParametersData::Builder::getStiffnessFactorValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, true);
}
inline void LiveParametersData::Builder::setStiffnessFactorValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, true);
}

inline bool LiveParametersData::FilterState::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveParametersData::FilterState::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveParametersData::FilterState::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveParametersData::FilterState::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveParametersData::FilterState::Builder::setValue( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveParametersData::FilterState::Builder::setValue(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveParametersData::FilterState::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveParametersData::FilterState::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveParametersData::FilterState::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveParametersData::FilterState::Reader::hasStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveParametersData::FilterState::Builder::hasStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader LiveParametersData::FilterState::Reader::getStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveParametersData::FilterState::Builder::getStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveParametersData::FilterState::Builder::setStd( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveParametersData::FilterState::Builder::setStd(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder LiveParametersData::FilterState::Builder::initStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveParametersData::FilterState::Builder::adoptStd(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> LiveParametersData::FilterState::Builder::disownStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveTorqueParametersData::Reader::getLiveValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveTorqueParametersData::Builder::getLiveValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLiveValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelFactorRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelFactorRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelFactorRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelOffsetRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelOffsetRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelOffsetRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getFrictionCoefficientRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getFrictionCoefficientRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setFrictionCoefficientRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelFactorFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelFactorFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelFactorFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getLatAccelOffsetFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getLatAccelOffsetFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setLatAccelOffsetFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getFrictionCoefficientFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getFrictionCoefficientFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setFrictionCoefficientFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getTotalBucketPoints() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getTotalBucketPoints() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setTotalBucketPoints(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getDecay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getDecay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setDecay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LiveTorqueParametersData::Reader::getMaxResets() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LiveTorqueParametersData::Builder::getMaxResets() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setMaxResets(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTorqueParametersData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveTorqueParametersData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader LiveTorqueParametersData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder LiveTorqueParametersData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveTorqueParametersData::Builder::setPoints( ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveTorqueParametersData::Builder::setPoints(::kj::ArrayPtr<const  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder LiveTorqueParametersData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveTorqueParametersData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> LiveTorqueParametersData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveTorqueParametersData::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveTorqueParametersData::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTorqueParametersData::Reader::getUseParams() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveTorqueParametersData::Builder::getUseParams() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setUseParams(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LiveTorqueParametersData::Reader::getCalPerc() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveTorqueParametersData::Builder::getCalPerc() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTorqueParametersData::Builder::setCalPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveDelayData::Reader::getLateralDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LiveDelayData::Builder::getLateralDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveDelayData::Builder::setLateralDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveDelayData::Reader::getValidBlocks() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveDelayData::Builder::getValidBlocks() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveDelayData::Builder::setValidBlocks( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LiveDelayData::Status LiveDelayData::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::LiveDelayData::Status>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveDelayData::Status LiveDelayData::Builder::getStatus() {
  return _builder.getDataField< ::cereal::LiveDelayData::Status>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveDelayData::Builder::setStatus( ::cereal::LiveDelayData::Status value) {
  _builder.setDataField< ::cereal::LiveDelayData::Status>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveDelayData::Reader::getLateralDelayEstimate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveDelayData::Builder::getLateralDelayEstimate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveDelayData::Builder::setLateralDelayEstimate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveDelayData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveDelayData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveDelayData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveDelayData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveDelayData::Builder::setPoints( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveDelayData::Builder::setPoints(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveDelayData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveDelayData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveDelayData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float LiveDelayData::Reader::getLateralDelayEstimateStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveDelayData::Builder::getLateralDelayEstimateStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveDelayData::Builder::setLateralDelayEstimateStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LiveDelayData::Reader::getCalPerc() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveDelayData::Builder::getCalPerc() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveDelayData::Builder::setCalPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataDEPRECATED::Reader::getSpeedLimitValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataDEPRECATED::Builder::getSpeedLimitValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedLimitValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataDEPRECATED::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataDEPRECATED::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataDEPRECATED::Reader::getCurvatureValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataDEPRECATED::Builder::getCurvatureValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setCurvatureValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataDEPRECATED::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataDEPRECATED::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveMapDataDEPRECATED::Reader::getWayId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveMapDataDEPRECATED::Builder::getWayId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setWayId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataDEPRECATED::Reader::hasRoadX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataDEPRECATED::Builder::hasRoadX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataDEPRECATED::Reader::getRoadX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::getRoadX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveMapDataDEPRECATED::Builder::setRoadX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataDEPRECATED::Builder::setRoadX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::initRoadX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataDEPRECATED::Builder::adoptRoadX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMapDataDEPRECATED::Builder::disownRoadX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveMapDataDEPRECATED::Reader::hasRoadY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataDEPRECATED::Builder::hasRoadY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataDEPRECATED::Reader::getRoadY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::getRoadY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveMapDataDEPRECATED::Builder::setRoadY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataDEPRECATED::Builder::setRoadY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::initRoadY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataDEPRECATED::Builder::adoptRoadY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMapDataDEPRECATED::Builder::disownRoadY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveMapDataDEPRECATED::Reader::hasLastGps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataDEPRECATED::Builder::hasLastGps() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader LiveMapDataDEPRECATED::Reader::getLastGps() const {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder LiveMapDataDEPRECATED::Builder::getLastGps() {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::GpsLocationData::Pipeline LiveMapDataDEPRECATED::Pipeline::getLastGps() {
  return  ::cereal::GpsLocationData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LiveMapDataDEPRECATED::Builder::setLastGps( ::cereal::GpsLocationData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder LiveMapDataDEPRECATED::Builder::initLastGps() {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveMapDataDEPRECATED::Builder::adoptLastGps(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> LiveMapDataDEPRECATED::Builder::disownLastGps() {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveMapDataDEPRECATED::Reader::hasRoadCurvatureX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataDEPRECATED::Builder::hasRoadCurvatureX() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataDEPRECATED::Reader::getRoadCurvatureX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::getRoadCurvatureX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveMapDataDEPRECATED::Builder::setRoadCurvatureX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataDEPRECATED::Builder::setRoadCurvatureX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::initRoadCurvatureX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataDEPRECATED::Builder::adoptRoadCurvatureX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMapDataDEPRECATED::Builder::disownRoadCurvatureX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveMapDataDEPRECATED::Reader::hasRoadCurvature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataDEPRECATED::Builder::hasRoadCurvature() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataDEPRECATED::Reader::getRoadCurvature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::getRoadCurvature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveMapDataDEPRECATED::Builder::setRoadCurvature( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataDEPRECATED::Builder::setRoadCurvature(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataDEPRECATED::Builder::initRoadCurvature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataDEPRECATED::Builder::adoptRoadCurvature(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMapDataDEPRECATED::Builder::disownRoadCurvature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float LiveMapDataDEPRECATED::Reader::getDistToTurn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataDEPRECATED::Builder::getDistToTurn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setDistToTurn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataDEPRECATED::Reader::getMapValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataDEPRECATED::Builder::getMapValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setMapValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataDEPRECATED::Reader::getSpeedAdvisoryValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataDEPRECATED::Builder::getSpeedAdvisoryValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedAdvisoryValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataDEPRECATED::Reader::getSpeedAdvisory() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataDEPRECATED::Builder::getSpeedAdvisory() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedAdvisory(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataDEPRECATED::Reader::getSpeedLimitAheadValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataDEPRECATED::Builder::getSpeedLimitAheadValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedLimitAheadValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataDEPRECATED::Reader::getSpeedLimitAhead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataDEPRECATED::Builder::getSpeedLimitAhead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedLimitAhead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataDEPRECATED::Reader::getSpeedLimitAheadDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataDEPRECATED::Builder::getSpeedLimitAheadDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataDEPRECATED::Builder::setSpeedLimitAheadDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CameraOdometry::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRot( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRotStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t CameraOdometry::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraOdometry::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraOdometry::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CameraOdometry::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CameraOdometry::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraOdometry::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CameraOdometry::Reader::hasWideFromDeviceEuler() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasWideFromDeviceEuler() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getWideFromDeviceEuler() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setWideFromDeviceEuler( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setWideFromDeviceEuler(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initWideFromDeviceEuler(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptWideFromDeviceEuler(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownWideFromDeviceEuler() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasWideFromDeviceEulerStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasWideFromDeviceEulerStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getWideFromDeviceEulerStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getWideFromDeviceEulerStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setWideFromDeviceEulerStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setWideFromDeviceEulerStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initWideFromDeviceEulerStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptWideFromDeviceEulerStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownWideFromDeviceEulerStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRoadTransformTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRoadTransformTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getRoadTransformTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getRoadTransformTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRoadTransformTrans( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRoadTransformTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initRoadTransformTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRoadTransformTrans(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownRoadTransformTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRoadTransformTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRoadTransformTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CameraOdometry::Reader::getRoadTransformTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::getRoadTransformTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRoadTransformTransStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRoadTransformTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CameraOdometry::Builder::initRoadTransformTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRoadTransformTransStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CameraOdometry::Builder::disownRoadTransformTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::cereal::Sentinel::SentinelType Sentinel::Reader::getType() const {
  return _reader.getDataField< ::cereal::Sentinel::SentinelType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::Sentinel::SentinelType Sentinel::Builder::getType() {
  return _builder.getDataField< ::cereal::Sentinel::SentinelType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Sentinel::Builder::setType( ::cereal::Sentinel::SentinelType value) {
  _builder.setDataField< ::cereal::Sentinel::SentinelType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Sentinel::Reader::getSignal() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Sentinel::Builder::getSignal() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Sentinel::Builder::setSignal( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float UIDebug::Reader::getDrawTimeMillis() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float UIDebug::Builder::getDrawTimeMillis() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UIDebug::Builder::setDrawTimeMillis(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ManagerState::Reader::hasProcesses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ManagerState::Builder::hasProcesses() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader ManagerState::Reader::getProcesses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder ManagerState::Builder::getProcesses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ManagerState::Builder::setProcesses( ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>::Builder ManagerState::Builder::initProcesses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ManagerState::Builder::adoptProcesses(
    ::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>> ManagerState::Builder::disownProcesses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ManagerState::ProcessState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ManagerState::ProcessState::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ManagerState::ProcessState::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ManagerState::ProcessState::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ManagerState::ProcessState::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ManagerState::ProcessState::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ManagerState::ProcessState::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ManagerState::ProcessState::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ManagerState::ProcessState::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t ManagerState::ProcessState::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ManagerState::ProcessState::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ManagerState::ProcessState::Reader::getRunning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool ManagerState::ProcessState::Builder::getRunning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setRunning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ManagerState::ProcessState::Reader::getExitCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ManagerState::ProcessState::Builder::getExitCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setExitCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ManagerState::ProcessState::Reader::getShouldBeRunning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool ManagerState::ProcessState::Builder::getShouldBeRunning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void ManagerState::ProcessState::Builder::setShouldBeRunning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getImmediateQueueSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getImmediateQueueSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setImmediateQueueSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getImmediateQueueCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getImmediateQueueCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setImmediateQueueCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getRawQueueSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getRawQueueSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setRawQueueSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UploaderState::Reader::getRawQueueCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UploaderState::Builder::getRawQueueCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setRawQueueCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float UploaderState::Reader::getLastTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float UploaderState::Builder::getLastTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setLastTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float UploaderState::Reader::getLastSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float UploaderState::Builder::getLastSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UploaderState::Builder::setLastSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool UploaderState::Reader::hasLastFilename() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UploaderState::Builder::hasLastFilename() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UploaderState::Reader::getLastFilename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UploaderState::Builder::getLastFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UploaderState::Builder::setLastFilename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UploaderState::Builder::initLastFilename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UploaderState::Builder::adoptLastFilename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UploaderState::Builder::disownLastFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Reader::hasManeuverPrimaryText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Builder::hasManeuverPrimaryText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavInstruction::Reader::getManeuverPrimaryText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavInstruction::Builder::getManeuverPrimaryText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavInstruction::Builder::setManeuverPrimaryText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavInstruction::Builder::initManeuverPrimaryText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Builder::adoptManeuverPrimaryText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavInstruction::Builder::disownManeuverPrimaryText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Reader::hasManeuverSecondaryText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Builder::hasManeuverSecondaryText() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavInstruction::Reader::getManeuverSecondaryText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavInstruction::Builder::getManeuverSecondaryText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavInstruction::Builder::setManeuverSecondaryText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavInstruction::Builder::initManeuverSecondaryText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Builder::adoptManeuverSecondaryText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavInstruction::Builder::disownManeuverSecondaryText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float NavInstruction::Reader::getManeuverDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float NavInstruction::Builder::getManeuverDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setManeuverDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NavInstruction::Reader::hasManeuverType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Builder::hasManeuverType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavInstruction::Reader::getManeuverType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavInstruction::Builder::getManeuverType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavInstruction::Builder::setManeuverType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavInstruction::Builder::initManeuverType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Builder::adoptManeuverType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavInstruction::Builder::disownManeuverType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Reader::hasManeuverModifier() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Builder::hasManeuverModifier() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavInstruction::Reader::getManeuverModifier() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavInstruction::Builder::getManeuverModifier() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NavInstruction::Builder::setManeuverModifier( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavInstruction::Builder::initManeuverModifier(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Builder::adoptManeuverModifier(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavInstruction::Builder::disownManeuverModifier() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float NavInstruction::Reader::getDistanceRemaining() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float NavInstruction::Builder::getDistanceRemaining() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setDistanceRemaining(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float NavInstruction::Reader::getTimeRemaining() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float NavInstruction::Builder::getTimeRemaining() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setTimeRemaining(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float NavInstruction::Reader::getTimeRemainingTypical() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float NavInstruction::Builder::getTimeRemainingTypical() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setTimeRemainingTypical(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool NavInstruction::Reader::hasLanes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Builder::hasLanes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Reader NavInstruction::Reader::getLanes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Builder NavInstruction::Builder::getLanes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void NavInstruction::Builder::setLanes( ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>::Builder NavInstruction::Builder::initLanes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Builder::adoptLanes(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>> NavInstruction::Builder::disownLanes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Lane,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Reader::getShowFull() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool NavInstruction::Builder::getShowFull() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setShowFull(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline float NavInstruction::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float NavInstruction::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::NavInstruction::SpeedLimitSign NavInstruction::Reader::getSpeedLimitSign() const {
  return _reader.getDataField< ::cereal::NavInstruction::SpeedLimitSign>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::cereal::NavInstruction::SpeedLimitSign NavInstruction::Builder::getSpeedLimitSign() {
  return _builder.getDataField< ::cereal::NavInstruction::SpeedLimitSign>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Builder::setSpeedLimitSign( ::cereal::NavInstruction::SpeedLimitSign value) {
  _builder.setDataField< ::cereal::NavInstruction::SpeedLimitSign>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool NavInstruction::Reader::hasAllManeuvers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Builder::hasAllManeuvers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Reader NavInstruction::Reader::getAllManeuvers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Builder NavInstruction::Builder::getAllManeuvers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void NavInstruction::Builder::setAllManeuvers( ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>::Builder NavInstruction::Builder::initAllManeuvers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Builder::adoptAllManeuvers(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>> NavInstruction::Builder::disownAllManeuvers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Maneuver,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Lane::Reader::hasDirections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Lane::Builder::hasDirections() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Reader NavInstruction::Lane::Reader::getDirections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Builder NavInstruction::Lane::Builder::getDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavInstruction::Lane::Builder::setDirections( ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void NavInstruction::Lane::Builder::setDirections(::kj::ArrayPtr<const  ::cereal::NavInstruction::Direction> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>::Builder NavInstruction::Lane::Builder::initDirections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Lane::Builder::adoptDirections(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>> NavInstruction::Lane::Builder::disownDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavInstruction::Direction,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Lane::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NavInstruction::Lane::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Lane::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::NavInstruction::Direction NavInstruction::Lane::Reader::getActiveDirection() const {
  return _reader.getDataField< ::cereal::NavInstruction::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::NavInstruction::Direction NavInstruction::Lane::Builder::getActiveDirection() {
  return _builder.getDataField< ::cereal::NavInstruction::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Lane::Builder::setActiveDirection( ::cereal::NavInstruction::Direction value) {
  _builder.setDataField< ::cereal::NavInstruction::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float NavInstruction::Maneuver::Reader::getDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float NavInstruction::Maneuver::Builder::getDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavInstruction::Maneuver::Builder::setDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NavInstruction::Maneuver::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Maneuver::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavInstruction::Maneuver::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavInstruction::Maneuver::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavInstruction::Maneuver::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavInstruction::Maneuver::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Maneuver::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavInstruction::Maneuver::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavInstruction::Maneuver::Reader::hasModifier() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavInstruction::Maneuver::Builder::hasModifier() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavInstruction::Maneuver::Reader::getModifier() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavInstruction::Maneuver::Builder::getModifier() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavInstruction::Maneuver::Builder::setModifier( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavInstruction::Maneuver::Builder::initModifier(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavInstruction::Maneuver::Builder::adoptModifier(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavInstruction::Maneuver::Builder::disownModifier() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavRoute::Reader::hasCoordinates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavRoute::Builder::hasCoordinates() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Reader NavRoute::Reader::getCoordinates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Builder NavRoute::Builder::getCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavRoute::Builder::setCoordinates( ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>::Builder NavRoute::Builder::initCoordinates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavRoute::Builder::adoptCoordinates(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>> NavRoute::Builder::disownCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavRoute::Coordinate,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float NavRoute::Coordinate::Reader::getLatitude() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float NavRoute::Coordinate::Builder::getLatitude() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavRoute::Coordinate::Builder::setLatitude(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float NavRoute::Coordinate::Reader::getLongitude() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float NavRoute::Coordinate::Builder::getLongitude() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavRoute::Coordinate::Builder::setLongitude(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MapRenderState::Reader::getLocationMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MapRenderState::Builder::getLocationMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapRenderState::Builder::setLocationMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float MapRenderState::Reader::getRenderTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float MapRenderState::Builder::getRenderTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MapRenderState::Builder::setRenderTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MapRenderState::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MapRenderState::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MapRenderState::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NavModelData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t NavModelData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float NavModelData::Reader::getModelExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float NavModelData::Builder::getModelExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setModelExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float NavModelData::Reader::getDspExecutionTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float NavModelData::Builder::getDspExecutionTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setDspExecutionTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool NavModelData::Reader::hasFeatures() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::Builder::hasFeatures() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::Reader::getFeatures() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::getFeatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavModelData::Builder::setFeatures( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void NavModelData::Builder::setFeatures(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::initFeatures(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavModelData::Builder::adoptFeatures(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::Builder::disownFeatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavModelData::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavModelData::XYData::Reader NavModelData::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::NavModelData::XYData::Builder NavModelData::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavModelData::XYData::Pipeline NavModelData::Pipeline::getPosition() {
  return  ::cereal::NavModelData::XYData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void NavModelData::Builder::setPosition( ::cereal::NavModelData::XYData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavModelData::XYData::Builder NavModelData::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavModelData::Builder::adoptPosition(
    ::capnp::Orphan< ::cereal::NavModelData::XYData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavModelData::XYData> NavModelData::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData::XYData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavModelData::Reader::hasDesirePrediction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::Builder::hasDesirePrediction() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::Reader::getDesirePrediction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::getDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavModelData::Builder::setDesirePrediction( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void NavModelData::Builder::setDesirePrediction(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::Builder::initDesirePrediction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavModelData::Builder::adoptDesirePrediction(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::Builder::disownDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t NavModelData::Reader::getLocationMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t NavModelData::Builder::getLocationMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavModelData::Builder::setLocationMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool NavModelData::XYData::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setY( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasXStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasXStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getXStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setXStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setXStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initXStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptXStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownXStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavModelData::XYData::Reader::hasYStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NavModelData::XYData::Builder::hasYStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader NavModelData::XYData::Reader::getYStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::getYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NavModelData::XYData::Builder::setYStd( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void NavModelData::XYData::Builder::setYStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder NavModelData::XYData::Builder::initYStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void NavModelData::XYData::Builder::adoptYStd(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> NavModelData::XYData::Builder::disownYStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool EncodeData::Reader::hasIdx() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EncodeData::Builder::hasIdx() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader EncodeData::Reader::getIdx() const {
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder EncodeData::Builder::getIdx() {
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::EncodeIndex::Pipeline EncodeData::Pipeline::getIdx() {
  return  ::cereal::EncodeIndex::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EncodeData::Builder::setIdx( ::cereal::EncodeIndex::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder EncodeData::Builder::initIdx() {
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EncodeData::Builder::adoptIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> EncodeData::Builder::disownIdx() {
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EncodeData::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EncodeData::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EncodeData::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EncodeData::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EncodeData::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EncodeData::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void EncodeData::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EncodeData::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool EncodeData::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool EncodeData::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EncodeData::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EncodeData::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void EncodeData::Builder::setHeader( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EncodeData::Builder::initHeader(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void EncodeData::Builder::adoptHeader(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EncodeData::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t EncodeData::Reader::getUnixTimestampNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EncodeData::Builder::getUnixTimestampNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EncodeData::Builder::setUnixTimestampNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeData::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeData::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EncodeData::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeData::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeData::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void EncodeData::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool DebugAlert::Reader::hasAlertText1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugAlert::Builder::hasAlertText1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DebugAlert::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DebugAlert::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugAlert::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DebugAlert::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugAlert::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DebugAlert::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugAlert::Reader::hasAlertText2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DebugAlert::Builder::hasAlertText2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DebugAlert::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DebugAlert::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DebugAlert::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DebugAlert::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DebugAlert::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DebugAlert::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float SoundPressure::Reader::getSoundPressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float SoundPressure::Builder::getSoundPressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SoundPressure::Builder::setSoundPressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float SoundPressure::Reader::getSoundPressureWeightedDb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float SoundPressure::Builder::getSoundPressureWeightedDb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SoundPressure::Builder::setSoundPressureWeightedDb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float SoundPressure::Reader::getFilteredSoundPressureWeightedDbDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float SoundPressure::Builder::getFilteredSoundPressureWeightedDbDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SoundPressure::Builder::setFilteredSoundPressureWeightedDbDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float SoundPressure::Reader::getSoundPressureWeighted() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float SoundPressure::Builder::getSoundPressureWeighted() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SoundPressure::Builder::setSoundPressureWeighted(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AudioData::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AudioData::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AudioData::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AudioData::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AudioData::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AudioData::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AudioData::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AudioData::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t AudioData::Reader::getSampleRate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AudioData::Builder::getSampleRate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AudioData::Builder::setSampleRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AudioFeedback::Reader::hasAudio() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AudioFeedback::Builder::hasAudio() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AudioData::Reader AudioFeedback::Reader::getAudio() const {
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AudioData::Builder AudioFeedback::Builder::getAudio() {
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::AudioData::Pipeline AudioFeedback::Pipeline::getAudio() {
  return  ::cereal::AudioData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AudioFeedback::Builder::setAudio( ::cereal::AudioData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::AudioData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AudioData::Builder AudioFeedback::Builder::initAudio() {
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AudioFeedback::Builder::adoptAudio(
    ::capnp::Orphan< ::cereal::AudioData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::AudioData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AudioData> AudioFeedback::Builder::disownAudio() {
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t AudioFeedback::Reader::getBlockNum() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AudioFeedback::Builder::getBlockNum() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AudioFeedback::Builder::setBlockNum( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Touch::Reader::getSec() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Touch::Builder::getSec() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Touch::Builder::setSec( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Touch::Reader::getUsec() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Touch::Builder::getUsec() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Touch::Builder::setUsec( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Touch::Reader::getType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Touch::Builder::getType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Touch::Builder::setType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Touch::Reader::getCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Touch::Builder::getCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Touch::Builder::setCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Touch::Reader::getValue() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Touch::Builder::getValue() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Touch::Builder::setValue( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::cereal::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Reader::getLogMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Builder::getLogMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setLogMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::isInitData() const {
  return which() == Event::INIT_DATA;
}
inline bool Event::Builder::isInitData() {
  return which() == Event::INIT_DATA;
}
inline bool Event::Reader::hasInitData() const {
  if (which() != Event::INIT_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasInitData() {
  if (which() != Event::INIT_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::Reader Event::Reader::getInitData() const {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::Builder Event::Builder::getInitData() {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setInitData( ::cereal::InitData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::Builder Event::Builder::initInitData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptInitData(
    ::capnp::Orphan< ::cereal::InitData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData> Event::Builder::disownInitData() {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRoadCameraState() const {
  return which() == Event::ROAD_CAMERA_STATE;
}
inline bool Event::Builder::isRoadCameraState() {
  return which() == Event::ROAD_CAMERA_STATE;
}
inline bool Event::Reader::hasRoadCameraState() const {
  if (which() != Event::ROAD_CAMERA_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRoadCameraState() {
  if (which() != Event::ROAD_CAMERA_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getRoadCameraState() const {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getRoadCameraState() {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRoadCameraState( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initRoadCameraState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRoadCameraState(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownRoadCameraState() {
  KJ_IREQUIRE((which() == Event::ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsNMEA() const {
  return which() == Event::GPS_N_M_E_A;
}
inline bool Event::Builder::isGpsNMEA() {
  return which() == Event::GPS_N_M_E_A;
}
inline bool Event::Reader::hasGpsNMEA() const {
  if (which() != Event::GPS_N_M_E_A) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsNMEA() {
  if (which() != Event::GPS_N_M_E_A) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSNMEAData::Reader Event::Reader::getGpsNMEA() const {
  KJ_IREQUIRE((which() == Event::GPS_N_M_E_A),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GPSNMEAData::Builder Event::Builder::getGpsNMEA() {
  KJ_IREQUIRE((which() == Event::GPS_N_M_E_A),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsNMEA( ::cereal::GPSNMEAData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSNMEAData::Builder Event::Builder::initGpsNMEA() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsNMEA(
    ::capnp::Orphan< ::cereal::GPSNMEAData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSNMEAData> Event::Builder::disownGpsNMEA() {
  KJ_IREQUIRE((which() == Event::GPS_N_M_E_A),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEventDEPRECATED() const {
  return which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isSensorEventDEPRECATED() {
  return which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasSensorEventDEPRECATED() const {
  if (which() != Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEventDEPRECATED() {
  if (which() != Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getSensorEventDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getSensorEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEventDEPRECATED( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initSensorEventDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSensorEventDEPRECATED(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownSensorEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCan() const {
  return which() == Event::CAN;
}
inline bool Event::Builder::isCan() {
  return which() == Event::CAN;
}
inline bool Event::Reader::hasCan() const {
  if (which() != Event::CAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCan() {
  if (which() != Event::CAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getCan() const {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initCan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> Event::Builder::disownCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDeviceState() const {
  return which() == Event::DEVICE_STATE;
}
inline bool Event::Builder::isDeviceState() {
  return which() == Event::DEVICE_STATE;
}
inline bool Event::Reader::hasDeviceState() const {
  if (which() != Event::DEVICE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDeviceState() {
  if (which() != Event::DEVICE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DeviceState::Reader Event::Reader::getDeviceState() const {
  KJ_IREQUIRE((which() == Event::DEVICE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DeviceState::Builder Event::Builder::getDeviceState() {
  KJ_IREQUIRE((which() == Event::DEVICE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDeviceState( ::cereal::DeviceState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DEVICE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DeviceState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DeviceState::Builder Event::Builder::initDeviceState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DEVICE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDeviceState(
    ::capnp::Orphan< ::cereal::DeviceState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DEVICE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DeviceState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DeviceState> Event::Builder::disownDeviceState() {
  KJ_IREQUIRE((which() == Event::DEVICE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DeviceState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isControlsState() const {
  return which() == Event::CONTROLS_STATE;
}
inline bool Event::Builder::isControlsState() {
  return which() == Event::CONTROLS_STATE;
}
inline bool Event::Reader::hasControlsState() const {
  if (which() != Event::CONTROLS_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasControlsState() {
  if (which() != Event::CONTROLS_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::Reader Event::Reader::getControlsState() const {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::Builder Event::Builder::getControlsState() {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setControlsState( ::cereal::ControlsState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::Builder Event::Builder::initControlsState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptControlsState(
    ::capnp::Orphan< ::cereal::ControlsState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState> Event::Builder::disownControlsState() {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveEventDEPRECATED() const {
  return which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveEventDEPRECATED() {
  return which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveEventDEPRECATED() const {
  if (which() != Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveEventDEPRECATED() {
  if (which() != Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getLiveEventDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getLiveEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveEventDEPRECATED( ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initLiveEventDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveEventDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>> Event::Builder::disownLiveEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isModel() const {
  return which() == Event::MODEL;
}
inline bool Event::Builder::isModel() {
  return which() == Event::MODEL;
}
inline bool Event::Reader::hasModel() const {
  if (which() != Event::MODEL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasModel() {
  if (which() != Event::MODEL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::Reader Event::Reader::getModel() const {
  KJ_IREQUIRE((which() == Event::MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::Builder Event::Builder::getModel() {
  KJ_IREQUIRE((which() == Event::MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setModel( ::cereal::ModelData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL);
  ::capnp::_::PointerHelpers< ::cereal::ModelData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::Builder Event::Builder::initModel() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL);
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptModel(
    ::capnp::Orphan< ::cereal::ModelData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL);
  ::capnp::_::PointerHelpers< ::cereal::ModelData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData> Event::Builder::disownModel() {
  KJ_IREQUIRE((which() == Event::MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isFeaturesDEPRECATED() const {
  return which() == Event::FEATURES_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isFeaturesDEPRECATED() {
  return which() == Event::FEATURES_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasFeaturesDEPRECATED() const {
  if (which() != Event::FEATURES_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFeaturesDEPRECATED() {
  if (which() != Event::FEATURES_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CalibrationFeatures::Reader Event::Reader::getFeaturesDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::FEATURES_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CalibrationFeatures::Builder Event::Builder::getFeaturesDEPRECATED() {
  KJ_IREQUIRE((which() == Event::FEATURES_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setFeaturesDEPRECATED( ::cereal::CalibrationFeatures::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FEATURES_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CalibrationFeatures::Builder Event::Builder::initFeaturesDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FEATURES_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFeaturesDEPRECATED(
    ::capnp::Orphan< ::cereal::CalibrationFeatures>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FEATURES_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CalibrationFeatures> Event::Builder::disownFeaturesDEPRECATED() {
  KJ_IREQUIRE((which() == Event::FEATURES_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEventsDEPRECATED() const {
  return which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isSensorEventsDEPRECATED() {
  return which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasSensorEventsDEPRECATED() const {
  if (which() != Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEventsDEPRECATED() {
  if (which() != Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getSensorEventsDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getSensorEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEventsDEPRECATED( ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initSensorEventsDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSensorEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>> Event::Builder::disownSensorEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPandaStateDEPRECATED() const {
  return which() == Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isPandaStateDEPRECATED() {
  return which() == Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasPandaStateDEPRECATED() const {
  if (which() != Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPandaStateDEPRECATED() {
  if (which() != Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PandaState::Reader Event::Reader::getPandaStateDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PandaState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::PandaState::Builder Event::Builder::getPandaStateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PandaState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPandaStateDEPRECATED( ::cereal::PandaState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::PandaState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PandaState::Builder Event::Builder::initPandaStateDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::PandaState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptPandaStateDEPRECATED(
    ::capnp::Orphan< ::cereal::PandaState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::PandaState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PandaState> Event::Builder::disownPandaStateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::PANDA_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PandaState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRadarState() const {
  return which() == Event::RADAR_STATE;
}
inline bool Event::Builder::isRadarState() {
  return which() == Event::RADAR_STATE;
}
inline bool Event::Reader::hasRadarState() const {
  if (which() != Event::RADAR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRadarState() {
  if (which() != Event::RADAR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::Reader Event::Reader::getRadarState() const {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::Builder Event::Builder::getRadarState() {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRadarState( ::cereal::RadarState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::RadarState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::Builder Event::Builder::initRadarState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRadarState(
    ::capnp::Orphan< ::cereal::RadarState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::RadarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState> Event::Builder::disownRadarState() {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveUIDEPRECATED() const {
  return which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveUIDEPRECATED() {
  return which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveUIDEPRECATED() const {
  if (which() != Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveUIDEPRECATED() {
  if (which() != Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveUI::Reader Event::Reader::getLiveUIDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveUI::Builder Event::Builder::getLiveUIDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveUIDEPRECATED( ::cereal::LiveUI::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveUI>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveUI::Builder Event::Builder::initLiveUIDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveUIDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveUI>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveUI>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveUI> Event::Builder::disownLiveUIDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRoadEncodeIdx() const {
  return which() == Event::ROAD_ENCODE_IDX;
}
inline bool Event::Builder::isRoadEncodeIdx() {
  return which() == Event::ROAD_ENCODE_IDX;
}
inline bool Event::Reader::hasRoadEncodeIdx() const {
  if (which() != Event::ROAD_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRoadEncodeIdx() {
  if (which() != Event::ROAD_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getRoadEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRoadEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initRoadEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRoadEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTracksDEPRECATED() const {
  return which() == Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveTracksDEPRECATED() {
  return which() == Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveTracksDEPRECATED() const {
  if (which() != Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTracksDEPRECATED() {
  if (which() != Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getLiveTracksDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getLiveTracksDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTracksDEPRECATED( ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initLiveTracksDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveTracksDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>> Event::Builder::disownLiveTracksDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracksDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSendcan() const {
  return which() == Event::SENDCAN;
}
inline bool Event::Builder::isSendcan() {
  return which() == Event::SENDCAN;
}
inline bool Event::Reader::hasSendcan() const {
  if (which() != Event::SENDCAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSendcan() {
  if (which() != Event::SENDCAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getSendcan() const {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSendcan( ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initSendcan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENDCAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSendcan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>> Event::Builder::disownSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLogMessage() const {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Builder::isLogMessage() {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Reader::hasLogMessage() const {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLogMessage() {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Reader::getLogMessage() const {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Builder::getLogMessage() {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLogMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Builder::initLogMessage(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLogMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Builder::disownLogMessage() {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveCalibration() const {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Builder::isLiveCalibration() {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Reader::hasLiveCalibration() const {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveCalibration() {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveCalibrationData::Reader Event::Reader::getLiveCalibration() const {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::getLiveCalibration() {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveCalibration( ::cereal::LiveCalibrationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::initLiveCalibration() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveCalibration(
    ::capnp::Orphan< ::cereal::LiveCalibrationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveCalibrationData> Event::Builder::disownLiveCalibration() {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAndroidLog() const {
  return which() == Event::ANDROID_LOG;
}
inline bool Event::Builder::isAndroidLog() {
  return which() == Event::ANDROID_LOG;
}
inline bool Event::Reader::hasAndroidLog() const {
  if (which() != Event::ANDROID_LOG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAndroidLog() {
  if (which() != Event::ANDROID_LOG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidLogEntry::Reader Event::Reader::getAndroidLog() const {
  KJ_IREQUIRE((which() == Event::ANDROID_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidLogEntry::Builder Event::Builder::getAndroidLog() {
  KJ_IREQUIRE((which() == Event::ANDROID_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAndroidLog( ::cereal::AndroidLogEntry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_LOG);
  ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidLogEntry::Builder Event::Builder::initAndroidLog() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_LOG);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAndroidLog(
    ::capnp::Orphan< ::cereal::AndroidLogEntry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_LOG);
  ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidLogEntry> Event::Builder::disownAndroidLog() {
  KJ_IREQUIRE((which() == Event::ANDROID_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocation() const {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Builder::isGpsLocation() {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Reader::hasGpsLocation() const {
  if (which() != Event::GPS_LOCATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocation() {
  if (which() != Event::GPS_LOCATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocation() const {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocation() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocation( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocation() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocation(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocation() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarState() const {
  return which() == Event::CAR_STATE;
}
inline bool Event::Builder::isCarState() {
  return which() == Event::CAR_STATE;
}
inline bool Event::Reader::hasCarState() const {
  if (which() != Event::CAR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarState() {
  if (which() != Event::CAR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::Reader Event::Reader::getCarState() const {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::Builder Event::Builder::getCarState() {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarState( ::cereal::CarState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::Builder Event::Builder::initCarState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarState(
    ::capnp::Orphan< ::cereal::CarState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState> Event::Builder::disownCarState() {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarControl() const {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Builder::isCarControl() {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Reader::hasCarControl() const {
  if (which() != Event::CAR_CONTROL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarControl() {
  if (which() != Event::CAR_CONTROL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Reader Event::Reader::getCarControl() const {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Builder Event::Builder::getCarControl() {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarControl( ::cereal::CarControl::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Builder Event::Builder::initCarControl() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarControl(
    ::capnp::Orphan< ::cereal::CarControl>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl> Event::Builder::disownCarControl() {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLongitudinalPlan() const {
  return which() == Event::LONGITUDINAL_PLAN;
}
inline bool Event::Builder::isLongitudinalPlan() {
  return which() == Event::LONGITUDINAL_PLAN;
}
inline bool Event::Reader::hasLongitudinalPlan() const {
  if (which() != Event::LONGITUDINAL_PLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLongitudinalPlan() {
  if (which() != Event::LONGITUDINAL_PLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LongitudinalPlan::Reader Event::Reader::getLongitudinalPlan() const {
  KJ_IREQUIRE((which() == Event::LONGITUDINAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LongitudinalPlan::Builder Event::Builder::getLongitudinalPlan() {
  KJ_IREQUIRE((which() == Event::LONGITUDINAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLongitudinalPlan( ::cereal::LongitudinalPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LONGITUDINAL_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LongitudinalPlan::Builder Event::Builder::initLongitudinalPlan() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LONGITUDINAL_PLAN);
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLongitudinalPlan(
    ::capnp::Orphan< ::cereal::LongitudinalPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LONGITUDINAL_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LongitudinalPlan> Event::Builder::disownLongitudinalPlan() {
  KJ_IREQUIRE((which() == Event::LONGITUDINAL_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LongitudinalPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationDEPRECATED() const {
  return which() == Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveLocationDEPRECATED() {
  return which() == Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveLocationDEPRECATED() const {
  if (which() != Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationDEPRECATED() {
  if (which() != Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationDEPRECATED( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isEthernetDataDEPRECATED() const {
  return which() == Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isEthernetDataDEPRECATED() {
  return which() == Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasEthernetDataDEPRECATED() const {
  if (which() != Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasEthernetDataDEPRECATED() {
  if (which() != Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getEthernetDataDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getEthernetDataDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setEthernetDataDEPRECATED( ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initEthernetDataDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptEthernetDataDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>> Event::Builder::disownEthernetDataDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ETHERNET_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavUpdateDEPRECATED() const {
  return which() == Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isNavUpdateDEPRECATED() {
  return which() == Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasNavUpdateDEPRECATED() const {
  if (which() != Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavUpdateDEPRECATED() {
  if (which() != Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavUpdate::Reader Event::Reader::getNavUpdateDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavUpdate::Builder Event::Builder::getNavUpdateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavUpdateDEPRECATED( ::cereal::NavUpdate::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavUpdate::Builder Event::Builder::initNavUpdateDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavUpdateDEPRECATED(
    ::capnp::Orphan< ::cereal::NavUpdate>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavUpdate> Event::Builder::disownNavUpdateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::NAV_UPDATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCellInfoDEPRECATED() const {
  return which() == Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isCellInfoDEPRECATED() {
  return which() == Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasCellInfoDEPRECATED() const {
  if (which() != Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCellInfoDEPRECATED() {
  if (which() != Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getCellInfoDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getCellInfoDEPRECATED() {
  KJ_IREQUIRE((which() == Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCellInfoDEPRECATED( ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initCellInfoDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCellInfoDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>> Event::Builder::disownCellInfoDEPRECATED() {
  KJ_IREQUIRE((which() == Event::CELL_INFO_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWifiScanDEPRECATED() const {
  return which() == Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isWifiScanDEPRECATED() {
  return which() == Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasWifiScanDEPRECATED() const {
  if (which() != Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWifiScanDEPRECATED() {
  if (which() != Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getWifiScanDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getWifiScanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWifiScanDEPRECATED( ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initWifiScanDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptWifiScanDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>> Event::Builder::disownWifiScanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::WIFI_SCAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAndroidGnssDEPRECATED() const {
  return which() == Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isAndroidGnssDEPRECATED() {
  return which() == Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasAndroidGnssDEPRECATED() const {
  if (which() != Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAndroidGnssDEPRECATED() {
  if (which() != Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::Reader Event::Reader::getAndroidGnssDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::Builder Event::Builder::getAndroidGnssDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAndroidGnssDEPRECATED( ::cereal::AndroidGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::Builder Event::Builder::initAndroidGnssDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAndroidGnssDEPRECATED(
    ::capnp::Orphan< ::cereal::AndroidGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss> Event::Builder::disownAndroidGnssDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ANDROID_GNSS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isQcomGnss() const {
  return which() == Event::QCOM_GNSS;
}
inline bool Event::Builder::isQcomGnss() {
  return which() == Event::QCOM_GNSS;
}
inline bool Event::Reader::hasQcomGnss() const {
  if (which() != Event::QCOM_GNSS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasQcomGnss() {
  if (which() != Event::QCOM_GNSS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::Reader Event::Reader::getQcomGnss() const {
  KJ_IREQUIRE((which() == Event::QCOM_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::Builder Event::Builder::getQcomGnss() {
  KJ_IREQUIRE((which() == Event::QCOM_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setQcomGnss( ::cereal::QcomGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::QCOM_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::Builder Event::Builder::initQcomGnss() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::QCOM_GNSS);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptQcomGnss(
    ::capnp::Orphan< ::cereal::QcomGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::QCOM_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss> Event::Builder::disownQcomGnss() {
  KJ_IREQUIRE((which() == Event::QCOM_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLidarPtsDEPRECATED() const {
  return which() == Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLidarPtsDEPRECATED() {
  return which() == Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLidarPtsDEPRECATED() const {
  if (which() != Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLidarPtsDEPRECATED() {
  if (which() != Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LidarPts::Reader Event::Reader::getLidarPtsDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LidarPts::Builder Event::Builder::getLidarPtsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLidarPtsDEPRECATED( ::cereal::LidarPts::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LidarPts>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LidarPts::Builder Event::Builder::initLidarPtsDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLidarPtsDEPRECATED(
    ::capnp::Orphan< ::cereal::LidarPts>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LidarPts>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LidarPts> Event::Builder::disownLidarPtsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIDAR_PTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isProcLog() const {
  return which() == Event::PROC_LOG;
}
inline bool Event::Builder::isProcLog() {
  return which() == Event::PROC_LOG;
}
inline bool Event::Reader::hasProcLog() const {
  if (which() != Event::PROC_LOG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasProcLog() {
  if (which() != Event::PROC_LOG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ProcLog::Reader Event::Reader::getProcLog() const {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ProcLog::Builder Event::Builder::getProcLog() {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setProcLog( ::cereal::ProcLog::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  ::capnp::_::PointerHelpers< ::cereal::ProcLog>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ProcLog::Builder Event::Builder::initProcLog() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptProcLog(
    ::capnp::Orphan< ::cereal::ProcLog>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  ::capnp::_::PointerHelpers< ::cereal::ProcLog>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ProcLog> Event::Builder::disownProcLog() {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUbloxGnss() const {
  return which() == Event::UBLOX_GNSS;
}
inline bool Event::Builder::isUbloxGnss() {
  return which() == Event::UBLOX_GNSS;
}
inline bool Event::Reader::hasUbloxGnss() const {
  if (which() != Event::UBLOX_GNSS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUbloxGnss() {
  if (which() != Event::UBLOX_GNSS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::Reader Event::Reader::getUbloxGnss() const {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::Builder Event::Builder::getUbloxGnss() {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUbloxGnss( ::cereal::UbloxGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::Builder Event::Builder::initUbloxGnss() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUbloxGnss(
    ::capnp::Orphan< ::cereal::UbloxGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss> Event::Builder::disownUbloxGnss() {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isClocks() const {
  return which() == Event::CLOCKS;
}
inline bool Event::Builder::isClocks() {
  return which() == Event::CLOCKS;
}
inline bool Event::Reader::hasClocks() const {
  if (which() != Event::CLOCKS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasClocks() {
  if (which() != Event::CLOCKS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Clocks::Reader Event::Reader::getClocks() const {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Clocks::Builder Event::Builder::getClocks() {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setClocks( ::cereal::Clocks::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CLOCKS);
  ::capnp::_::PointerHelpers< ::cereal::Clocks>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Clocks::Builder Event::Builder::initClocks() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CLOCKS);
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptClocks(
    ::capnp::Orphan< ::cereal::Clocks>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CLOCKS);
  ::capnp::_::PointerHelpers< ::cereal::Clocks>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Clocks> Event::Builder::disownClocks() {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveMpcDEPRECATED() const {
  return which() == Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveMpcDEPRECATED() {
  return which() == Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveMpcDEPRECATED() const {
  if (which() != Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveMpcDEPRECATED() {
  if (which() != Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveMpcData::Reader Event::Reader::getLiveMpcDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveMpcData::Builder Event::Builder::getLiveMpcDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveMpcDEPRECATED( ::cereal::LiveMpcData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveMpcData::Builder Event::Builder::initLiveMpcDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveMpcDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveMpcData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveMpcData> Event::Builder::disownLiveMpcDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_MPC_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLongitudinalMpcDEPRECATED() const {
  return which() == Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveLongitudinalMpcDEPRECATED() {
  return which() == Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveLongitudinalMpcDEPRECATED() const {
  if (which() != Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLongitudinalMpcDEPRECATED() {
  if (which() != Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLongitudinalMpcData::Reader Event::Reader::getLiveLongitudinalMpcDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLongitudinalMpcData::Builder Event::Builder::getLiveLongitudinalMpcDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLongitudinalMpcDEPRECATED( ::cereal::LiveLongitudinalMpcData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLongitudinalMpcData::Builder Event::Builder::initLiveLongitudinalMpcDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLongitudinalMpcDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLongitudinalMpcData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLongitudinalMpcData> Event::Builder::disownLiveLongitudinalMpcDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LONGITUDINAL_MPC_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavStatusDEPRECATED() const {
  return which() == Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isNavStatusDEPRECATED() {
  return which() == Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasNavStatusDEPRECATED() const {
  if (which() != Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavStatusDEPRECATED() {
  if (which() != Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavStatus::Reader Event::Reader::getNavStatusDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavStatus::Builder Event::Builder::getNavStatusDEPRECATED() {
  KJ_IREQUIRE((which() == Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavStatusDEPRECATED( ::cereal::NavStatus::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::NavStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavStatus::Builder Event::Builder::initNavStatusDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavStatusDEPRECATED(
    ::capnp::Orphan< ::cereal::NavStatus>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::NavStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavStatus> Event::Builder::disownNavStatusDEPRECATED() {
  KJ_IREQUIRE((which() == Event::NAV_STATUS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUbloxRaw() const {
  return which() == Event::UBLOX_RAW;
}
inline bool Event::Builder::isUbloxRaw() {
  return which() == Event::UBLOX_RAW;
}
inline bool Event::Reader::hasUbloxRaw() const {
  if (which() != Event::UBLOX_RAW) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUbloxRaw() {
  if (which() != Event::UBLOX_RAW) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getUbloxRaw() const {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getUbloxRaw() {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUbloxRaw( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initUbloxRaw(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptUbloxRaw(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownUbloxRaw() {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsPlannerPointsDEPRECATED() const {
  return which() == Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isGpsPlannerPointsDEPRECATED() {
  return which() == Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasGpsPlannerPointsDEPRECATED() const {
  if (which() != Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsPlannerPointsDEPRECATED() {
  if (which() != Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSPlannerPoints::Reader Event::Reader::getGpsPlannerPointsDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GPSPlannerPoints::Builder Event::Builder::getGpsPlannerPointsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsPlannerPointsDEPRECATED( ::cereal::GPSPlannerPoints::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSPlannerPoints::Builder Event::Builder::initGpsPlannerPointsDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsPlannerPointsDEPRECATED(
    ::capnp::Orphan< ::cereal::GPSPlannerPoints>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSPlannerPoints> Event::Builder::disownGpsPlannerPointsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_POINTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsPlannerPlanDEPRECATED() const {
  return which() == Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isGpsPlannerPlanDEPRECATED() {
  return which() == Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasGpsPlannerPlanDEPRECATED() const {
  if (which() != Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsPlannerPlanDEPRECATED() {
  if (which() != Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSPlannerPlan::Reader Event::Reader::getGpsPlannerPlanDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GPSPlannerPlan::Builder Event::Builder::getGpsPlannerPlanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsPlannerPlanDEPRECATED( ::cereal::GPSPlannerPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSPlannerPlan::Builder Event::Builder::initGpsPlannerPlanDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsPlannerPlanDEPRECATED(
    ::capnp::Orphan< ::cereal::GPSPlannerPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSPlannerPlan> Event::Builder::disownGpsPlannerPlanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isApplanixRawDEPRECATED() const {
  return which() == Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isApplanixRawDEPRECATED() {
  return which() == Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasApplanixRawDEPRECATED() const {
  if (which() != Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasApplanixRawDEPRECATED() {
  if (which() != Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getApplanixRawDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getApplanixRawDEPRECATED() {
  KJ_IREQUIRE((which() == Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setApplanixRawDEPRECATED( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initApplanixRawDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptApplanixRawDEPRECATED(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownApplanixRawDEPRECATED() {
  KJ_IREQUIRE((which() == Event::APPLANIX_RAW_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTrafficEventsDEPRECATED() const {
  return which() == Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isTrafficEventsDEPRECATED() {
  return which() == Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasTrafficEventsDEPRECATED() const {
  if (which() != Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTrafficEventsDEPRECATED() {
  if (which() != Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getTrafficEventsDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getTrafficEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTrafficEventsDEPRECATED( ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initTrafficEventsDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptTrafficEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>> Event::Builder::disownTrafficEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::TRAFFIC_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationTimingDEPRECATED() const {
  return which() == Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveLocationTimingDEPRECATED() {
  return which() == Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveLocationTimingDEPRECATED() const {
  if (which() != Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationTimingDEPRECATED() {
  if (which() != Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationTimingDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationTimingDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationTimingDEPRECATED( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationTimingDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationTimingDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationTimingDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_TIMING_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbslamCorrectionDEPRECATED() const {
  return which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbslamCorrectionDEPRECATED() {
  return which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbslamCorrectionDEPRECATED() const {
  if (which() != Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbslamCorrectionDEPRECATED() {
  if (which() != Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbslamCorrection::Reader Event::Reader::getOrbslamCorrectionDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbslamCorrection::Builder Event::Builder::getOrbslamCorrectionDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbslamCorrectionDEPRECATED( ::cereal::OrbslamCorrection::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbslamCorrection::Builder Event::Builder::initOrbslamCorrectionDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbslamCorrectionDEPRECATED(
    ::capnp::Orphan< ::cereal::OrbslamCorrection>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbslamCorrection> Event::Builder::disownOrbslamCorrectionDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationCorrectedDEPRECATED() const {
  return which() == Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveLocationCorrectedDEPRECATED() {
  return which() == Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveLocationCorrectedDEPRECATED() const {
  if (which() != Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationCorrectedDEPRECATED() {
  if (which() != Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationCorrectedDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationCorrectedDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationCorrectedDEPRECATED( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationCorrectedDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationCorrectedDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationCorrectedDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_CORRECTED_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbObservationDEPRECATED() const {
  return which() == Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbObservationDEPRECATED() {
  return which() == Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbObservationDEPRECATED() const {
  if (which() != Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbObservationDEPRECATED() {
  if (which() != Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getOrbObservationDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getOrbObservationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbObservationDEPRECATED( ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initOrbObservationDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptOrbObservationDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>> Event::Builder::disownOrbObservationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_OBSERVATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocationExternal() const {
  return which() == Event::GPS_LOCATION_EXTERNAL;
}
inline bool Event::Builder::isGpsLocationExternal() {
  return which() == Event::GPS_LOCATION_EXTERNAL;
}
inline bool Event::Reader::hasGpsLocationExternal() const {
  if (which() != Event::GPS_LOCATION_EXTERNAL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocationExternal() {
  if (which() != Event::GPS_LOCATION_EXTERNAL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocationExternal() const {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocationExternal() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocationExternal( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocationExternal() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocationExternal(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocationExternal() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLocationDEPRECATED() const {
  return which() == Event::LOCATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLocationDEPRECATED() {
  return which() == Event::LOCATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLocationDEPRECATED() const {
  if (which() != Event::LOCATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLocationDEPRECATED() {
  if (which() != Event::LOCATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLocationDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLocationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLocationDEPRECATED( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOCATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLocationDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOCATION_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLocationDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOCATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLocationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUiNavigationEventDEPRECATED() const {
  return which() == Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isUiNavigationEventDEPRECATED() {
  return which() == Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasUiNavigationEventDEPRECATED() const {
  if (which() != Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUiNavigationEventDEPRECATED() {
  if (which() != Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UiNavigationEvent::Reader Event::Reader::getUiNavigationEventDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UiNavigationEvent::Builder Event::Builder::getUiNavigationEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUiNavigationEventDEPRECATED( ::cereal::UiNavigationEvent::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UiNavigationEvent::Builder Event::Builder::initUiNavigationEventDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUiNavigationEventDEPRECATED(
    ::capnp::Orphan< ::cereal::UiNavigationEvent>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UiNavigationEvent> Event::Builder::disownUiNavigationEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::UI_NAVIGATION_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationKalmanLegacyDEPRECATED() const {
  return which() == Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveLocationKalmanLegacyDEPRECATED() {
  return which() == Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveLocationKalmanLegacyDEPRECATED() const {
  if (which() != Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationKalmanLegacyDEPRECATED() {
  if (which() != Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationKalmanLegacyDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationKalmanLegacyDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationKalmanLegacyDEPRECATED( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationKalmanLegacyDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationKalmanLegacyDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationKalmanLegacyDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN_LEGACY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTestJoystick() const {
  return which() == Event::TEST_JOYSTICK;
}
inline bool Event::Builder::isTestJoystick() {
  return which() == Event::TEST_JOYSTICK;
}
inline bool Event::Reader::hasTestJoystick() const {
  if (which() != Event::TEST_JOYSTICK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTestJoystick() {
  if (which() != Event::TEST_JOYSTICK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Joystick::Reader Event::Reader::getTestJoystick() const {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Joystick::Builder Event::Builder::getTestJoystick() {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTestJoystick( ::cereal::Joystick::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  ::capnp::_::PointerHelpers< ::cereal::Joystick>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Joystick::Builder Event::Builder::initTestJoystick() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptTestJoystick(
    ::capnp::Orphan< ::cereal::Joystick>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  ::capnp::_::PointerHelpers< ::cereal::Joystick>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Joystick> Event::Builder::disownTestJoystick() {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbOdometryDEPRECATED() const {
  return which() == Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbOdometryDEPRECATED() {
  return which() == Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbOdometryDEPRECATED() const {
  if (which() != Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbOdometryDEPRECATED() {
  if (which() != Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbOdometry::Reader Event::Reader::getOrbOdometryDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbOdometry::Builder Event::Builder::getOrbOdometryDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbOdometryDEPRECATED( ::cereal::OrbOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbOdometry::Builder Event::Builder::initOrbOdometryDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbOdometryDEPRECATED(
    ::capnp::Orphan< ::cereal::OrbOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbOdometry> Event::Builder::disownOrbOdometryDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_ODOMETRY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbFeaturesDEPRECATED() const {
  return which() == Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbFeaturesDEPRECATED() {
  return which() == Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbFeaturesDEPRECATED() const {
  if (which() != Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbFeaturesDEPRECATED() {
  if (which() != Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbFeatures::Reader Event::Reader::getOrbFeaturesDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbFeatures::Builder Event::Builder::getOrbFeaturesDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbFeaturesDEPRECATED( ::cereal::OrbFeatures::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbFeatures::Builder Event::Builder::initOrbFeaturesDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbFeaturesDEPRECATED(
    ::capnp::Orphan< ::cereal::OrbFeatures>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbFeatures> Event::Builder::disownOrbFeaturesDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isApplanixLocationDEPRECATED() const {
  return which() == Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isApplanixLocationDEPRECATED() {
  return which() == Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasApplanixLocationDEPRECATED() const {
  if (which() != Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasApplanixLocationDEPRECATED() {
  if (which() != Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getApplanixLocationDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getApplanixLocationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setApplanixLocationDEPRECATED( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initApplanixLocationDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptApplanixLocationDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownApplanixLocationDEPRECATED() {
  KJ_IREQUIRE((which() == Event::APPLANIX_LOCATION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbKeyFrameDEPRECATED() const {
  return which() == Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbKeyFrameDEPRECATED() {
  return which() == Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbKeyFrameDEPRECATED() const {
  if (which() != Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbKeyFrameDEPRECATED() {
  if (which() != Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbKeyFrame::Reader Event::Reader::getOrbKeyFrameDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbKeyFrame::Builder Event::Builder::getOrbKeyFrameDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbKeyFrameDEPRECATED( ::cereal::OrbKeyFrame::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbKeyFrame::Builder Event::Builder::initOrbKeyFrameDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbKeyFrameDEPRECATED(
    ::capnp::Orphan< ::cereal::OrbKeyFrame>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbKeyFrame> Event::Builder::disownOrbKeyFrameDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_KEY_FRAME_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUiLayoutStateDEPRECATED() const {
  return which() == Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isUiLayoutStateDEPRECATED() {
  return which() == Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasUiLayoutStateDEPRECATED() const {
  if (which() != Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUiLayoutStateDEPRECATED() {
  if (which() != Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UiLayoutState::Reader Event::Reader::getUiLayoutStateDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UiLayoutState::Builder Event::Builder::getUiLayoutStateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUiLayoutStateDEPRECATED( ::cereal::UiLayoutState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UiLayoutState::Builder Event::Builder::initUiLayoutStateDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUiLayoutStateDEPRECATED(
    ::capnp::Orphan< ::cereal::UiLayoutState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UiLayoutState> Event::Builder::disownUiLayoutStateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::UI_LAYOUT_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbFeaturesSummaryDEPRECATED() const {
  return which() == Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbFeaturesSummaryDEPRECATED() {
  return which() == Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbFeaturesSummaryDEPRECATED() const {
  if (which() != Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbFeaturesSummaryDEPRECATED() {
  if (which() != Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbFeaturesSummary::Reader Event::Reader::getOrbFeaturesSummaryDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbFeaturesSummary::Builder Event::Builder::getOrbFeaturesSummaryDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbFeaturesSummaryDEPRECATED( ::cereal::OrbFeaturesSummary::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbFeaturesSummary::Builder Event::Builder::initOrbFeaturesSummaryDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbFeaturesSummaryDEPRECATED(
    ::capnp::Orphan< ::cereal::OrbFeaturesSummary>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbFeaturesSummary> Event::Builder::disownOrbFeaturesSummaryDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_SUMMARY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverStateDEPRECATED() const {
  return which() == Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isDriverStateDEPRECATED() {
  return which() == Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasDriverStateDEPRECATED() const {
  if (which() != Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverStateDEPRECATED() {
  if (which() != Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverStateDEPRECATED::Reader Event::Reader::getDriverStateDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverStateDEPRECATED::Builder Event::Builder::getDriverStateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverStateDEPRECATED( ::cereal::DriverStateDEPRECATED::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::DriverStateDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverStateDEPRECATED::Builder Event::Builder::initDriverStateDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverStateDEPRECATED(
    ::capnp::Orphan< ::cereal::DriverStateDEPRECATED>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::DriverStateDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverStateDEPRECATED> Event::Builder::disownDriverStateDEPRECATED() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isBoot() const {
  return which() == Event::BOOT;
}
inline bool Event::Builder::isBoot() {
  return which() == Event::BOOT;
}
inline bool Event::Reader::hasBoot() const {
  if (which() != Event::BOOT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasBoot() {
  if (which() != Event::BOOT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Boot::Reader Event::Reader::getBoot() const {
  KJ_IREQUIRE((which() == Event::BOOT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Boot::Builder Event::Builder::getBoot() {
  KJ_IREQUIRE((which() == Event::BOOT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setBoot( ::cereal::Boot::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOT);
  ::capnp::_::PointerHelpers< ::cereal::Boot>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Boot::Builder Event::Builder::initBoot() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOT);
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptBoot(
    ::capnp::Orphan< ::cereal::Boot>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOT);
  ::capnp::_::PointerHelpers< ::cereal::Boot>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Boot> Event::Builder::disownBoot() {
  KJ_IREQUIRE((which() == Event::BOOT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveParameters() const {
  return which() == Event::LIVE_PARAMETERS;
}
inline bool Event::Builder::isLiveParameters() {
  return which() == Event::LIVE_PARAMETERS;
}
inline bool Event::Reader::hasLiveParameters() const {
  if (which() != Event::LIVE_PARAMETERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveParameters() {
  if (which() != Event::LIVE_PARAMETERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveParametersData::Reader Event::Reader::getLiveParameters() const {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveParametersData::Builder Event::Builder::getLiveParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveParameters( ::cereal::LiveParametersData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveParametersData::Builder Event::Builder::initLiveParameters() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveParameters(
    ::capnp::Orphan< ::cereal::LiveParametersData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveParametersData> Event::Builder::disownLiveParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveMapDataDEPRECATED() const {
  return which() == Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveMapDataDEPRECATED() {
  return which() == Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveMapDataDEPRECATED() const {
  if (which() != Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveMapDataDEPRECATED() {
  if (which() != Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveMapDataDEPRECATED::Reader Event::Reader::getLiveMapDataDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapDataDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveMapDataDEPRECATED::Builder Event::Builder::getLiveMapDataDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapDataDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveMapDataDEPRECATED( ::cereal::LiveMapDataDEPRECATED::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveMapDataDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveMapDataDEPRECATED::Builder Event::Builder::initLiveMapDataDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapDataDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveMapDataDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveMapDataDEPRECATED>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveMapDataDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveMapDataDEPRECATED> Event::Builder::disownLiveMapDataDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_MAP_DATA_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapDataDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCameraOdometry() const {
  return which() == Event::CAMERA_ODOMETRY;
}
inline bool Event::Builder::isCameraOdometry() {
  return which() == Event::CAMERA_ODOMETRY;
}
inline bool Event::Reader::hasCameraOdometry() const {
  if (which() != Event::CAMERA_ODOMETRY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCameraOdometry() {
  if (which() != Event::CAMERA_ODOMETRY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CameraOdometry::Reader Event::Reader::getCameraOdometry() const {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CameraOdometry::Builder Event::Builder::getCameraOdometry() {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCameraOdometry( ::cereal::CameraOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CameraOdometry::Builder Event::Builder::initCameraOdometry() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCameraOdometry(
    ::capnp::Orphan< ::cereal::CameraOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CameraOdometry> Event::Builder::disownCameraOdometry() {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLateralPlanDEPRECATED() const {
  return which() == Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLateralPlanDEPRECATED() {
  return which() == Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLateralPlanDEPRECATED() const {
  if (which() != Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLateralPlanDEPRECATED() {
  if (which() != Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LateralPlan::Reader Event::Reader::getLateralPlanDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LateralPlan::Builder Event::Builder::getLateralPlanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLateralPlanDEPRECATED( ::cereal::LateralPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LateralPlan::Builder Event::Builder::initLateralPlanDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLateralPlanDEPRECATED(
    ::capnp::Orphan< ::cereal::LateralPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LateralPlan> Event::Builder::disownLateralPlanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LATERAL_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LateralPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isKalmanOdometryDEPRECATED() const {
  return which() == Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isKalmanOdometryDEPRECATED() {
  return which() == Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasKalmanOdometryDEPRECATED() const {
  if (which() != Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasKalmanOdometryDEPRECATED() {
  if (which() != Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::KalmanOdometry::Reader Event::Reader::getKalmanOdometryDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::KalmanOdometry::Builder Event::Builder::getKalmanOdometryDEPRECATED() {
  KJ_IREQUIRE((which() == Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setKalmanOdometryDEPRECATED( ::cereal::KalmanOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::KalmanOdometry::Builder Event::Builder::initKalmanOdometryDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptKalmanOdometryDEPRECATED(
    ::capnp::Orphan< ::cereal::KalmanOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::KalmanOdometry> Event::Builder::disownKalmanOdometryDEPRECATED() {
  KJ_IREQUIRE((which() == Event::KALMAN_ODOMETRY_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isThumbnail() const {
  return which() == Event::THUMBNAIL;
}
inline bool Event::Builder::isThumbnail() {
  return which() == Event::THUMBNAIL;
}
inline bool Event::Reader::hasThumbnail() const {
  if (which() != Event::THUMBNAIL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasThumbnail() {
  if (which() != Event::THUMBNAIL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Thumbnail::Reader Event::Reader::getThumbnail() const {
  KJ_IREQUIRE((which() == Event::THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Thumbnail::Builder Event::Builder::getThumbnail() {
  KJ_IREQUIRE((which() == Event::THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setThumbnail( ::cereal::Thumbnail::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THUMBNAIL);
  ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Thumbnail::Builder Event::Builder::initThumbnail() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THUMBNAIL);
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptThumbnail(
    ::capnp::Orphan< ::cereal::Thumbnail>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THUMBNAIL);
  ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Thumbnail> Event::Builder::disownThumbnail() {
  KJ_IREQUIRE((which() == Event::THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, true);
}

inline bool Event::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, true);
}
inline void Event::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value, true);
}

inline bool Event::Reader::isOnroadEventsDEPRECATED() const {
  return which() == Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOnroadEventsDEPRECATED() {
  return which() == Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOnroadEventsDEPRECATED() const {
  if (which() != Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOnroadEventsDEPRECATED() {
  if (which() != Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getOnroadEventsDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getOnroadEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOnroadEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initOnroadEventsDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptOnroadEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> Event::Builder::disownOnroadEventsDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ONROAD_EVENTS_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarParams() const {
  return which() == Event::CAR_PARAMS;
}
inline bool Event::Builder::isCarParams() {
  return which() == Event::CAR_PARAMS;
}
inline bool Event::Reader::hasCarParams() const {
  if (which() != Event::CAR_PARAMS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarParams() {
  if (which() != Event::CAR_PARAMS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::Reader Event::Reader::getCarParams() const {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::Builder Event::Builder::getCarParams() {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarParams( ::cereal::CarParams::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  ::capnp::_::PointerHelpers< ::cereal::CarParams>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::Builder Event::Builder::initCarParams() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarParams(
    ::capnp::Orphan< ::cereal::CarParams>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  ::capnp::_::PointerHelpers< ::cereal::CarParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams> Event::Builder::disownCarParams() {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverCameraState() const {
  return which() == Event::DRIVER_CAMERA_STATE;
}
inline bool Event::Builder::isDriverCameraState() {
  return which() == Event::DRIVER_CAMERA_STATE;
}
inline bool Event::Reader::hasDriverCameraState() const {
  if (which() != Event::DRIVER_CAMERA_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverCameraState() {
  if (which() != Event::DRIVER_CAMERA_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getDriverCameraState() const {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getDriverCameraState() {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverCameraState( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initDriverCameraState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverCameraState(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownDriverCameraState() {
  KJ_IREQUIRE((which() == Event::DRIVER_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverMonitoringState() const {
  return which() == Event::DRIVER_MONITORING_STATE;
}
inline bool Event::Builder::isDriverMonitoringState() {
  return which() == Event::DRIVER_MONITORING_STATE;
}
inline bool Event::Reader::hasDriverMonitoringState() const {
  if (which() != Event::DRIVER_MONITORING_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverMonitoringState() {
  if (which() != Event::DRIVER_MONITORING_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverMonitoringState::Reader Event::Reader::getDriverMonitoringState() const {
  KJ_IREQUIRE((which() == Event::DRIVER_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverMonitoringState::Builder Event::Builder::getDriverMonitoringState() {
  KJ_IREQUIRE((which() == Event::DRIVER_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverMonitoringState( ::cereal::DriverMonitoringState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_MONITORING_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverMonitoringState::Builder Event::Builder::initDriverMonitoringState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_MONITORING_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverMonitoringState(
    ::capnp::Orphan< ::cereal::DriverMonitoringState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_MONITORING_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverMonitoringState> Event::Builder::disownDriverMonitoringState() {
  KJ_IREQUIRE((which() == Event::DRIVER_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverMonitoringState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationKalmanDEPRECATED() const {
  return which() == Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveLocationKalmanDEPRECATED() {
  return which() == Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveLocationKalmanDEPRECATED() const {
  if (which() != Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationKalmanDEPRECATED() {
  if (which() != Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationKalman::Reader Event::Reader::getLiveLocationKalmanDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationKalman::Builder Event::Builder::getLiveLocationKalmanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationKalmanDEPRECATED( ::cereal::LiveLocationKalman::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationKalman::Builder Event::Builder::initLiveLocationKalmanDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationKalmanDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveLocationKalman>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationKalman> Event::Builder::disownLiveLocationKalmanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationKalman>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSentinel() const {
  return which() == Event::SENTINEL;
}
inline bool Event::Builder::isSentinel() {
  return which() == Event::SENTINEL;
}
inline bool Event::Reader::hasSentinel() const {
  if (which() != Event::SENTINEL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSentinel() {
  if (which() != Event::SENTINEL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Sentinel::Reader Event::Reader::getSentinel() const {
  KJ_IREQUIRE((which() == Event::SENTINEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Sentinel::Builder Event::Builder::getSentinel() {
  KJ_IREQUIRE((which() == Event::SENTINEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSentinel( ::cereal::Sentinel::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENTINEL);
  ::capnp::_::PointerHelpers< ::cereal::Sentinel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Sentinel::Builder Event::Builder::initSentinel() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENTINEL);
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSentinel(
    ::capnp::Orphan< ::cereal::Sentinel>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENTINEL);
  ::capnp::_::PointerHelpers< ::cereal::Sentinel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Sentinel> Event::Builder::disownSentinel() {
  KJ_IREQUIRE((which() == Event::SENTINEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Sentinel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWideRoadCameraState() const {
  return which() == Event::WIDE_ROAD_CAMERA_STATE;
}
inline bool Event::Builder::isWideRoadCameraState() {
  return which() == Event::WIDE_ROAD_CAMERA_STATE;
}
inline bool Event::Reader::hasWideRoadCameraState() const {
  if (which() != Event::WIDE_ROAD_CAMERA_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWideRoadCameraState() {
  if (which() != Event::WIDE_ROAD_CAMERA_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getWideRoadCameraState() const {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getWideRoadCameraState() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWideRoadCameraState( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initWideRoadCameraState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptWideRoadCameraState(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_CAMERA_STATE);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownWideRoadCameraState() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_CAMERA_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isModelV2() const {
  return which() == Event::MODEL_V2;
}
inline bool Event::Builder::isModelV2() {
  return which() == Event::MODEL_V2;
}
inline bool Event::Reader::hasModelV2() const {
  if (which() != Event::MODEL_V2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasModelV2() {
  if (which() != Event::MODEL_V2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelDataV2::Reader Event::Reader::getModelV2() const {
  KJ_IREQUIRE((which() == Event::MODEL_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelDataV2::Builder Event::Builder::getModelV2() {
  KJ_IREQUIRE((which() == Event::MODEL_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setModelV2( ::cereal::ModelDataV2::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL_V2);
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelDataV2::Builder Event::Builder::initModelV2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL_V2);
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptModelV2(
    ::capnp::Orphan< ::cereal::ModelDataV2>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL_V2);
  ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelDataV2> Event::Builder::disownModelV2() {
  KJ_IREQUIRE((which() == Event::MODEL_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelDataV2>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverEncodeIdx() const {
  return which() == Event::DRIVER_ENCODE_IDX;
}
inline bool Event::Builder::isDriverEncodeIdx() {
  return which() == Event::DRIVER_ENCODE_IDX;
}
inline bool Event::Reader::hasDriverEncodeIdx() const {
  if (which() != Event::DRIVER_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverEncodeIdx() {
  if (which() != Event::DRIVER_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getDriverEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::DRIVER_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getDriverEncodeIdx() {
  KJ_IREQUIRE((which() == Event::DRIVER_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initDriverEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownDriverEncodeIdx() {
  KJ_IREQUIRE((which() == Event::DRIVER_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWideRoadEncodeIdx() const {
  return which() == Event::WIDE_ROAD_ENCODE_IDX;
}
inline bool Event::Builder::isWideRoadEncodeIdx() {
  return which() == Event::WIDE_ROAD_ENCODE_IDX;
}
inline bool Event::Reader::hasWideRoadEncodeIdx() const {
  if (which() != Event::WIDE_ROAD_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWideRoadEncodeIdx() {
  if (which() != Event::WIDE_ROAD_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getWideRoadEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getWideRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWideRoadEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initWideRoadEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptWideRoadEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownWideRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isManagerState() const {
  return which() == Event::MANAGER_STATE;
}
inline bool Event::Builder::isManagerState() {
  return which() == Event::MANAGER_STATE;
}
inline bool Event::Reader::hasManagerState() const {
  if (which() != Event::MANAGER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasManagerState() {
  if (which() != Event::MANAGER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ManagerState::Reader Event::Reader::getManagerState() const {
  KJ_IREQUIRE((which() == Event::MANAGER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ManagerState::Builder Event::Builder::getManagerState() {
  KJ_IREQUIRE((which() == Event::MANAGER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setManagerState( ::cereal::ManagerState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MANAGER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ManagerState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ManagerState::Builder Event::Builder::initManagerState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MANAGER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptManagerState(
    ::capnp::Orphan< ::cereal::ManagerState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MANAGER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ManagerState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ManagerState> Event::Builder::disownManagerState() {
  KJ_IREQUIRE((which() == Event::MANAGER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ManagerState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUploaderState() const {
  return which() == Event::UPLOADER_STATE;
}
inline bool Event::Builder::isUploaderState() {
  return which() == Event::UPLOADER_STATE;
}
inline bool Event::Reader::hasUploaderState() const {
  if (which() != Event::UPLOADER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUploaderState() {
  if (which() != Event::UPLOADER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UploaderState::Reader Event::Reader::getUploaderState() const {
  KJ_IREQUIRE((which() == Event::UPLOADER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UploaderState::Builder Event::Builder::getUploaderState() {
  KJ_IREQUIRE((which() == Event::UPLOADER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUploaderState( ::cereal::UploaderState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UPLOADER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::UploaderState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UploaderState::Builder Event::Builder::initUploaderState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UPLOADER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUploaderState(
    ::capnp::Orphan< ::cereal::UploaderState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UPLOADER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::UploaderState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UploaderState> Event::Builder::disownUploaderState() {
  KJ_IREQUIRE((which() == Event::UPLOADER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UploaderState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPeripheralState() const {
  return which() == Event::PERIPHERAL_STATE;
}
inline bool Event::Builder::isPeripheralState() {
  return which() == Event::PERIPHERAL_STATE;
}
inline bool Event::Reader::hasPeripheralState() const {
  if (which() != Event::PERIPHERAL_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPeripheralState() {
  if (which() != Event::PERIPHERAL_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PeripheralState::Reader Event::Reader::getPeripheralState() const {
  KJ_IREQUIRE((which() == Event::PERIPHERAL_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::PeripheralState::Builder Event::Builder::getPeripheralState() {
  KJ_IREQUIRE((which() == Event::PERIPHERAL_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPeripheralState( ::cereal::PeripheralState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PERIPHERAL_STATE);
  ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PeripheralState::Builder Event::Builder::initPeripheralState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PERIPHERAL_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptPeripheralState(
    ::capnp::Orphan< ::cereal::PeripheralState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PERIPHERAL_STATE);
  ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PeripheralState> Event::Builder::disownPeripheralState() {
  KJ_IREQUIRE((which() == Event::PERIPHERAL_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PeripheralState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPandaStates() const {
  return which() == Event::PANDA_STATES;
}
inline bool Event::Builder::isPandaStates() {
  return which() == Event::PANDA_STATES;
}
inline bool Event::Reader::hasPandaStates() const {
  if (which() != Event::PANDA_STATES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPandaStates() {
  if (which() != Event::PANDA_STATES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getPandaStates() const {
  KJ_IREQUIRE((which() == Event::PANDA_STATES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getPandaStates() {
  KJ_IREQUIRE((which() == Event::PANDA_STATES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPandaStates( ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PANDA_STATES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initPandaStates(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PANDA_STATES);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptPandaStates(
    ::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PANDA_STATES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>> Event::Builder::disownPandaStates() {
  KJ_IREQUIRE((which() == Event::PANDA_STATES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::PandaState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavInstruction() const {
  return which() == Event::NAV_INSTRUCTION;
}
inline bool Event::Builder::isNavInstruction() {
  return which() == Event::NAV_INSTRUCTION;
}
inline bool Event::Reader::hasNavInstruction() const {
  if (which() != Event::NAV_INSTRUCTION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavInstruction() {
  if (which() != Event::NAV_INSTRUCTION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavInstruction::Reader Event::Reader::getNavInstruction() const {
  KJ_IREQUIRE((which() == Event::NAV_INSTRUCTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavInstruction>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavInstruction::Builder Event::Builder::getNavInstruction() {
  KJ_IREQUIRE((which() == Event::NAV_INSTRUCTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavInstruction>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavInstruction( ::cereal::NavInstruction::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_INSTRUCTION);
  ::capnp::_::PointerHelpers< ::cereal::NavInstruction>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavInstruction::Builder Event::Builder::initNavInstruction() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_INSTRUCTION);
  return ::capnp::_::PointerHelpers< ::cereal::NavInstruction>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavInstruction(
    ::capnp::Orphan< ::cereal::NavInstruction>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_INSTRUCTION);
  ::capnp::_::PointerHelpers< ::cereal::NavInstruction>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavInstruction> Event::Builder::disownNavInstruction() {
  KJ_IREQUIRE((which() == Event::NAV_INSTRUCTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavInstruction>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavRoute() const {
  return which() == Event::NAV_ROUTE;
}
inline bool Event::Builder::isNavRoute() {
  return which() == Event::NAV_ROUTE;
}
inline bool Event::Reader::hasNavRoute() const {
  if (which() != Event::NAV_ROUTE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavRoute() {
  if (which() != Event::NAV_ROUTE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavRoute::Reader Event::Reader::getNavRoute() const {
  KJ_IREQUIRE((which() == Event::NAV_ROUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavRoute>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavRoute::Builder Event::Builder::getNavRoute() {
  KJ_IREQUIRE((which() == Event::NAV_ROUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavRoute>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavRoute( ::cereal::NavRoute::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_ROUTE);
  ::capnp::_::PointerHelpers< ::cereal::NavRoute>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavRoute::Builder Event::Builder::initNavRoute() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_ROUTE);
  return ::capnp::_::PointerHelpers< ::cereal::NavRoute>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavRoute(
    ::capnp::Orphan< ::cereal::NavRoute>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_ROUTE);
  ::capnp::_::PointerHelpers< ::cereal::NavRoute>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavRoute> Event::Builder::disownNavRoute() {
  KJ_IREQUIRE((which() == Event::NAV_ROUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavRoute>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavThumbnail() const {
  return which() == Event::NAV_THUMBNAIL;
}
inline bool Event::Builder::isNavThumbnail() {
  return which() == Event::NAV_THUMBNAIL;
}
inline bool Event::Reader::hasNavThumbnail() const {
  if (which() != Event::NAV_THUMBNAIL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavThumbnail() {
  if (which() != Event::NAV_THUMBNAIL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Thumbnail::Reader Event::Reader::getNavThumbnail() const {
  KJ_IREQUIRE((which() == Event::NAV_THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Thumbnail::Builder Event::Builder::getNavThumbnail() {
  KJ_IREQUIRE((which() == Event::NAV_THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavThumbnail( ::cereal::Thumbnail::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_THUMBNAIL);
  ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Thumbnail::Builder Event::Builder::initNavThumbnail() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_THUMBNAIL);
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavThumbnail(
    ::capnp::Orphan< ::cereal::Thumbnail>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_THUMBNAIL);
  ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Thumbnail> Event::Builder::disownNavThumbnail() {
  KJ_IREQUIRE((which() == Event::NAV_THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isErrorLogMessage() const {
  return which() == Event::ERROR_LOG_MESSAGE;
}
inline bool Event::Builder::isErrorLogMessage() {
  return which() == Event::ERROR_LOG_MESSAGE;
}
inline bool Event::Reader::hasErrorLogMessage() const {
  if (which() != Event::ERROR_LOG_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasErrorLogMessage() {
  if (which() != Event::ERROR_LOG_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Reader::getErrorLogMessage() const {
  KJ_IREQUIRE((which() == Event::ERROR_LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Builder::getErrorLogMessage() {
  KJ_IREQUIRE((which() == Event::ERROR_LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setErrorLogMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ERROR_LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Builder::initErrorLogMessage(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ERROR_LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptErrorLogMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ERROR_LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Builder::disownErrorLogMessage() {
  KJ_IREQUIRE((which() == Event::ERROR_LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRoadEncodeData() const {
  return which() == Event::ROAD_ENCODE_DATA;
}
inline bool Event::Builder::isRoadEncodeData() {
  return which() == Event::ROAD_ENCODE_DATA;
}
inline bool Event::Reader::hasRoadEncodeData() const {
  if (which() != Event::ROAD_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRoadEncodeData() {
  if (which() != Event::ROAD_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getRoadEncodeData() const {
  KJ_IREQUIRE((which() == Event::ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRoadEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initRoadEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRoadEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverEncodeData() const {
  return which() == Event::DRIVER_ENCODE_DATA;
}
inline bool Event::Builder::isDriverEncodeData() {
  return which() == Event::DRIVER_ENCODE_DATA;
}
inline bool Event::Reader::hasDriverEncodeData() const {
  if (which() != Event::DRIVER_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverEncodeData() {
  if (which() != Event::DRIVER_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getDriverEncodeData() const {
  KJ_IREQUIRE((which() == Event::DRIVER_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getDriverEncodeData() {
  KJ_IREQUIRE((which() == Event::DRIVER_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initDriverEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownDriverEncodeData() {
  KJ_IREQUIRE((which() == Event::DRIVER_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWideRoadEncodeData() const {
  return which() == Event::WIDE_ROAD_ENCODE_DATA;
}
inline bool Event::Builder::isWideRoadEncodeData() {
  return which() == Event::WIDE_ROAD_ENCODE_DATA;
}
inline bool Event::Reader::hasWideRoadEncodeData() const {
  if (which() != Event::WIDE_ROAD_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWideRoadEncodeData() {
  if (which() != Event::WIDE_ROAD_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getWideRoadEncodeData() const {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getWideRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWideRoadEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initWideRoadEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptWideRoadEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIDE_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownWideRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::WIDE_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isQRoadEncodeData() const {
  return which() == Event::Q_ROAD_ENCODE_DATA;
}
inline bool Event::Builder::isQRoadEncodeData() {
  return which() == Event::Q_ROAD_ENCODE_DATA;
}
inline bool Event::Reader::hasQRoadEncodeData() const {
  if (which() != Event::Q_ROAD_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasQRoadEncodeData() {
  if (which() != Event::Q_ROAD_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getQRoadEncodeData() const {
  KJ_IREQUIRE((which() == Event::Q_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getQRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::Q_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setQRoadEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::Q_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initQRoadEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::Q_ROAD_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptQRoadEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::Q_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownQRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::Q_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isQRoadEncodeIdx() const {
  return which() == Event::Q_ROAD_ENCODE_IDX;
}
inline bool Event::Builder::isQRoadEncodeIdx() {
  return which() == Event::Q_ROAD_ENCODE_IDX;
}
inline bool Event::Reader::hasQRoadEncodeIdx() const {
  if (which() != Event::Q_ROAD_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasQRoadEncodeIdx() {
  if (which() != Event::Q_ROAD_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getQRoadEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::Q_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getQRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::Q_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setQRoadEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::Q_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initQRoadEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::Q_ROAD_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptQRoadEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::Q_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownQRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::Q_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGnssMeasurements() const {
  return which() == Event::GNSS_MEASUREMENTS;
}
inline bool Event::Builder::isGnssMeasurements() {
  return which() == Event::GNSS_MEASUREMENTS;
}
inline bool Event::Reader::hasGnssMeasurements() const {
  if (which() != Event::GNSS_MEASUREMENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGnssMeasurements() {
  if (which() != Event::GNSS_MEASUREMENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GnssMeasurements::Reader Event::Reader::getGnssMeasurements() const {
  KJ_IREQUIRE((which() == Event::GNSS_MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GnssMeasurements::Builder Event::Builder::getGnssMeasurements() {
  KJ_IREQUIRE((which() == Event::GNSS_MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGnssMeasurements( ::cereal::GnssMeasurements::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GNSS_MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GnssMeasurements::Builder Event::Builder::initGnssMeasurements() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GNSS_MEASUREMENTS);
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGnssMeasurements(
    ::capnp::Orphan< ::cereal::GnssMeasurements>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GNSS_MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GnssMeasurements> Event::Builder::disownGnssMeasurements() {
  KJ_IREQUIRE((which() == Event::GNSS_MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GnssMeasurements>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverStateV2() const {
  return which() == Event::DRIVER_STATE_V2;
}
inline bool Event::Builder::isDriverStateV2() {
  return which() == Event::DRIVER_STATE_V2;
}
inline bool Event::Reader::hasDriverStateV2() const {
  if (which() != Event::DRIVER_STATE_V2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverStateV2() {
  if (which() != Event::DRIVER_STATE_V2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverStateV2::Reader Event::Reader::getDriverStateV2() const {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverStateV2::Builder Event::Builder::getDriverStateV2() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverStateV2( ::cereal::DriverStateV2::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE_V2);
  ::capnp::_::PointerHelpers< ::cereal::DriverStateV2>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverStateV2::Builder Event::Builder::initDriverStateV2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE_V2);
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverStateV2(
    ::capnp::Orphan< ::cereal::DriverStateV2>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE_V2);
  ::capnp::_::PointerHelpers< ::cereal::DriverStateV2>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverStateV2> Event::Builder::disownDriverStateV2() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE_V2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverStateV2>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUserBookmark() const {
  return which() == Event::USER_BOOKMARK;
}
inline bool Event::Builder::isUserBookmark() {
  return which() == Event::USER_BOOKMARK;
}
inline bool Event::Reader::hasUserBookmark() const {
  if (which() != Event::USER_BOOKMARK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUserBookmark() {
  if (which() != Event::USER_BOOKMARK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UserBookmark::Reader Event::Reader::getUserBookmark() const {
  KJ_IREQUIRE((which() == Event::USER_BOOKMARK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UserBookmark::Builder Event::Builder::getUserBookmark() {
  KJ_IREQUIRE((which() == Event::USER_BOOKMARK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUserBookmark( ::cereal::UserBookmark::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::USER_BOOKMARK);
  ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UserBookmark::Builder Event::Builder::initUserBookmark() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::USER_BOOKMARK);
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUserBookmark(
    ::capnp::Orphan< ::cereal::UserBookmark>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::USER_BOOKMARK);
  ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UserBookmark> Event::Builder::disownUserBookmark() {
  KJ_IREQUIRE((which() == Event::USER_BOOKMARK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTorqueParameters() const {
  return which() == Event::LIVE_TORQUE_PARAMETERS;
}
inline bool Event::Builder::isLiveTorqueParameters() {
  return which() == Event::LIVE_TORQUE_PARAMETERS;
}
inline bool Event::Reader::hasLiveTorqueParameters() const {
  if (which() != Event::LIVE_TORQUE_PARAMETERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTorqueParameters() {
  if (which() != Event::LIVE_TORQUE_PARAMETERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveTorqueParametersData::Reader Event::Reader::getLiveTorqueParameters() const {
  KJ_IREQUIRE((which() == Event::LIVE_TORQUE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveTorqueParametersData::Builder Event::Builder::getLiveTorqueParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_TORQUE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTorqueParameters( ::cereal::LiveTorqueParametersData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TORQUE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveTorqueParametersData::Builder Event::Builder::initLiveTorqueParameters() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TORQUE_PARAMETERS);
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveTorqueParameters(
    ::capnp::Orphan< ::cereal::LiveTorqueParametersData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TORQUE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveTorqueParametersData> Event::Builder::disownLiveTorqueParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_TORQUE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveTorqueParametersData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isMagnetometer() const {
  return which() == Event::MAGNETOMETER;
}
inline bool Event::Builder::isMagnetometer() {
  return which() == Event::MAGNETOMETER;
}
inline bool Event::Reader::hasMagnetometer() const {
  if (which() != Event::MAGNETOMETER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasMagnetometer() {
  if (which() != Event::MAGNETOMETER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getMagnetometer() const {
  KJ_IREQUIRE((which() == Event::MAGNETOMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getMagnetometer() {
  KJ_IREQUIRE((which() == Event::MAGNETOMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setMagnetometer( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MAGNETOMETER);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initMagnetometer() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MAGNETOMETER);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptMagnetometer(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MAGNETOMETER);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownMagnetometer() {
  KJ_IREQUIRE((which() == Event::MAGNETOMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLightSensor() const {
  return which() == Event::LIGHT_SENSOR;
}
inline bool Event::Builder::isLightSensor() {
  return which() == Event::LIGHT_SENSOR;
}
inline bool Event::Reader::hasLightSensor() const {
  if (which() != Event::LIGHT_SENSOR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLightSensor() {
  if (which() != Event::LIGHT_SENSOR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getLightSensor() const {
  KJ_IREQUIRE((which() == Event::LIGHT_SENSOR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getLightSensor() {
  KJ_IREQUIRE((which() == Event::LIGHT_SENSOR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLightSensor( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIGHT_SENSOR);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initLightSensor() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIGHT_SENSOR);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLightSensor(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIGHT_SENSOR);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownLightSensor() {
  KJ_IREQUIRE((which() == Event::LIGHT_SENSOR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTemperatureSensor() const {
  return which() == Event::TEMPERATURE_SENSOR;
}
inline bool Event::Builder::isTemperatureSensor() {
  return which() == Event::TEMPERATURE_SENSOR;
}
inline bool Event::Reader::hasTemperatureSensor() const {
  if (which() != Event::TEMPERATURE_SENSOR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTemperatureSensor() {
  if (which() != Event::TEMPERATURE_SENSOR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getTemperatureSensor() const {
  KJ_IREQUIRE((which() == Event::TEMPERATURE_SENSOR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getTemperatureSensor() {
  KJ_IREQUIRE((which() == Event::TEMPERATURE_SENSOR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTemperatureSensor( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEMPERATURE_SENSOR);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initTemperatureSensor() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEMPERATURE_SENSOR);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptTemperatureSensor(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEMPERATURE_SENSOR);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownTemperatureSensor() {
  KJ_IREQUIRE((which() == Event::TEMPERATURE_SENSOR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAccelerometer() const {
  return which() == Event::ACCELEROMETER;
}
inline bool Event::Builder::isAccelerometer() {
  return which() == Event::ACCELEROMETER;
}
inline bool Event::Reader::hasAccelerometer() const {
  if (which() != Event::ACCELEROMETER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAccelerometer() {
  if (which() != Event::ACCELEROMETER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getAccelerometer() const {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getAccelerometer() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAccelerometer( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ACCELEROMETER);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initAccelerometer() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ACCELEROMETER);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAccelerometer(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ACCELEROMETER);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownAccelerometer() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGyroscope() const {
  return which() == Event::GYROSCOPE;
}
inline bool Event::Builder::isGyroscope() {
  return which() == Event::GYROSCOPE;
}
inline bool Event::Reader::hasGyroscope() const {
  if (which() != Event::GYROSCOPE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGyroscope() {
  if (which() != Event::GYROSCOPE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getGyroscope() const {
  KJ_IREQUIRE((which() == Event::GYROSCOPE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getGyroscope() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGyroscope( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GYROSCOPE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initGyroscope() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GYROSCOPE);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGyroscope(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GYROSCOPE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownGyroscope() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGyroscope2() const {
  return which() == Event::GYROSCOPE2;
}
inline bool Event::Builder::isGyroscope2() {
  return which() == Event::GYROSCOPE2;
}
inline bool Event::Reader::hasGyroscope2() const {
  if (which() != Event::GYROSCOPE2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGyroscope2() {
  if (which() != Event::GYROSCOPE2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getGyroscope2() const {
  KJ_IREQUIRE((which() == Event::GYROSCOPE2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getGyroscope2() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGyroscope2( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GYROSCOPE2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initGyroscope2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GYROSCOPE2);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGyroscope2(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GYROSCOPE2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownGyroscope2() {
  KJ_IREQUIRE((which() == Event::GYROSCOPE2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAccelerometer2() const {
  return which() == Event::ACCELEROMETER2;
}
inline bool Event::Builder::isAccelerometer2() {
  return which() == Event::ACCELEROMETER2;
}
inline bool Event::Reader::hasAccelerometer2() const {
  if (which() != Event::ACCELEROMETER2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAccelerometer2() {
  if (which() != Event::ACCELEROMETER2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getAccelerometer2() const {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getAccelerometer2() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAccelerometer2( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ACCELEROMETER2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initAccelerometer2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ACCELEROMETER2);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAccelerometer2(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ACCELEROMETER2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownAccelerometer2() {
  KJ_IREQUIRE((which() == Event::ACCELEROMETER2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUiDebug() const {
  return which() == Event::UI_DEBUG;
}
inline bool Event::Builder::isUiDebug() {
  return which() == Event::UI_DEBUG;
}
inline bool Event::Reader::hasUiDebug() const {
  if (which() != Event::UI_DEBUG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUiDebug() {
  if (which() != Event::UI_DEBUG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UIDebug::Reader Event::Reader::getUiDebug() const {
  KJ_IREQUIRE((which() == Event::UI_DEBUG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UIDebug>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UIDebug::Builder Event::Builder::getUiDebug() {
  KJ_IREQUIRE((which() == Event::UI_DEBUG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UIDebug>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUiDebug( ::cereal::UIDebug::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_DEBUG);
  ::capnp::_::PointerHelpers< ::cereal::UIDebug>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UIDebug::Builder Event::Builder::initUiDebug() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_DEBUG);
  return ::capnp::_::PointerHelpers< ::cereal::UIDebug>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUiDebug(
    ::capnp::Orphan< ::cereal::UIDebug>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_DEBUG);
  ::capnp::_::PointerHelpers< ::cereal::UIDebug>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UIDebug> Event::Builder::disownUiDebug() {
  KJ_IREQUIRE((which() == Event::UI_DEBUG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UIDebug>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSoundPressure() const {
  return which() == Event::SOUND_PRESSURE;
}
inline bool Event::Builder::isSoundPressure() {
  return which() == Event::SOUND_PRESSURE;
}
inline bool Event::Reader::hasSoundPressure() const {
  if (which() != Event::SOUND_PRESSURE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSoundPressure() {
  if (which() != Event::SOUND_PRESSURE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SoundPressure::Reader Event::Reader::getSoundPressure() const {
  KJ_IREQUIRE((which() == Event::SOUND_PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SoundPressure>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SoundPressure::Builder Event::Builder::getSoundPressure() {
  KJ_IREQUIRE((which() == Event::SOUND_PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SoundPressure>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSoundPressure( ::cereal::SoundPressure::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SOUND_PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SoundPressure>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SoundPressure::Builder Event::Builder::initSoundPressure() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SOUND_PRESSURE);
  return ::capnp::_::PointerHelpers< ::cereal::SoundPressure>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSoundPressure(
    ::capnp::Orphan< ::cereal::SoundPressure>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SOUND_PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SoundPressure>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SoundPressure> Event::Builder::disownSoundPressure() {
  KJ_IREQUIRE((which() == Event::SOUND_PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SoundPressure>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavModelDEPRECATED() const {
  return which() == Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isNavModelDEPRECATED() {
  return which() == Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasNavModelDEPRECATED() const {
  if (which() != Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavModelDEPRECATED() {
  if (which() != Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavModelData::Reader Event::Reader::getNavModelDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavModelData::Builder Event::Builder::getNavModelDEPRECATED() {
  KJ_IREQUIRE((which() == Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavModelDEPRECATED( ::cereal::NavModelData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::NavModelData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavModelData::Builder Event::Builder::initNavModelDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavModelDEPRECATED(
    ::capnp::Orphan< ::cereal::NavModelData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::NavModelData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavModelData> Event::Builder::disownNavModelDEPRECATED() {
  KJ_IREQUIRE((which() == Event::NAV_MODEL_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavModelData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isMapRenderState() const {
  return which() == Event::MAP_RENDER_STATE;
}
inline bool Event::Builder::isMapRenderState() {
  return which() == Event::MAP_RENDER_STATE;
}
inline bool Event::Reader::hasMapRenderState() const {
  if (which() != Event::MAP_RENDER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasMapRenderState() {
  if (which() != Event::MAP_RENDER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::MapRenderState::Reader Event::Reader::getMapRenderState() const {
  KJ_IREQUIRE((which() == Event::MAP_RENDER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::MapRenderState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::MapRenderState::Builder Event::Builder::getMapRenderState() {
  KJ_IREQUIRE((which() == Event::MAP_RENDER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::MapRenderState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setMapRenderState( ::cereal::MapRenderState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MAP_RENDER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::MapRenderState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::MapRenderState::Builder Event::Builder::initMapRenderState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MAP_RENDER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::MapRenderState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptMapRenderState(
    ::capnp::Orphan< ::cereal::MapRenderState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MAP_RENDER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::MapRenderState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::MapRenderState> Event::Builder::disownMapRenderState() {
  KJ_IREQUIRE((which() == Event::MAP_RENDER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::MapRenderState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUiPlanDEPRECATED() const {
  return which() == Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isUiPlanDEPRECATED() {
  return which() == Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasUiPlanDEPRECATED() const {
  if (which() != Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUiPlanDEPRECATED() {
  if (which() != Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UiPlan::Reader Event::Reader::getUiPlanDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UiPlan::Builder Event::Builder::getUiPlanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUiPlanDEPRECATED( ::cereal::UiPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::UiPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UiPlan::Builder Event::Builder::initUiPlanDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::UiPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUiPlanDEPRECATED(
    ::capnp::Orphan< ::cereal::UiPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::UiPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UiPlan> Event::Builder::disownUiPlanDEPRECATED() {
  KJ_IREQUIRE((which() == Event::UI_PLAN_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved0() const {
  return which() == Event::CUSTOM_RESERVED0;
}
inline bool Event::Builder::isCustomReserved0() {
  return which() == Event::CUSTOM_RESERVED0;
}
inline bool Event::Reader::hasCustomReserved0() const {
  if (which() != Event::CUSTOM_RESERVED0) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved0() {
  if (which() != Event::CUSTOM_RESERVED0) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved0::Reader Event::Reader::getCustomReserved0() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED0),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved0>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved0::Builder Event::Builder::getCustomReserved0() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED0),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved0>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved0( ::cereal::CustomReserved0::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED0);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved0>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved0::Builder Event::Builder::initCustomReserved0() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED0);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved0>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved0(
    ::capnp::Orphan< ::cereal::CustomReserved0>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED0);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved0>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved0> Event::Builder::disownCustomReserved0() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED0),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved0>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved1() const {
  return which() == Event::CUSTOM_RESERVED1;
}
inline bool Event::Builder::isCustomReserved1() {
  return which() == Event::CUSTOM_RESERVED1;
}
inline bool Event::Reader::hasCustomReserved1() const {
  if (which() != Event::CUSTOM_RESERVED1) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved1() {
  if (which() != Event::CUSTOM_RESERVED1) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved1::Reader Event::Reader::getCustomReserved1() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED1),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved1>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved1::Builder Event::Builder::getCustomReserved1() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED1),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved1>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved1( ::cereal::CustomReserved1::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED1);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved1>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved1::Builder Event::Builder::initCustomReserved1() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED1);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved1>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved1(
    ::capnp::Orphan< ::cereal::CustomReserved1>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED1);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved1>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved1> Event::Builder::disownCustomReserved1() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED1),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved1>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved2() const {
  return which() == Event::CUSTOM_RESERVED2;
}
inline bool Event::Builder::isCustomReserved2() {
  return which() == Event::CUSTOM_RESERVED2;
}
inline bool Event::Reader::hasCustomReserved2() const {
  if (which() != Event::CUSTOM_RESERVED2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved2() {
  if (which() != Event::CUSTOM_RESERVED2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved2::Reader Event::Reader::getCustomReserved2() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved2>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved2::Builder Event::Builder::getCustomReserved2() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved2>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved2( ::cereal::CustomReserved2::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED2);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved2>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved2::Builder Event::Builder::initCustomReserved2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED2);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved2>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved2(
    ::capnp::Orphan< ::cereal::CustomReserved2>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED2);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved2>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved2> Event::Builder::disownCustomReserved2() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved2>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved3() const {
  return which() == Event::CUSTOM_RESERVED3;
}
inline bool Event::Builder::isCustomReserved3() {
  return which() == Event::CUSTOM_RESERVED3;
}
inline bool Event::Reader::hasCustomReserved3() const {
  if (which() != Event::CUSTOM_RESERVED3) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved3() {
  if (which() != Event::CUSTOM_RESERVED3) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved3::Reader Event::Reader::getCustomReserved3() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved3>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved3::Builder Event::Builder::getCustomReserved3() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved3>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved3( ::cereal::CustomReserved3::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED3);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved3>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved3::Builder Event::Builder::initCustomReserved3() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED3);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved3>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved3(
    ::capnp::Orphan< ::cereal::CustomReserved3>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED3);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved3>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved3> Event::Builder::disownCustomReserved3() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved3>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved4() const {
  return which() == Event::CUSTOM_RESERVED4;
}
inline bool Event::Builder::isCustomReserved4() {
  return which() == Event::CUSTOM_RESERVED4;
}
inline bool Event::Reader::hasCustomReserved4() const {
  if (which() != Event::CUSTOM_RESERVED4) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved4() {
  if (which() != Event::CUSTOM_RESERVED4) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved4::Reader Event::Reader::getCustomReserved4() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED4),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved4>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved4::Builder Event::Builder::getCustomReserved4() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED4),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved4>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved4( ::cereal::CustomReserved4::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED4);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved4>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved4::Builder Event::Builder::initCustomReserved4() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED4);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved4>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved4(
    ::capnp::Orphan< ::cereal::CustomReserved4>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED4);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved4>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved4> Event::Builder::disownCustomReserved4() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED4),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved4>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved5() const {
  return which() == Event::CUSTOM_RESERVED5;
}
inline bool Event::Builder::isCustomReserved5() {
  return which() == Event::CUSTOM_RESERVED5;
}
inline bool Event::Reader::hasCustomReserved5() const {
  if (which() != Event::CUSTOM_RESERVED5) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved5() {
  if (which() != Event::CUSTOM_RESERVED5) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved5::Reader Event::Reader::getCustomReserved5() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED5),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved5>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved5::Builder Event::Builder::getCustomReserved5() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED5),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved5>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved5( ::cereal::CustomReserved5::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED5);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved5>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved5::Builder Event::Builder::initCustomReserved5() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED5);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved5>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved5(
    ::capnp::Orphan< ::cereal::CustomReserved5>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED5);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved5>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved5> Event::Builder::disownCustomReserved5() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED5),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved5>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved6() const {
  return which() == Event::CUSTOM_RESERVED6;
}
inline bool Event::Builder::isCustomReserved6() {
  return which() == Event::CUSTOM_RESERVED6;
}
inline bool Event::Reader::hasCustomReserved6() const {
  if (which() != Event::CUSTOM_RESERVED6) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved6() {
  if (which() != Event::CUSTOM_RESERVED6) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved6::Reader Event::Reader::getCustomReserved6() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED6),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved6>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved6::Builder Event::Builder::getCustomReserved6() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED6),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved6>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved6( ::cereal::CustomReserved6::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED6);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved6>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved6::Builder Event::Builder::initCustomReserved6() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED6);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved6>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved6(
    ::capnp::Orphan< ::cereal::CustomReserved6>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED6);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved6>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved6> Event::Builder::disownCustomReserved6() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED6),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved6>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved7() const {
  return which() == Event::CUSTOM_RESERVED7;
}
inline bool Event::Builder::isCustomReserved7() {
  return which() == Event::CUSTOM_RESERVED7;
}
inline bool Event::Reader::hasCustomReserved7() const {
  if (which() != Event::CUSTOM_RESERVED7) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved7() {
  if (which() != Event::CUSTOM_RESERVED7) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved7::Reader Event::Reader::getCustomReserved7() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED7),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved7>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved7::Builder Event::Builder::getCustomReserved7() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED7),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved7>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved7( ::cereal::CustomReserved7::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED7);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved7>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved7::Builder Event::Builder::initCustomReserved7() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED7);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved7>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved7(
    ::capnp::Orphan< ::cereal::CustomReserved7>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED7);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved7>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved7> Event::Builder::disownCustomReserved7() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED7),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved7>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved8() const {
  return which() == Event::CUSTOM_RESERVED8;
}
inline bool Event::Builder::isCustomReserved8() {
  return which() == Event::CUSTOM_RESERVED8;
}
inline bool Event::Reader::hasCustomReserved8() const {
  if (which() != Event::CUSTOM_RESERVED8) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved8() {
  if (which() != Event::CUSTOM_RESERVED8) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved8::Reader Event::Reader::getCustomReserved8() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved8>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved8::Builder Event::Builder::getCustomReserved8() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved8>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved8( ::cereal::CustomReserved8::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED8);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved8>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved8::Builder Event::Builder::initCustomReserved8() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED8);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved8>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved8(
    ::capnp::Orphan< ::cereal::CustomReserved8>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED8);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved8>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved8> Event::Builder::disownCustomReserved8() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved8>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved9() const {
  return which() == Event::CUSTOM_RESERVED9;
}
inline bool Event::Builder::isCustomReserved9() {
  return which() == Event::CUSTOM_RESERVED9;
}
inline bool Event::Reader::hasCustomReserved9() const {
  if (which() != Event::CUSTOM_RESERVED9) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved9() {
  if (which() != Event::CUSTOM_RESERVED9) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved9::Reader Event::Reader::getCustomReserved9() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED9),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved9>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved9::Builder Event::Builder::getCustomReserved9() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED9),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved9>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved9( ::cereal::CustomReserved9::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED9);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved9>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved9::Builder Event::Builder::initCustomReserved9() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED9);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved9>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved9(
    ::capnp::Orphan< ::cereal::CustomReserved9>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED9);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved9>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved9> Event::Builder::disownCustomReserved9() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED9),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved9>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivestreamRoadEncodeIdx() const {
  return which() == Event::LIVESTREAM_ROAD_ENCODE_IDX;
}
inline bool Event::Builder::isLivestreamRoadEncodeIdx() {
  return which() == Event::LIVESTREAM_ROAD_ENCODE_IDX;
}
inline bool Event::Reader::hasLivestreamRoadEncodeIdx() const {
  if (which() != Event::LIVESTREAM_ROAD_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivestreamRoadEncodeIdx() {
  if (which() != Event::LIVESTREAM_ROAD_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getLivestreamRoadEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getLivestreamRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivestreamRoadEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initLivestreamRoadEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_ROAD_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivestreamRoadEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownLivestreamRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivestreamWideRoadEncodeIdx() const {
  return which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX;
}
inline bool Event::Builder::isLivestreamWideRoadEncodeIdx() {
  return which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX;
}
inline bool Event::Reader::hasLivestreamWideRoadEncodeIdx() const {
  if (which() != Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivestreamWideRoadEncodeIdx() {
  if (which() != Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getLivestreamWideRoadEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getLivestreamWideRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivestreamWideRoadEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initLivestreamWideRoadEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivestreamWideRoadEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownLivestreamWideRoadEncodeIdx() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivestreamDriverEncodeIdx() const {
  return which() == Event::LIVESTREAM_DRIVER_ENCODE_IDX;
}
inline bool Event::Builder::isLivestreamDriverEncodeIdx() {
  return which() == Event::LIVESTREAM_DRIVER_ENCODE_IDX;
}
inline bool Event::Reader::hasLivestreamDriverEncodeIdx() const {
  if (which() != Event::LIVESTREAM_DRIVER_ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivestreamDriverEncodeIdx() {
  if (which() != Event::LIVESTREAM_DRIVER_ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getLivestreamDriverEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_DRIVER_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getLivestreamDriverEncodeIdx() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_DRIVER_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivestreamDriverEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_DRIVER_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initLivestreamDriverEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_DRIVER_ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivestreamDriverEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_DRIVER_ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownLivestreamDriverEncodeIdx() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_DRIVER_ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivestreamRoadEncodeData() const {
  return which() == Event::LIVESTREAM_ROAD_ENCODE_DATA;
}
inline bool Event::Builder::isLivestreamRoadEncodeData() {
  return which() == Event::LIVESTREAM_ROAD_ENCODE_DATA;
}
inline bool Event::Reader::hasLivestreamRoadEncodeData() const {
  if (which() != Event::LIVESTREAM_ROAD_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivestreamRoadEncodeData() {
  if (which() != Event::LIVESTREAM_ROAD_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getLivestreamRoadEncodeData() const {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getLivestreamRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivestreamRoadEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initLivestreamRoadEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_ROAD_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivestreamRoadEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownLivestreamRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivestreamWideRoadEncodeData() const {
  return which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA;
}
inline bool Event::Builder::isLivestreamWideRoadEncodeData() {
  return which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA;
}
inline bool Event::Reader::hasLivestreamWideRoadEncodeData() const {
  if (which() != Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivestreamWideRoadEncodeData() {
  if (which() != Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getLivestreamWideRoadEncodeData() const {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getLivestreamWideRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivestreamWideRoadEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initLivestreamWideRoadEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivestreamWideRoadEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownLivestreamWideRoadEncodeData() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_WIDE_ROAD_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivestreamDriverEncodeData() const {
  return which() == Event::LIVESTREAM_DRIVER_ENCODE_DATA;
}
inline bool Event::Builder::isLivestreamDriverEncodeData() {
  return which() == Event::LIVESTREAM_DRIVER_ENCODE_DATA;
}
inline bool Event::Reader::hasLivestreamDriverEncodeData() const {
  if (which() != Event::LIVESTREAM_DRIVER_ENCODE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivestreamDriverEncodeData() {
  if (which() != Event::LIVESTREAM_DRIVER_ENCODE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeData::Reader Event::Reader::getLivestreamDriverEncodeData() const {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_DRIVER_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeData::Builder Event::Builder::getLivestreamDriverEncodeData() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_DRIVER_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivestreamDriverEncodeData( ::cereal::EncodeData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_DRIVER_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeData::Builder Event::Builder::initLivestreamDriverEncodeData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_DRIVER_ENCODE_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivestreamDriverEncodeData(
    ::capnp::Orphan< ::cereal::EncodeData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVESTREAM_DRIVER_ENCODE_DATA);
  ::capnp::_::PointerHelpers< ::cereal::EncodeData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeData> Event::Builder::disownLivestreamDriverEncodeData() {
  KJ_IREQUIRE((which() == Event::LIVESTREAM_DRIVER_ENCODE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTemperatureSensor2() const {
  return which() == Event::TEMPERATURE_SENSOR2;
}
inline bool Event::Builder::isTemperatureSensor2() {
  return which() == Event::TEMPERATURE_SENSOR2;
}
inline bool Event::Reader::hasTemperatureSensor2() const {
  if (which() != Event::TEMPERATURE_SENSOR2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTemperatureSensor2() {
  if (which() != Event::TEMPERATURE_SENSOR2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getTemperatureSensor2() const {
  KJ_IREQUIRE((which() == Event::TEMPERATURE_SENSOR2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getTemperatureSensor2() {
  KJ_IREQUIRE((which() == Event::TEMPERATURE_SENSOR2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTemperatureSensor2( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEMPERATURE_SENSOR2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initTemperatureSensor2() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEMPERATURE_SENSOR2);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptTemperatureSensor2(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEMPERATURE_SENSOR2);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownTemperatureSensor2() {
  KJ_IREQUIRE((which() == Event::TEMPERATURE_SENSOR2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReservedRawData0() const {
  return which() == Event::CUSTOM_RESERVED_RAW_DATA0;
}
inline bool Event::Builder::isCustomReservedRawData0() {
  return which() == Event::CUSTOM_RESERVED_RAW_DATA0;
}
inline bool Event::Reader::hasCustomReservedRawData0() const {
  if (which() != Event::CUSTOM_RESERVED_RAW_DATA0) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReservedRawData0() {
  if (which() != Event::CUSTOM_RESERVED_RAW_DATA0) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getCustomReservedRawData0() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA0),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getCustomReservedRawData0() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA0),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReservedRawData0( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA0);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initCustomReservedRawData0(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA0);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCustomReservedRawData0(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA0);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownCustomReservedRawData0() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA0),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReservedRawData1() const {
  return which() == Event::CUSTOM_RESERVED_RAW_DATA1;
}
inline bool Event::Builder::isCustomReservedRawData1() {
  return which() == Event::CUSTOM_RESERVED_RAW_DATA1;
}
inline bool Event::Reader::hasCustomReservedRawData1() const {
  if (which() != Event::CUSTOM_RESERVED_RAW_DATA1) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReservedRawData1() {
  if (which() != Event::CUSTOM_RESERVED_RAW_DATA1) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getCustomReservedRawData1() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA1),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getCustomReservedRawData1() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA1),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReservedRawData1( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA1);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initCustomReservedRawData1(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA1);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCustomReservedRawData1(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA1);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownCustomReservedRawData1() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA1),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReservedRawData2() const {
  return which() == Event::CUSTOM_RESERVED_RAW_DATA2;
}
inline bool Event::Builder::isCustomReservedRawData2() {
  return which() == Event::CUSTOM_RESERVED_RAW_DATA2;
}
inline bool Event::Reader::hasCustomReservedRawData2() const {
  if (which() != Event::CUSTOM_RESERVED_RAW_DATA2) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReservedRawData2() {
  if (which() != Event::CUSTOM_RESERVED_RAW_DATA2) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getCustomReservedRawData2() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getCustomReservedRawData2() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReservedRawData2( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA2);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initCustomReservedRawData2(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA2);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCustomReservedRawData2(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED_RAW_DATA2);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownCustomReservedRawData2() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED_RAW_DATA2),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarOutput() const {
  return which() == Event::CAR_OUTPUT;
}
inline bool Event::Builder::isCarOutput() {
  return which() == Event::CAR_OUTPUT;
}
inline bool Event::Reader::hasCarOutput() const {
  if (which() != Event::CAR_OUTPUT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarOutput() {
  if (which() != Event::CAR_OUTPUT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarOutput::Reader Event::Reader::getCarOutput() const {
  KJ_IREQUIRE((which() == Event::CAR_OUTPUT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarOutput>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarOutput::Builder Event::Builder::getCarOutput() {
  KJ_IREQUIRE((which() == Event::CAR_OUTPUT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarOutput>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarOutput( ::cereal::CarOutput::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_OUTPUT);
  ::capnp::_::PointerHelpers< ::cereal::CarOutput>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarOutput::Builder Event::Builder::initCarOutput() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_OUTPUT);
  return ::capnp::_::PointerHelpers< ::cereal::CarOutput>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarOutput(
    ::capnp::Orphan< ::cereal::CarOutput>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_OUTPUT);
  ::capnp::_::PointerHelpers< ::cereal::CarOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarOutput> Event::Builder::disownCarOutput() {
  KJ_IREQUIRE((which() == Event::CAR_OUTPUT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDrivingModelData() const {
  return which() == Event::DRIVING_MODEL_DATA;
}
inline bool Event::Builder::isDrivingModelData() {
  return which() == Event::DRIVING_MODEL_DATA;
}
inline bool Event::Reader::hasDrivingModelData() const {
  if (which() != Event::DRIVING_MODEL_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDrivingModelData() {
  if (which() != Event::DRIVING_MODEL_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DrivingModelData::Reader Event::Reader::getDrivingModelData() const {
  KJ_IREQUIRE((which() == Event::DRIVING_MODEL_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DrivingModelData::Builder Event::Builder::getDrivingModelData() {
  KJ_IREQUIRE((which() == Event::DRIVING_MODEL_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDrivingModelData( ::cereal::DrivingModelData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVING_MODEL_DATA);
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DrivingModelData::Builder Event::Builder::initDrivingModelData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVING_MODEL_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDrivingModelData(
    ::capnp::Orphan< ::cereal::DrivingModelData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVING_MODEL_DATA);
  ::capnp::_::PointerHelpers< ::cereal::DrivingModelData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DrivingModelData> Event::Builder::disownDrivingModelData() {
  KJ_IREQUIRE((which() == Event::DRIVING_MODEL_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DrivingModelData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLivePose() const {
  return which() == Event::LIVE_POSE;
}
inline bool Event::Builder::isLivePose() {
  return which() == Event::LIVE_POSE;
}
inline bool Event::Reader::hasLivePose() const {
  if (which() != Event::LIVE_POSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLivePose() {
  if (which() != Event::LIVE_POSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LivePose::Reader Event::Reader::getLivePose() const {
  KJ_IREQUIRE((which() == Event::LIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LivePose>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LivePose::Builder Event::Builder::getLivePose() {
  KJ_IREQUIRE((which() == Event::LIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LivePose>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLivePose( ::cereal::LivePose::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_POSE);
  ::capnp::_::PointerHelpers< ::cereal::LivePose>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LivePose::Builder Event::Builder::initLivePose() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_POSE);
  return ::capnp::_::PointerHelpers< ::cereal::LivePose>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLivePose(
    ::capnp::Orphan< ::cereal::LivePose>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_POSE);
  ::capnp::_::PointerHelpers< ::cereal::LivePose>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LivePose> Event::Builder::disownLivePose() {
  KJ_IREQUIRE((which() == Event::LIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LivePose>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSelfdriveState() const {
  return which() == Event::SELFDRIVE_STATE;
}
inline bool Event::Builder::isSelfdriveState() {
  return which() == Event::SELFDRIVE_STATE;
}
inline bool Event::Reader::hasSelfdriveState() const {
  if (which() != Event::SELFDRIVE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSelfdriveState() {
  if (which() != Event::SELFDRIVE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SelfdriveState::Reader Event::Reader::getSelfdriveState() const {
  KJ_IREQUIRE((which() == Event::SELFDRIVE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SelfdriveState::Builder Event::Builder::getSelfdriveState() {
  KJ_IREQUIRE((which() == Event::SELFDRIVE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSelfdriveState( ::cereal::SelfdriveState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SELFDRIVE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::SelfdriveState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SelfdriveState::Builder Event::Builder::initSelfdriveState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SELFDRIVE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSelfdriveState(
    ::capnp::Orphan< ::cereal::SelfdriveState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SELFDRIVE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::SelfdriveState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SelfdriveState> Event::Builder::disownSelfdriveState() {
  KJ_IREQUIRE((which() == Event::SELFDRIVE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SelfdriveState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTracks() const {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Builder::isLiveTracks() {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Reader::hasLiveTracks() const {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTracks() {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarData::Reader Event::Reader::getLiveTracks() const {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarData::Builder Event::Builder::getLiveTracks() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTracks( ::cereal::RadarData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::cereal::RadarData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarData::Builder Event::Builder::initLiveTracks() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  return ::capnp::_::PointerHelpers< ::cereal::RadarData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveTracks(
    ::capnp::Orphan< ::cereal::RadarData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::cereal::RadarData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarData> Event::Builder::disownLiveTracks() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverAssistance() const {
  return which() == Event::DRIVER_ASSISTANCE;
}
inline bool Event::Builder::isDriverAssistance() {
  return which() == Event::DRIVER_ASSISTANCE;
}
inline bool Event::Reader::hasDriverAssistance() const {
  if (which() != Event::DRIVER_ASSISTANCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverAssistance() {
  if (which() != Event::DRIVER_ASSISTANCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverAssistance::Reader Event::Reader::getDriverAssistance() const {
  KJ_IREQUIRE((which() == Event::DRIVER_ASSISTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverAssistance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverAssistance::Builder Event::Builder::getDriverAssistance() {
  KJ_IREQUIRE((which() == Event::DRIVER_ASSISTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverAssistance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverAssistance( ::cereal::DriverAssistance::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ASSISTANCE);
  ::capnp::_::PointerHelpers< ::cereal::DriverAssistance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverAssistance::Builder Event::Builder::initDriverAssistance() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ASSISTANCE);
  return ::capnp::_::PointerHelpers< ::cereal::DriverAssistance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverAssistance(
    ::capnp::Orphan< ::cereal::DriverAssistance>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_ASSISTANCE);
  ::capnp::_::PointerHelpers< ::cereal::DriverAssistance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverAssistance> Event::Builder::disownDriverAssistance() {
  KJ_IREQUIRE((which() == Event::DRIVER_ASSISTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverAssistance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAlertDebug() const {
  return which() == Event::ALERT_DEBUG;
}
inline bool Event::Builder::isAlertDebug() {
  return which() == Event::ALERT_DEBUG;
}
inline bool Event::Reader::hasAlertDebug() const {
  if (which() != Event::ALERT_DEBUG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAlertDebug() {
  if (which() != Event::ALERT_DEBUG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DebugAlert::Reader Event::Reader::getAlertDebug() const {
  KJ_IREQUIRE((which() == Event::ALERT_DEBUG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DebugAlert>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DebugAlert::Builder Event::Builder::getAlertDebug() {
  KJ_IREQUIRE((which() == Event::ALERT_DEBUG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DebugAlert>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAlertDebug( ::cereal::DebugAlert::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ALERT_DEBUG);
  ::capnp::_::PointerHelpers< ::cereal::DebugAlert>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DebugAlert::Builder Event::Builder::initAlertDebug() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ALERT_DEBUG);
  return ::capnp::_::PointerHelpers< ::cereal::DebugAlert>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAlertDebug(
    ::capnp::Orphan< ::cereal::DebugAlert>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ALERT_DEBUG);
  ::capnp::_::PointerHelpers< ::cereal::DebugAlert>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DebugAlert> Event::Builder::disownAlertDebug() {
  KJ_IREQUIRE((which() == Event::ALERT_DEBUG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DebugAlert>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOnroadEvents() const {
  return which() == Event::ONROAD_EVENTS;
}
inline bool Event::Builder::isOnroadEvents() {
  return which() == Event::ONROAD_EVENTS;
}
inline bool Event::Reader::hasOnroadEvents() const {
  if (which() != Event::ONROAD_EVENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOnroadEvents() {
  if (which() != Event::ONROAD_EVENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getOnroadEvents() const {
  KJ_IREQUIRE((which() == Event::ONROAD_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getOnroadEvents() {
  KJ_IREQUIRE((which() == Event::ONROAD_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOnroadEvents( ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ONROAD_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initOnroadEvents(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ONROAD_EVENTS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptOnroadEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ONROAD_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>> Event::Builder::disownOnroadEvents() {
  KJ_IREQUIRE((which() == Event::ONROAD_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTouch() const {
  return which() == Event::TOUCH;
}
inline bool Event::Builder::isTouch() {
  return which() == Event::TOUCH;
}
inline bool Event::Reader::hasTouch() const {
  if (which() != Event::TOUCH) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTouch() {
  if (which() != Event::TOUCH) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Reader Event::Reader::getTouch() const {
  KJ_IREQUIRE((which() == Event::TOUCH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Builder Event::Builder::getTouch() {
  KJ_IREQUIRE((which() == Event::TOUCH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTouch( ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TOUCH);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>::Builder Event::Builder::initTouch(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TOUCH);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptTouch(
    ::capnp::Orphan< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TOUCH);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>> Event::Builder::disownTouch() {
  KJ_IREQUIRE((which() == Event::TOUCH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::Touch,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved10() const {
  return which() == Event::CUSTOM_RESERVED10;
}
inline bool Event::Builder::isCustomReserved10() {
  return which() == Event::CUSTOM_RESERVED10;
}
inline bool Event::Reader::hasCustomReserved10() const {
  if (which() != Event::CUSTOM_RESERVED10) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved10() {
  if (which() != Event::CUSTOM_RESERVED10) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved10::Reader Event::Reader::getCustomReserved10() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED10),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved10>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved10::Builder Event::Builder::getCustomReserved10() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED10),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved10>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved10( ::cereal::CustomReserved10::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED10);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved10>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved10::Builder Event::Builder::initCustomReserved10() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED10);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved10>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved10(
    ::capnp::Orphan< ::cereal::CustomReserved10>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED10);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved10>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved10> Event::Builder::disownCustomReserved10() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED10),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved10>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved11() const {
  return which() == Event::CUSTOM_RESERVED11;
}
inline bool Event::Builder::isCustomReserved11() {
  return which() == Event::CUSTOM_RESERVED11;
}
inline bool Event::Reader::hasCustomReserved11() const {
  if (which() != Event::CUSTOM_RESERVED11) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved11() {
  if (which() != Event::CUSTOM_RESERVED11) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved11::Reader Event::Reader::getCustomReserved11() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED11),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved11>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved11::Builder Event::Builder::getCustomReserved11() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED11),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved11>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved11( ::cereal::CustomReserved11::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED11);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved11>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved11::Builder Event::Builder::initCustomReserved11() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED11);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved11>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved11(
    ::capnp::Orphan< ::cereal::CustomReserved11>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED11);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved11>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved11> Event::Builder::disownCustomReserved11() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED11),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved11>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved12() const {
  return which() == Event::CUSTOM_RESERVED12;
}
inline bool Event::Builder::isCustomReserved12() {
  return which() == Event::CUSTOM_RESERVED12;
}
inline bool Event::Reader::hasCustomReserved12() const {
  if (which() != Event::CUSTOM_RESERVED12) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved12() {
  if (which() != Event::CUSTOM_RESERVED12) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved12::Reader Event::Reader::getCustomReserved12() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED12),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved12>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved12::Builder Event::Builder::getCustomReserved12() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED12),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved12>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved12( ::cereal::CustomReserved12::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED12);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved12>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved12::Builder Event::Builder::initCustomReserved12() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED12);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved12>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved12(
    ::capnp::Orphan< ::cereal::CustomReserved12>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED12);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved12>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved12> Event::Builder::disownCustomReserved12() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED12),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved12>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved13() const {
  return which() == Event::CUSTOM_RESERVED13;
}
inline bool Event::Builder::isCustomReserved13() {
  return which() == Event::CUSTOM_RESERVED13;
}
inline bool Event::Reader::hasCustomReserved13() const {
  if (which() != Event::CUSTOM_RESERVED13) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved13() {
  if (which() != Event::CUSTOM_RESERVED13) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved13::Reader Event::Reader::getCustomReserved13() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED13),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved13>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved13::Builder Event::Builder::getCustomReserved13() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED13),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved13>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved13( ::cereal::CustomReserved13::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED13);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved13>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved13::Builder Event::Builder::initCustomReserved13() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED13);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved13>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved13(
    ::capnp::Orphan< ::cereal::CustomReserved13>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED13);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved13>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved13> Event::Builder::disownCustomReserved13() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED13),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved13>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved14() const {
  return which() == Event::CUSTOM_RESERVED14;
}
inline bool Event::Builder::isCustomReserved14() {
  return which() == Event::CUSTOM_RESERVED14;
}
inline bool Event::Reader::hasCustomReserved14() const {
  if (which() != Event::CUSTOM_RESERVED14) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved14() {
  if (which() != Event::CUSTOM_RESERVED14) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved14::Reader Event::Reader::getCustomReserved14() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED14),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved14>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved14::Builder Event::Builder::getCustomReserved14() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED14),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved14>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved14( ::cereal::CustomReserved14::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED14);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved14>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved14::Builder Event::Builder::initCustomReserved14() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED14);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved14>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved14(
    ::capnp::Orphan< ::cereal::CustomReserved14>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED14);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved14>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved14> Event::Builder::disownCustomReserved14() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED14),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved14>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved15() const {
  return which() == Event::CUSTOM_RESERVED15;
}
inline bool Event::Builder::isCustomReserved15() {
  return which() == Event::CUSTOM_RESERVED15;
}
inline bool Event::Reader::hasCustomReserved15() const {
  if (which() != Event::CUSTOM_RESERVED15) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved15() {
  if (which() != Event::CUSTOM_RESERVED15) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved15::Reader Event::Reader::getCustomReserved15() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED15),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved15>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved15::Builder Event::Builder::getCustomReserved15() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED15),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved15>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved15( ::cereal::CustomReserved15::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED15);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved15>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved15::Builder Event::Builder::initCustomReserved15() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED15);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved15>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved15(
    ::capnp::Orphan< ::cereal::CustomReserved15>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED15);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved15>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved15> Event::Builder::disownCustomReserved15() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED15),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved15>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved16() const {
  return which() == Event::CUSTOM_RESERVED16;
}
inline bool Event::Builder::isCustomReserved16() {
  return which() == Event::CUSTOM_RESERVED16;
}
inline bool Event::Reader::hasCustomReserved16() const {
  if (which() != Event::CUSTOM_RESERVED16) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved16() {
  if (which() != Event::CUSTOM_RESERVED16) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved16::Reader Event::Reader::getCustomReserved16() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved16>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved16::Builder Event::Builder::getCustomReserved16() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved16>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved16( ::cereal::CustomReserved16::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED16);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved16>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved16::Builder Event::Builder::initCustomReserved16() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED16);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved16>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved16(
    ::capnp::Orphan< ::cereal::CustomReserved16>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED16);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved16>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved16> Event::Builder::disownCustomReserved16() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved16>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved17() const {
  return which() == Event::CUSTOM_RESERVED17;
}
inline bool Event::Builder::isCustomReserved17() {
  return which() == Event::CUSTOM_RESERVED17;
}
inline bool Event::Reader::hasCustomReserved17() const {
  if (which() != Event::CUSTOM_RESERVED17) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved17() {
  if (which() != Event::CUSTOM_RESERVED17) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved17::Reader Event::Reader::getCustomReserved17() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED17),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved17>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved17::Builder Event::Builder::getCustomReserved17() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED17),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved17>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved17( ::cereal::CustomReserved17::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED17);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved17>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved17::Builder Event::Builder::initCustomReserved17() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED17);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved17>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved17(
    ::capnp::Orphan< ::cereal::CustomReserved17>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED17);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved17>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved17> Event::Builder::disownCustomReserved17() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED17),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved17>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved18() const {
  return which() == Event::CUSTOM_RESERVED18;
}
inline bool Event::Builder::isCustomReserved18() {
  return which() == Event::CUSTOM_RESERVED18;
}
inline bool Event::Reader::hasCustomReserved18() const {
  if (which() != Event::CUSTOM_RESERVED18) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved18() {
  if (which() != Event::CUSTOM_RESERVED18) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved18::Reader Event::Reader::getCustomReserved18() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED18),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved18>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved18::Builder Event::Builder::getCustomReserved18() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED18),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved18>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved18( ::cereal::CustomReserved18::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED18);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved18>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved18::Builder Event::Builder::initCustomReserved18() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED18);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved18>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved18(
    ::capnp::Orphan< ::cereal::CustomReserved18>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED18);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved18>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved18> Event::Builder::disownCustomReserved18() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED18),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved18>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCustomReserved19() const {
  return which() == Event::CUSTOM_RESERVED19;
}
inline bool Event::Builder::isCustomReserved19() {
  return which() == Event::CUSTOM_RESERVED19;
}
inline bool Event::Reader::hasCustomReserved19() const {
  if (which() != Event::CUSTOM_RESERVED19) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCustomReserved19() {
  if (which() != Event::CUSTOM_RESERVED19) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CustomReserved19::Reader Event::Reader::getCustomReserved19() const {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED19),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved19>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CustomReserved19::Builder Event::Builder::getCustomReserved19() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED19),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved19>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCustomReserved19( ::cereal::CustomReserved19::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED19);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved19>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CustomReserved19::Builder Event::Builder::initCustomReserved19() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED19);
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved19>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCustomReserved19(
    ::capnp::Orphan< ::cereal::CustomReserved19>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CUSTOM_RESERVED19);
  ::capnp::_::PointerHelpers< ::cereal::CustomReserved19>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CustomReserved19> Event::Builder::disownCustomReserved19() {
  KJ_IREQUIRE((which() == Event::CUSTOM_RESERVED19),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CustomReserved19>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveDelay() const {
  return which() == Event::LIVE_DELAY;
}
inline bool Event::Builder::isLiveDelay() {
  return which() == Event::LIVE_DELAY;
}
inline bool Event::Reader::hasLiveDelay() const {
  if (which() != Event::LIVE_DELAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveDelay() {
  if (which() != Event::LIVE_DELAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveDelayData::Reader Event::Reader::getLiveDelay() const {
  KJ_IREQUIRE((which() == Event::LIVE_DELAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveDelayData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveDelayData::Builder Event::Builder::getLiveDelay() {
  KJ_IREQUIRE((which() == Event::LIVE_DELAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveDelayData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveDelay( ::cereal::LiveDelayData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_DELAY);
  ::capnp::_::PointerHelpers< ::cereal::LiveDelayData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveDelayData::Builder Event::Builder::initLiveDelay() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_DELAY);
  return ::capnp::_::PointerHelpers< ::cereal::LiveDelayData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveDelay(
    ::capnp::Orphan< ::cereal::LiveDelayData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_DELAY);
  ::capnp::_::PointerHelpers< ::cereal::LiveDelayData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveDelayData> Event::Builder::disownLiveDelay() {
  KJ_IREQUIRE((which() == Event::LIVE_DELAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveDelayData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRawAudioData() const {
  return which() == Event::RAW_AUDIO_DATA;
}
inline bool Event::Builder::isRawAudioData() {
  return which() == Event::RAW_AUDIO_DATA;
}
inline bool Event::Reader::hasRawAudioData() const {
  if (which() != Event::RAW_AUDIO_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRawAudioData() {
  if (which() != Event::RAW_AUDIO_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AudioData::Reader Event::Reader::getRawAudioData() const {
  KJ_IREQUIRE((which() == Event::RAW_AUDIO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AudioData::Builder Event::Builder::getRawAudioData() {
  KJ_IREQUIRE((which() == Event::RAW_AUDIO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRawAudioData( ::cereal::AudioData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RAW_AUDIO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::AudioData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AudioData::Builder Event::Builder::initRawAudioData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RAW_AUDIO_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRawAudioData(
    ::capnp::Orphan< ::cereal::AudioData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RAW_AUDIO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::AudioData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AudioData> Event::Builder::disownRawAudioData() {
  KJ_IREQUIRE((which() == Event::RAW_AUDIO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AudioData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isBookmarkButton() const {
  return which() == Event::BOOKMARK_BUTTON;
}
inline bool Event::Builder::isBookmarkButton() {
  return which() == Event::BOOKMARK_BUTTON;
}
inline bool Event::Reader::hasBookmarkButton() const {
  if (which() != Event::BOOKMARK_BUTTON) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasBookmarkButton() {
  if (which() != Event::BOOKMARK_BUTTON) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UserBookmark::Reader Event::Reader::getBookmarkButton() const {
  KJ_IREQUIRE((which() == Event::BOOKMARK_BUTTON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UserBookmark::Builder Event::Builder::getBookmarkButton() {
  KJ_IREQUIRE((which() == Event::BOOKMARK_BUTTON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setBookmarkButton( ::cereal::UserBookmark::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOKMARK_BUTTON);
  ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UserBookmark::Builder Event::Builder::initBookmarkButton() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOKMARK_BUTTON);
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptBookmarkButton(
    ::capnp::Orphan< ::cereal::UserBookmark>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOKMARK_BUTTON);
  ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UserBookmark> Event::Builder::disownBookmarkButton() {
  KJ_IREQUIRE((which() == Event::BOOKMARK_BUTTON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UserBookmark>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAudioFeedback() const {
  return which() == Event::AUDIO_FEEDBACK;
}
inline bool Event::Builder::isAudioFeedback() {
  return which() == Event::AUDIO_FEEDBACK;
}
inline bool Event::Reader::hasAudioFeedback() const {
  if (which() != Event::AUDIO_FEEDBACK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAudioFeedback() {
  if (which() != Event::AUDIO_FEEDBACK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AudioFeedback::Reader Event::Reader::getAudioFeedback() const {
  KJ_IREQUIRE((which() == Event::AUDIO_FEEDBACK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AudioFeedback>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AudioFeedback::Builder Event::Builder::getAudioFeedback() {
  KJ_IREQUIRE((which() == Event::AUDIO_FEEDBACK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AudioFeedback>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAudioFeedback( ::cereal::AudioFeedback::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::AUDIO_FEEDBACK);
  ::capnp::_::PointerHelpers< ::cereal::AudioFeedback>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AudioFeedback::Builder Event::Builder::initAudioFeedback() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::AUDIO_FEEDBACK);
  return ::capnp::_::PointerHelpers< ::cereal::AudioFeedback>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAudioFeedback(
    ::capnp::Orphan< ::cereal::AudioFeedback>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::AUDIO_FEEDBACK);
  ::capnp::_::PointerHelpers< ::cereal::AudioFeedback>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AudioFeedback> Event::Builder::disownAudioFeedback() {
  KJ_IREQUIRE((which() == Event::AUDIO_FEEDBACK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AudioFeedback>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

