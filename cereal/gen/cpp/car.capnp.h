// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: car.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9b1657f34caf3ad3);
CAPNP_DECLARE_SCHEMA(baa8c5d505f727de);
enum class EventName_baa8c5d505f727de: uint16_t {
  CAN_ERROR,
  STEER_UNAVAILABLE,
  BRAKE_UNAVAILABLE_D_E_P_R_E_C_A_T_E_D,
  GAS_UNAVAILABLE_D_E_P_R_E_C_A_T_E_D,
  WRONG_GEAR,
  DOOR_OPEN,
  SEATBELT_NOT_LATCHED,
  ESP_DISABLED,
  WRONG_CAR_MODE,
  STEER_TEMP_UNAVAILABLE,
  REVERSE_GEAR,
  BUTTON_CANCEL,
  BUTTON_ENABLE,
  PEDAL_PRESSED,
  CRUISE_DISABLED,
  RADAR_CAN_ERROR_D_E_P_R_E_C_A_T_E_D,
  DATA_NEEDED_D_E_P_R_E_C_A_T_E_D,
  SPEED_TOO_LOW,
  OUT_OF_SPACE,
  OVERHEAT,
  CALIBRATION_INCOMPLETE,
  CALIBRATION_INVALID,
  CONTROLS_MISMATCH,
  PCM_ENABLE,
  PCM_DISABLE,
  NO_TARGET_D_E_P_R_E_C_A_T_E_D,
  RADAR_FAULT,
  MODEL_COMM_ISSUE_D_E_P_R_E_C_A_T_E_D,
  BRAKE_HOLD,
  PARK_BRAKE,
  MANUAL_RESTART,
  LOW_SPEED_LOCKOUT_D_E_P_R_E_C_A_T_E_D,
  PLANNER_ERROR_D_E_P_R_E_C_A_T_E_D,
  IPAS_OVERRIDE_D_E_P_R_E_C_A_T_E_D,
  JOYSTICK_DEBUG,
  STEER_TEMP_UNAVAILABLE_SILENT,
  RESUME_REQUIRED,
  PRE_DRIVER_DISTRACTED,
  PROMPT_DRIVER_DISTRACTED,
  DRIVER_DISTRACTED,
  GEOFENCE_D_E_P_R_E_C_A_T_E_D,
  DRIVER_MONITOR_ON_D_E_P_R_E_C_A_T_E_D,
  DRIVER_MONITOR_OFF_D_E_P_R_E_C_A_T_E_D,
  PRE_DRIVER_UNRESPONSIVE,
  PROMPT_DRIVER_UNRESPONSIVE,
  DRIVER_UNRESPONSIVE,
  BELOW_STEER_SPEED,
  CALIBRATION_PROGRESS_D_E_P_R_E_C_A_T_E_D,
  LOW_BATTERY,
  INVALID_GIRAFFE_HONDA_D_E_P_R_E_C_A_T_E_D,
  PARAMSD_TEMPORARY_ERROR,
  ACC_FAULTED,
  SENSOR_DATA_INVALID,
  COMM_ISSUE,
  TOO_DISTRACTED,
  POSENET_INVALID,
  SOUNDS_UNAVAILABLE_D_E_P_R_E_C_A_T_E_D,
  PRE_LANE_CHANGE_LEFT,
  PRE_LANE_CHANGE_RIGHT,
  LANE_CHANGE,
  INVALID_GIRAFFE_TOYOTA_D_E_P_R_E_C_A_T_E_D,
  INTERNET_CONNECTIVITY_NEEDED_D_E_P_R_E_C_A_T_E_D,
  COMMUNITY_FEATURE_DISALLOWED_D_E_P_R_E_C_A_T_E_D,
  LOW_MEMORY,
  STOCK_AEB,
  LDW,
  CAR_UNRECOGNIZED,
  RADAR_COMM_ISSUE_D_E_P_R_E_C_A_T_E_D,
  DRIVER_MONITOR_LOW_ACC_D_E_P_R_E_C_A_T_E_D,
  INVALID_LKAS_SETTING,
  SPEED_TOO_HIGH,
  LANE_CHANGE_BLOCKED,
  RELAY_MALFUNCTION,
  PRE_ENABLE_STANDSTILL,
  STOCK_FCW,
  STARTUP,
  STARTUP_NO_CAR,
  STARTUP_NO_CONTROL,
  STARTUP_MASTER,
  FCW,
  STEER_SATURATED,
  WHITE_PANDA_UNSUPPORTED_D_E_P_R_E_C_A_T_E_D,
  STARTUP_ONEPLUS_D_E_P_R_E_C_A_T_E_D,
  COMM_ISSUE_WARNING_D_E_P_R_E_C_A_T_E_D,
  BELOW_ENGAGE_SPEED,
  NO_GPS,
  FOCUS_RECOVER_ACTIVE_D_E_P_R_E_C_A_T_E_D,
  WRONG_CRUISE_MODE,
  NEOS_UPDATE_REQUIRED_D_E_P_R_E_C_A_T_E_D,
  MODELD_LAGGING,
  DEVICE_FALLING,
  FAN_MALFUNCTION,
  CAMERA_MALFUNCTION,
  MODEL_LAG_WARNING_D_E_P_R_E_C_A_T_E_D,
  GPS_MALFUNCTION_D_E_P_R_E_C_A_T_E_D,
  PROCESS_NOT_RUNNING,
  DASHCAM_MODE,
  STARTUP_FUZZY_FINGERPRINT_D_E_P_R_E_C_A_T_E_D,
  SELFDRIVE_INITIALIZING,
  USB_ERROR,
  ROAD_CAMERA_ERROR_D_E_P_R_E_C_A_T_E_D,
  DRIVER_CAMERA_ERROR_D_E_P_R_E_C_A_T_E_D,
  WIDE_ROAD_CAMERA_ERROR_D_E_P_R_E_C_A_T_E_D,
  LOCATIOND_TEMPORARY_ERROR,
  STARTUP_NO_FW_D_E_P_R_E_C_A_T_E_D,
  HIGH_CPU_USAGE_D_E_P_R_E_C_A_T_E_D,
  CRUISE_MISMATCH,
  LKAS_DISABLED_D_E_P_R_E_C_A_T_E_D,
  GAS_PRESSED_OVERRIDE,
  COMM_ISSUE_AVG_FREQ,
  CAMERA_FRAME_RATE,
  CAN_BUS_MISSING,
  SELFDRIVED_LAGGING,
  RESUME_BLOCKED,
  STEER_OVERRIDE,
  STEER_TIME_LIMIT,
  VEHICLE_SENSORS_INVALID,
  CALIBRATION_RECALIBRATING,
  LOCATIOND_PERMANENT_ERROR,
  PARAMSD_PERMANENT_ERROR,
  ACTUATORS_API_UNAVAILABLE,
  ESP_ACTIVE,
  PERSONALITY_CHANGED,
  AEB,
  LONGITUDINAL_MANEUVER,
  STARTUP_NO_SEC_OC_KEY,
};
CAPNP_DECLARE_ENUM(EventName, baa8c5d505f727de);
CAPNP_DECLARE_SCHEMA(9da4fa09e052903c);
CAPNP_DECLARE_SCHEMA(991a37a6155935a3);
CAPNP_DECLARE_SCHEMA(e64e81478e6e60af);
CAPNP_DECLARE_SCHEMA(e004ca45136f6a89);
enum class GearShifter_e004ca45136f6a89: uint16_t {
  UNKNOWN,
  PARK,
  DRIVE,
  NEUTRAL,
  REVERSE,
  SPORT,
  LOW,
  BRAKE,
  ECO,
  MANUMATIC,
};
CAPNP_DECLARE_ENUM(GearShifter, e004ca45136f6a89);
CAPNP_DECLARE_SCHEMA(ff5ca6835b4acef6);
CAPNP_DECLARE_SCHEMA(e16100205414717c);
enum class Type_e16100205414717c: uint16_t {
  UNKNOWN,
  LEFT_BLINKER,
  RIGHT_BLINKER,
  ACCEL_CRUISE,
  DECEL_CRUISE,
  CANCEL,
  LKAS,
  ALT_BUTTON2,
  MAIN_CRUISE,
  SET_CRUISE,
  RESUME_CRUISE,
  GAP_ADJUST_CRUISE,
};
CAPNP_DECLARE_ENUM(Type, e16100205414717c);
CAPNP_DECLARE_SCHEMA(888ad6581cf0aacb);
CAPNP_DECLARE_SCHEMA(e8a86679ebba76ad);
CAPNP_DECLARE_SCHEMA(8ff333ebac1fdf36);
CAPNP_DECLARE_SCHEMA(df7276c3de4fc23d);
enum class ErrorDEPRECATED_df7276c3de4fc23d: uint16_t {
  CAN_ERROR,
  FAULT,
  WRONG_CONFIG,
};
CAPNP_DECLARE_ENUM(ErrorDEPRECATED, df7276c3de4fc23d);
CAPNP_DECLARE_SCHEMA(f78829049ab814af);
CAPNP_DECLARE_SCHEMA(e97275a919432828);
CAPNP_DECLARE_SCHEMA(e40f3a917d908282);
enum class LongControlState_e40f3a917d908282: uint16_t {
  OFF,
  PID,
  STOPPING,
  STARTING,
};
CAPNP_DECLARE_ENUM(LongControlState, e40f3a917d908282);
CAPNP_DECLARE_SCHEMA(b20e386e0e0ba8d3);
CAPNP_DECLARE_SCHEMA(d895c87c4eb03a38);
CAPNP_DECLARE_SCHEMA(90d78e84616e17d4);
enum class VisualAlert_90d78e84616e17d4: uint16_t {
  NONE,
  FCW,
  STEER_REQUIRED,
  BRAKE_PRESSED,
  WRONG_GEAR,
  SEATBELT_UNBUCKLED,
  SPEED_TOO_HIGH,
  LDW,
};
CAPNP_DECLARE_ENUM(VisualAlert, 90d78e84616e17d4);
CAPNP_DECLARE_SCHEMA(f5a5e26c954e339e);
enum class AudibleAlert_f5a5e26c954e339e: uint16_t {
  NONE,
  ENGAGE,
  DISENGAGE,
  REFUSE,
  WARNING_SOFT,
  WARNING_IMMEDIATE,
  PROMPT,
  PROMPT_REPEAT,
  PROMPT_DISTRACTED,
};
CAPNP_DECLARE_ENUM(AudibleAlert, f5a5e26c954e339e);
CAPNP_DECLARE_SCHEMA(d817d6655115ca85);
CAPNP_DECLARE_SCHEMA(8c69372490aaa9da);
CAPNP_DECLARE_SCHEMA(e836349c6056b0c9);
CAPNP_DECLARE_SCHEMA(b581b23b1c89dda3);
CAPNP_DECLARE_SCHEMA(9622723fcbd14c2e);
CAPNP_DECLARE_SCHEMA(80366e0e804ecc1d);
CAPNP_DECLARE_SCHEMA(c342cefc303e9b8e);
CAPNP_DECLARE_SCHEMA(a334472e045533b3);
CAPNP_DECLARE_SCHEMA(9d151e3f28616a12);
CAPNP_DECLARE_SCHEMA(95551e5b1edaf451);
enum class SafetyModel_95551e5b1edaf451: uint16_t {
  SILENT,
  HONDA_NIDEC,
  TOYOTA,
  ELM327,
  GM,
  HONDA_BOSCH_GIRAFFE,
  FORD,
  CADILLAC,
  HYUNDAI,
  CHRYSLER,
  TESLA,
  SUBARU,
  GM_PASSIVE,
  MAZDA,
  NISSAN,
  VOLKSWAGEN,
  TOYOTA_IPAS,
  ALL_OUTPUT,
  GM_ASCM,
  NO_OUTPUT,
  HONDA_BOSCH,
  VOLKSWAGEN_PQ,
  SUBARU_PREGLOBAL,
  HYUNDAI_LEGACY,
  HYUNDAI_COMMUNITY,
  VOLKSWAGEN_MLB,
  HONGQI,
  BODY,
  HYUNDAI_CANFD,
  VOLKSWAGEN_MQB_EVO,
  CHRYSLER_CUSW,
  PSA,
  FCA_GIORGIO,
  RIVIAN,
  VOLKSWAGEN_MEB,
};
CAPNP_DECLARE_ENUM(SafetyModel, 95551e5b1edaf451);
CAPNP_DECLARE_SCHEMA(d661512be2def77f);
enum class SteerControlType_d661512be2def77f: uint16_t {
  TORQUE,
  ANGLE,
  CURVATURE_D_E_P_R_E_C_A_T_E_D,
};
CAPNP_DECLARE_ENUM(SteerControlType, d661512be2def77f);
CAPNP_DECLARE_SCHEMA(8f162eeb14bfc0ec);
enum class TransmissionType_8f162eeb14bfc0ec: uint16_t {
  UNKNOWN,
  AUTOMATIC,
  MANUAL,
  DIRECT,
  CVT,
};
CAPNP_DECLARE_ENUM(TransmissionType, 8f162eeb14bfc0ec);
CAPNP_DECLARE_SCHEMA(962b56180c9359ce);
CAPNP_DECLARE_SCHEMA(f7119bb759d1d691);
enum class Ecu_f7119bb759d1d691: uint16_t {
  EPS,
  ABS,
  FWD_RADAR,
  FWD_CAMERA,
  ENGINE,
  UNKNOWN,
  DSU,
  PARKING_ADAS,
  TRANSMISSION,
  SRS,
  GATEWAY,
  HUD,
  COMBINATION_METER,
  VSA,
  PROGRAMMED_FUEL_INJECTION,
  ELECTRIC_BRAKE_BOOSTER,
  SHIFT_BY_WIRE,
  DEBUG,
  HYBRID,
  ADAS,
  HVAC,
  CORNER_RADAR,
  EPB,
  TELEMATICS,
  BODY,
};
CAPNP_DECLARE_ENUM(Ecu, f7119bb759d1d691);
CAPNP_DECLARE_SCHEMA(9fd95523d8dc40ce);
enum class FingerprintSource_9fd95523d8dc40ce: uint16_t {
  CAN,
  FW,
  FIXED,
};
CAPNP_DECLARE_ENUM(FingerprintSource, 9fd95523d8dc40ce);
CAPNP_DECLARE_SCHEMA(ff99e3682a833c51);
enum class NetworkLocation_ff99e3682a833c51: uint16_t {
  FWD_CAMERA,
  GATEWAY,
};
CAPNP_DECLARE_ENUM(NetworkLocation, ff99e3682a833c51);
CAPNP_DECLARE_SCHEMA(93fc580a35339568);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct OnroadEventDEPRECATED {
  OnroadEventDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EventName_baa8c5d505f727de EventName;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b1657f34caf3ad3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState {
  CarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct WheelSpeeds;
  struct CruiseState;
  typedef ::capnp::schemas::GearShifter_e004ca45136f6a89 GearShifter;

  struct ButtonEvent;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9da4fa09e052903c, 10, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::WheelSpeeds {
  WheelSpeeds() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(991a37a6155935a3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::CruiseState {
  CruiseState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e64e81478e6e60af, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::ButtonEvent {
  ButtonEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e16100205414717c Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff5ca6835b4acef6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData {
  RadarData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Error;
  struct RadarPoint;
  typedef ::capnp::schemas::ErrorDEPRECATED_df7276c3de4fc23d ErrorDEPRECATED;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(888ad6581cf0aacb, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData::Error {
  Error() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8a86679ebba76ad, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData::RadarPoint {
  RadarPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ff333ebac1fdf36, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl {
  CarControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Actuators;
  struct CruiseControl;
  struct HUDControl;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f78829049ab814af, 4, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::Actuators {
  Actuators() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::LongControlState_e40f3a917d908282 LongControlState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e97275a919432828, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::CruiseControl {
  CruiseControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b20e386e0e0ba8d3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::HUDControl {
  HUDControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::VisualAlert_90d78e84616e17d4 VisualAlert;

  typedef ::capnp::schemas::AudibleAlert_f5a5e26c954e339e AudibleAlert;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d895c87c4eb03a38, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarOutput {
  CarOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d817d6655115ca85, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams {
  CarParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SafetyConfig;
  struct LateralParams;
  struct LateralPIDTuning;
  struct LateralTorqueTuning;
  struct LongitudinalPIDTuning;
  struct LateralINDITuning;
  struct LateralLQRTuning;
  typedef ::capnp::schemas::SafetyModel_95551e5b1edaf451 SafetyModel;

  typedef ::capnp::schemas::SteerControlType_d661512be2def77f SteerControlType;

  typedef ::capnp::schemas::TransmissionType_8f162eeb14bfc0ec TransmissionType;

  struct CarFw;
  typedef ::capnp::schemas::Ecu_f7119bb759d1d691 Ecu;

  typedef ::capnp::schemas::FingerprintSource_9fd95523d8dc40ce FingerprintSource;

  typedef ::capnp::schemas::NetworkLocation_ff99e3682a833c51 NetworkLocation;

  struct LateralTuning;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c69372490aaa9da, 18, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::SafetyConfig {
  SafetyConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e836349c6056b0c9, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralParams {
  LateralParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b581b23b1c89dda3, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralPIDTuning {
  LateralPIDTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9622723fcbd14c2e, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralTorqueTuning {
  LateralTorqueTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80366e0e804ecc1d, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LongitudinalPIDTuning {
  LongitudinalPIDTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c342cefc303e9b8e, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralINDITuning {
  LateralINDITuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a334472e045533b3, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralLQRTuning {
  LateralLQRTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d151e3f28616a12, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::CarFw {
  CarFw() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(962b56180c9359ce, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralTuning {
  LateralTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PID,
    INDI_D_E_P_R_E_C_A_T_E_D,
    LQR_D_E_P_R_E_C_A_T_E_D,
    TORQUE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93fc580a35339568, 18, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class OnroadEventDEPRECATED::Reader {
public:
  typedef OnroadEventDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::OnroadEventDEPRECATED::EventName getName() const;

  inline bool getEnable() const;

  inline bool getNoEntry() const;

  inline bool getWarning() const;

  inline bool getUserDisable() const;

  inline bool getSoftDisable() const;

  inline bool getImmediateDisable() const;

  inline bool getPreEnable() const;

  inline bool getPermanent() const;

  inline bool getOverrideLongitudinal() const;

  inline bool getOverrideLateral() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OnroadEventDEPRECATED::Builder {
public:
  typedef OnroadEventDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::OnroadEventDEPRECATED::EventName getName();
  inline void setName( ::cereal::OnroadEventDEPRECATED::EventName value);

  inline bool getEnable();
  inline void setEnable(bool value);

  inline bool getNoEntry();
  inline void setNoEntry(bool value);

  inline bool getWarning();
  inline void setWarning(bool value);

  inline bool getUserDisable();
  inline void setUserDisable(bool value);

  inline bool getSoftDisable();
  inline void setSoftDisable(bool value);

  inline bool getImmediateDisable();
  inline void setImmediateDisable(bool value);

  inline bool getPreEnable();
  inline void setPreEnable(bool value);

  inline bool getPermanent();
  inline void setPermanent(bool value);

  inline bool getOverrideLongitudinal();
  inline void setOverrideLongitudinal(bool value);

  inline bool getOverrideLateral();
  inline void setOverrideLateral(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OnroadEventDEPRECATED::Pipeline {
public:
  typedef OnroadEventDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::Reader {
public:
  typedef CarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Reader getErrorsDEPRECATED() const;

  inline float getVEgo() const;

  inline bool hasWheelSpeeds() const;
  inline  ::cereal::CarState::WheelSpeeds::Reader getWheelSpeeds() const;

  inline float getGasDEPRECATED() const;

  inline bool getGasPressed() const;

  inline float getBrake() const;

  inline bool getBrakePressed() const;

  inline float getSteeringAngleDeg() const;

  inline float getSteeringTorque() const;

  inline bool getSteeringPressed() const;

  inline bool hasCruiseState() const;
  inline  ::cereal::CarState::CruiseState::Reader getCruiseState() const;

  inline bool hasButtonEvents() const;
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader getButtonEvents() const;

  inline bool hasCanMonoTimesDEPRECATED() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimesDEPRECATED() const;

  inline bool hasEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader getEventsDEPRECATED() const;

  inline  ::cereal::CarState::GearShifter getGearShifter() const;

  inline float getSteeringRateDeg() const;

  inline float getAEgo() const;

  inline float getVEgoRaw() const;

  inline bool getStandstill() const;

  inline bool getBrakeLightsDEPRECATED() const;

  inline bool getLeftBlinker() const;

  inline bool getRightBlinker() const;

  inline float getYawRate() const;

  inline bool getGenericToggle() const;

  inline bool getDoorOpen() const;

  inline bool getSeatbeltUnlatched() const;

  inline bool getCanValid() const;

  inline float getSteeringTorqueEps() const;

  inline bool getClutchPressedDEPRECATED() const;

  inline bool getSteeringRateLimitedDEPRECATED() const;

  inline bool getStockAeb() const;

  inline bool getStockFcw() const;

  inline bool getEspDisabled() const;

  inline bool getLeftBlindspot() const;

  inline bool getRightBlindspot() const;

  inline bool getSteerFaultTemporary() const;

  inline bool getSteerFaultPermanent() const;

  inline float getSteeringAngleOffsetDeg() const;

  inline bool getBrakeHoldActive() const;

  inline bool getParkingBrake() const;

  inline bool getCanTimeout() const;

  inline float getFuelGauge() const;

  inline bool getAccFaulted() const;

  inline bool getCharging() const;

  inline float getVEgoCluster() const;

  inline bool getRegenBraking() const;

  inline float getEngineRpmDEPRECATED() const;

  inline bool getCarFaultedNonCritical() const;

  inline  ::uint32_t getCanErrorCounter() const;

  inline bool getCanRcvTimeoutDEPRECATED() const;

  inline float getCumLagMs() const;

  inline bool getEspActive() const;

  inline bool getVehicleSensorsInvalid() const;

  inline float getVCruise() const;

  inline float getVCruiseCluster() const;

  inline bool getInvalidLkasSetting() const;

  inline bool getLowSpeedAlert() const;

  inline bool getButtonEnable() const;

  inline bool getSteeringDisengage() const;

  inline bool getStockLkas() const;

  inline bool getBlockPcmEnable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::Builder {
public:
  typedef CarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED();
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Builder getErrorsDEPRECATED();
  inline void setErrorsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Reader value);
  inline void setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::OnroadEventDEPRECATED::EventName> value);
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Builder initErrorsDEPRECATED(unsigned int size);
  inline void adoptErrorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>> disownErrorsDEPRECATED();

  inline float getVEgo();
  inline void setVEgo(float value);

  inline bool hasWheelSpeeds();
  inline  ::cereal::CarState::WheelSpeeds::Builder getWheelSpeeds();
  inline void setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value);
  inline  ::cereal::CarState::WheelSpeeds::Builder initWheelSpeeds();
  inline void adoptWheelSpeeds(::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> disownWheelSpeeds();

  inline float getGasDEPRECATED();
  inline void setGasDEPRECATED(float value);

  inline bool getGasPressed();
  inline void setGasPressed(bool value);

  inline float getBrake();
  inline void setBrake(float value);

  inline bool getBrakePressed();
  inline void setBrakePressed(bool value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getSteeringTorque();
  inline void setSteeringTorque(float value);

  inline bool getSteeringPressed();
  inline void setSteeringPressed(bool value);

  inline bool hasCruiseState();
  inline  ::cereal::CarState::CruiseState::Builder getCruiseState();
  inline void setCruiseState( ::cereal::CarState::CruiseState::Reader value);
  inline  ::cereal::CarState::CruiseState::Builder initCruiseState();
  inline void adoptCruiseState(::capnp::Orphan< ::cereal::CarState::CruiseState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::CruiseState> disownCruiseState();

  inline bool hasButtonEvents();
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder getButtonEvents();
  inline void setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder initButtonEvents(unsigned int size);
  inline void adoptButtonEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>> disownButtonEvents();

  inline bool hasCanMonoTimesDEPRECATED();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimesDEPRECATED();
  inline void setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimesDEPRECATED(unsigned int size);
  inline void adoptCanMonoTimesDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimesDEPRECATED();

  inline bool hasEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder getEventsDEPRECATED();
  inline void setEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder initEventsDEPRECATED(unsigned int size);
  inline void adoptEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> disownEventsDEPRECATED();

  inline  ::cereal::CarState::GearShifter getGearShifter();
  inline void setGearShifter( ::cereal::CarState::GearShifter value);

  inline float getSteeringRateDeg();
  inline void setSteeringRateDeg(float value);

  inline float getAEgo();
  inline void setAEgo(float value);

  inline float getVEgoRaw();
  inline void setVEgoRaw(float value);

  inline bool getStandstill();
  inline void setStandstill(bool value);

  inline bool getBrakeLightsDEPRECATED();
  inline void setBrakeLightsDEPRECATED(bool value);

  inline bool getLeftBlinker();
  inline void setLeftBlinker(bool value);

  inline bool getRightBlinker();
  inline void setRightBlinker(bool value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline bool getGenericToggle();
  inline void setGenericToggle(bool value);

  inline bool getDoorOpen();
  inline void setDoorOpen(bool value);

  inline bool getSeatbeltUnlatched();
  inline void setSeatbeltUnlatched(bool value);

  inline bool getCanValid();
  inline void setCanValid(bool value);

  inline float getSteeringTorqueEps();
  inline void setSteeringTorqueEps(float value);

  inline bool getClutchPressedDEPRECATED();
  inline void setClutchPressedDEPRECATED(bool value);

  inline bool getSteeringRateLimitedDEPRECATED();
  inline void setSteeringRateLimitedDEPRECATED(bool value);

  inline bool getStockAeb();
  inline void setStockAeb(bool value);

  inline bool getStockFcw();
  inline void setStockFcw(bool value);

  inline bool getEspDisabled();
  inline void setEspDisabled(bool value);

  inline bool getLeftBlindspot();
  inline void setLeftBlindspot(bool value);

  inline bool getRightBlindspot();
  inline void setRightBlindspot(bool value);

  inline bool getSteerFaultTemporary();
  inline void setSteerFaultTemporary(bool value);

  inline bool getSteerFaultPermanent();
  inline void setSteerFaultPermanent(bool value);

  inline float getSteeringAngleOffsetDeg();
  inline void setSteeringAngleOffsetDeg(float value);

  inline bool getBrakeHoldActive();
  inline void setBrakeHoldActive(bool value);

  inline bool getParkingBrake();
  inline void setParkingBrake(bool value);

  inline bool getCanTimeout();
  inline void setCanTimeout(bool value);

  inline float getFuelGauge();
  inline void setFuelGauge(float value);

  inline bool getAccFaulted();
  inline void setAccFaulted(bool value);

  inline bool getCharging();
  inline void setCharging(bool value);

  inline float getVEgoCluster();
  inline void setVEgoCluster(float value);

  inline bool getRegenBraking();
  inline void setRegenBraking(bool value);

  inline float getEngineRpmDEPRECATED();
  inline void setEngineRpmDEPRECATED(float value);

  inline bool getCarFaultedNonCritical();
  inline void setCarFaultedNonCritical(bool value);

  inline  ::uint32_t getCanErrorCounter();
  inline void setCanErrorCounter( ::uint32_t value);

  inline bool getCanRcvTimeoutDEPRECATED();
  inline void setCanRcvTimeoutDEPRECATED(bool value);

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

  inline bool getEspActive();
  inline void setEspActive(bool value);

  inline bool getVehicleSensorsInvalid();
  inline void setVehicleSensorsInvalid(bool value);

  inline float getVCruise();
  inline void setVCruise(float value);

  inline float getVCruiseCluster();
  inline void setVCruiseCluster(float value);

  inline bool getInvalidLkasSetting();
  inline void setInvalidLkasSetting(bool value);

  inline bool getLowSpeedAlert();
  inline void setLowSpeedAlert(bool value);

  inline bool getButtonEnable();
  inline void setButtonEnable(bool value);

  inline bool getSteeringDisengage();
  inline void setSteeringDisengage(bool value);

  inline bool getStockLkas();
  inline void setStockLkas(bool value);

  inline bool getBlockPcmEnable();
  inline void setBlockPcmEnable(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::Pipeline {
public:
  typedef CarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarState::WheelSpeeds::Pipeline getWheelSpeeds();
  inline  ::cereal::CarState::CruiseState::Pipeline getCruiseState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::WheelSpeeds::Reader {
public:
  typedef WheelSpeeds Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getFl() const;

  inline float getFr() const;

  inline float getRl() const;

  inline float getRr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::WheelSpeeds::Builder {
public:
  typedef WheelSpeeds Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getFl();
  inline void setFl(float value);

  inline float getFr();
  inline void setFr(float value);

  inline float getRl();
  inline void setRl(float value);

  inline float getRr();
  inline void setRr(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::WheelSpeeds::Pipeline {
public:
  typedef WheelSpeeds Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::CruiseState::Reader {
public:
  typedef CruiseState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getSpeed() const;

  inline bool getAvailable() const;

  inline float getSpeedOffsetDEPRECATED() const;

  inline bool getStandstill() const;

  inline bool getNonAdaptive() const;

  inline float getSpeedCluster() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::CruiseState::Builder {
public:
  typedef CruiseState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline bool getAvailable();
  inline void setAvailable(bool value);

  inline float getSpeedOffsetDEPRECATED();
  inline void setSpeedOffsetDEPRECATED(float value);

  inline bool getStandstill();
  inline void setStandstill(bool value);

  inline bool getNonAdaptive();
  inline void setNonAdaptive(bool value);

  inline float getSpeedCluster();
  inline void setSpeedCluster(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::CruiseState::Pipeline {
public:
  typedef CruiseState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::ButtonEvent::Reader {
public:
  typedef ButtonEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPressed() const;

  inline  ::cereal::CarState::ButtonEvent::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::ButtonEvent::Builder {
public:
  typedef ButtonEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPressed();
  inline void setPressed(bool value);

  inline  ::cereal::CarState::ButtonEvent::Type getType();
  inline void setType( ::cereal::CarState::ButtonEvent::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::ButtonEvent::Pipeline {
public:
  typedef ButtonEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::Reader {
public:
  typedef RadarData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader getErrorsDEPRECATED() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasCanMonoTimesDEPRECATED() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getCanMonoTimesDEPRECATED() const;

  inline bool hasErrors() const;
  inline  ::cereal::RadarData::Error::Reader getErrors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::Builder {
public:
  typedef RadarData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED();
  inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder getErrorsDEPRECATED();
  inline void setErrorsDEPRECATED( ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader value);
  inline void setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::RadarData::ErrorDEPRECATED> value);
  inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder initErrorsDEPRECATED(unsigned int size);
  inline void adoptErrorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>> disownErrorsDEPRECATED();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasCanMonoTimesDEPRECATED();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getCanMonoTimesDEPRECATED();
  inline void setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initCanMonoTimesDEPRECATED(unsigned int size);
  inline void adoptCanMonoTimesDEPRECATED(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownCanMonoTimesDEPRECATED();

  inline bool hasErrors();
  inline  ::cereal::RadarData::Error::Builder getErrors();
  inline void setErrors( ::cereal::RadarData::Error::Reader value);
  inline  ::cereal::RadarData::Error::Builder initErrors();
  inline void adoptErrors(::capnp::Orphan< ::cereal::RadarData::Error>&& value);
  inline ::capnp::Orphan< ::cereal::RadarData::Error> disownErrors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::Pipeline {
public:
  typedef RadarData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::RadarData::Error::Pipeline getErrors();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::Error::Reader {
public:
  typedef Error Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCanError() const;

  inline bool getRadarFault() const;

  inline bool getWrongConfig() const;

  inline bool getRadarUnavailableTemporary() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::Error::Builder {
public:
  typedef Error Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCanError();
  inline void setCanError(bool value);

  inline bool getRadarFault();
  inline void setRadarFault(bool value);

  inline bool getWrongConfig();
  inline void setWrongConfig(bool value);

  inline bool getRadarUnavailableTemporary();
  inline void setRadarUnavailableTemporary(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::Error::Pipeline {
public:
  typedef Error Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::RadarPoint::Reader {
public:
  typedef RadarPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getYvRel() const;

  inline bool getMeasured() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::RadarPoint::Builder {
public:
  typedef RadarPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId();
  inline void setTrackId( ::uint64_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getYvRel();
  inline void setYvRel(float value);

  inline bool getMeasured();
  inline void setMeasured(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::RadarPoint::Pipeline {
public:
  typedef RadarPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Reader {
public:
  typedef CarControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getGasDEPRECATED() const;

  inline float getBrakeDEPRECATED() const;

  inline float getSteeringTorqueDEPRECATED() const;

  inline bool hasCruiseControl() const;
  inline  ::cereal::CarControl::CruiseControl::Reader getCruiseControl() const;

  inline bool hasHudControl() const;
  inline  ::cereal::CarControl::HUDControl::Reader getHudControl() const;

  inline bool hasActuators() const;
  inline  ::cereal::CarControl::Actuators::Reader getActuators() const;

  inline bool getActiveDEPRECATED() const;

  inline float getRollDEPRECATED() const;

  inline float getPitchDEPRECATED() const;

  inline bool hasActuatorsOutputDEPRECATED() const;
  inline  ::cereal::CarControl::Actuators::Reader getActuatorsOutputDEPRECATED() const;

  inline bool getLatActive() const;

  inline bool getLongActive() const;

  inline bool hasOrientationNED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOrientationNED() const;

  inline bool hasAngularVelocity() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAngularVelocity() const;

  inline bool getLeftBlinker() const;

  inline bool getRightBlinker() const;

  inline float getCurrentCurvature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Builder {
public:
  typedef CarControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getGasDEPRECATED();
  inline void setGasDEPRECATED(float value);

  inline float getBrakeDEPRECATED();
  inline void setBrakeDEPRECATED(float value);

  inline float getSteeringTorqueDEPRECATED();
  inline void setSteeringTorqueDEPRECATED(float value);

  inline bool hasCruiseControl();
  inline  ::cereal::CarControl::CruiseControl::Builder getCruiseControl();
  inline void setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value);
  inline  ::cereal::CarControl::CruiseControl::Builder initCruiseControl();
  inline void adoptCruiseControl(::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> disownCruiseControl();

  inline bool hasHudControl();
  inline  ::cereal::CarControl::HUDControl::Builder getHudControl();
  inline void setHudControl( ::cereal::CarControl::HUDControl::Reader value);
  inline  ::cereal::CarControl::HUDControl::Builder initHudControl();
  inline void adoptHudControl(::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> disownHudControl();

  inline bool hasActuators();
  inline  ::cereal::CarControl::Actuators::Builder getActuators();
  inline void setActuators( ::cereal::CarControl::Actuators::Reader value);
  inline  ::cereal::CarControl::Actuators::Builder initActuators();
  inline void adoptActuators(::capnp::Orphan< ::cereal::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::Actuators> disownActuators();

  inline bool getActiveDEPRECATED();
  inline void setActiveDEPRECATED(bool value);

  inline float getRollDEPRECATED();
  inline void setRollDEPRECATED(float value);

  inline float getPitchDEPRECATED();
  inline void setPitchDEPRECATED(float value);

  inline bool hasActuatorsOutputDEPRECATED();
  inline  ::cereal::CarControl::Actuators::Builder getActuatorsOutputDEPRECATED();
  inline void setActuatorsOutputDEPRECATED( ::cereal::CarControl::Actuators::Reader value);
  inline  ::cereal::CarControl::Actuators::Builder initActuatorsOutputDEPRECATED();
  inline void adoptActuatorsOutputDEPRECATED(::capnp::Orphan< ::cereal::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::Actuators> disownActuatorsOutputDEPRECATED();

  inline bool getLatActive();
  inline void setLatActive(bool value);

  inline bool getLongActive();
  inline void setLongActive(bool value);

  inline bool hasOrientationNED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOrientationNED();
  inline void setOrientationNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOrientationNED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOrientationNED(unsigned int size);
  inline void adoptOrientationNED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOrientationNED();

  inline bool hasAngularVelocity();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAngularVelocity();
  inline void setAngularVelocity( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAngularVelocity(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAngularVelocity(unsigned int size);
  inline void adoptAngularVelocity(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAngularVelocity();

  inline bool getLeftBlinker();
  inline void setLeftBlinker(bool value);

  inline bool getRightBlinker();
  inline void setRightBlinker(bool value);

  inline float getCurrentCurvature();
  inline void setCurrentCurvature(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Pipeline {
public:
  typedef CarControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarControl::CruiseControl::Pipeline getCruiseControl();
  inline  ::cereal::CarControl::HUDControl::Pipeline getHudControl();
  inline  ::cereal::CarControl::Actuators::Pipeline getActuators();
  inline  ::cereal::CarControl::Actuators::Pipeline getActuatorsOutputDEPRECATED();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Actuators::Reader {
public:
  typedef Actuators Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getGas() const;

  inline float getBrake() const;

  inline float getTorque() const;

  inline float getSteeringAngleDeg() const;

  inline float getAccel() const;

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState() const;

  inline float getSpeed() const;

  inline float getCurvature() const;

  inline float getTorqueOutputCan() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Actuators::Builder {
public:
  typedef Actuators Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getGas();
  inline void setGas(float value);

  inline float getBrake();
  inline void setBrake(float value);

  inline float getTorque();
  inline void setTorque(float value);

  inline float getSteeringAngleDeg();
  inline void setSteeringAngleDeg(float value);

  inline float getAccel();
  inline void setAccel(float value);

  inline  ::cereal::CarControl::Actuators::LongControlState getLongControlState();
  inline void setLongControlState( ::cereal::CarControl::Actuators::LongControlState value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline float getTorqueOutputCan();
  inline void setTorqueOutputCan(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Actuators::Pipeline {
public:
  typedef Actuators Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::CruiseControl::Reader {
public:
  typedef CruiseControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCancel() const;

  inline bool getResume() const;

  inline float getSpeedOverrideDEPRECATED() const;

  inline float getAccelOverrideDEPRECATED() const;

  inline bool getOverride() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::CruiseControl::Builder {
public:
  typedef CruiseControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCancel();
  inline void setCancel(bool value);

  inline bool getResume();
  inline void setResume(bool value);

  inline float getSpeedOverrideDEPRECATED();
  inline void setSpeedOverrideDEPRECATED(float value);

  inline float getAccelOverrideDEPRECATED();
  inline void setAccelOverrideDEPRECATED(float value);

  inline bool getOverride();
  inline void setOverride(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::CruiseControl::Pipeline {
public:
  typedef CruiseControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::HUDControl::Reader {
public:
  typedef HUDControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible() const;

  inline float getSetSpeed() const;

  inline bool getLanesVisible() const;

  inline bool getLeadVisible() const;

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert() const;

  inline bool getRightLaneVisible() const;

  inline bool getLeftLaneVisible() const;

  inline bool getRightLaneDepart() const;

  inline bool getLeftLaneDepart() const;

  inline  ::int8_t getLeadDistanceBars() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::HUDControl::Builder {
public:
  typedef HUDControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible();
  inline void setSpeedVisible(bool value);

  inline float getSetSpeed();
  inline void setSetSpeed(float value);

  inline bool getLanesVisible();
  inline void setLanesVisible(bool value);

  inline bool getLeadVisible();
  inline void setLeadVisible(bool value);

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert();
  inline void setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert();
  inline void setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline bool getRightLaneVisible();
  inline void setRightLaneVisible(bool value);

  inline bool getLeftLaneVisible();
  inline void setLeftLaneVisible(bool value);

  inline bool getRightLaneDepart();
  inline void setRightLaneDepart(bool value);

  inline bool getLeftLaneDepart();
  inline void setLeftLaneDepart(bool value);

  inline  ::int8_t getLeadDistanceBars();
  inline void setLeadDistanceBars( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::HUDControl::Pipeline {
public:
  typedef HUDControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarOutput::Reader {
public:
  typedef CarOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasActuatorsOutput() const;
  inline  ::cereal::CarControl::Actuators::Reader getActuatorsOutput() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarOutput::Builder {
public:
  typedef CarOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActuatorsOutput();
  inline  ::cereal::CarControl::Actuators::Builder getActuatorsOutput();
  inline void setActuatorsOutput( ::cereal::CarControl::Actuators::Reader value);
  inline  ::cereal::CarControl::Actuators::Builder initActuatorsOutput();
  inline void adoptActuatorsOutput(::capnp::Orphan< ::cereal::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::Actuators> disownActuatorsOutput();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarOutput::Pipeline {
public:
  typedef CarOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarControl::Actuators::Pipeline getActuatorsOutput();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::Reader {
public:
  typedef CarParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBrand() const;
  inline  ::capnp::Text::Reader getBrand() const;

  inline bool hasCarFingerprint() const;
  inline  ::capnp::Text::Reader getCarFingerprint() const;

  inline bool getEnableGasInterceptorDEPRECATED() const;

  inline bool getPcmCruise() const;

  inline bool getEnableCameraDEPRECATED() const;

  inline bool getEnableDsu() const;

  inline bool getEnableApgsDEPRECATED() const;

  inline float getMinEnableSpeed() const;

  inline float getMinSteerSpeed() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModelDEPRECATED() const;

  inline  ::int16_t getSafetyParamDEPRECATED() const;

  inline bool hasSteerMaxBPDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteerMaxBPDEPRECATED() const;

  inline bool hasSteerMaxVDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteerMaxVDEPRECATED() const;

  inline bool hasGasMaxBPDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasMaxBPDEPRECATED() const;

  inline bool hasGasMaxVDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getGasMaxVDEPRECATED() const;

  inline bool hasBrakeMaxBPDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakeMaxBPDEPRECATED() const;

  inline bool hasBrakeMaxVDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBrakeMaxVDEPRECATED() const;

  inline float getMass() const;

  inline float getWheelbase() const;

  inline float getCenterToFront() const;

  inline float getSteerRatio() const;

  inline float getSteerRatioRear() const;

  inline float getRotationalInertia() const;

  inline float getTireStiffnessFront() const;

  inline float getTireStiffnessRear() const;

  inline bool hasLongitudinalTuning() const;
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Reader getLongitudinalTuning() const;

  inline typename LateralTuning::Reader getLateralTuning() const;

  inline bool getSteerLimitAlert() const;

  inline float getVEgoStopping() const;

  inline bool getDirectAccelControlDEPRECATED() const;

  inline bool getStoppingControlDEPRECATED() const;

  inline float getStartAccel() const;

  inline float getSteerRateCostDEPRECATED() const;

  inline  ::cereal::CarParams::SteerControlType getSteerControlType() const;

  inline bool getRadarUnavailable() const;

  inline float getSteerActuatorDelay() const;

  inline bool getOpenpilotLongitudinalControl() const;

  inline bool hasCarVin() const;
  inline  ::capnp::Text::Reader getCarVin() const;

  inline bool getIsPandaBlackDEPRECATED() const;

  inline bool getDashcamOnly() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModelPassiveDEPRECATED() const;

  inline  ::cereal::CarParams::TransmissionType getTransmissionType() const;

  inline bool hasCarFw() const;
  inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader getCarFw() const;

  inline float getRadarTimeStepDEPRECATED() const;

  inline bool getCommunityFeatureDEPRECATED() const;

  inline float getSteerLimitTimer() const;

  inline bool hasLateralParams() const;
  inline  ::cereal::CarParams::LateralParams::Reader getLateralParams() const;

  inline  ::cereal::CarParams::FingerprintSource getFingerprintSource() const;

  inline  ::cereal::CarParams::NetworkLocation getNetworkLocation() const;

  inline float getMinSpeedCanDEPRECATED() const;

  inline float getStoppingDecelRate() const;

  inline float getStartingAccelRateDEPRECATED() const;

  inline float getMaxSteeringAngleDegDEPRECATED() const;

  inline bool getFuzzyFingerprint() const;

  inline bool getEnableBsm() const;

  inline bool getHasStockCameraDEPRECATED() const;

  inline float getLongitudinalActuatorDelay() const;

  inline float getVEgoStarting() const;

  inline float getStopAccel() const;

  inline float getLongitudinalActuatorDelayLowerBoundDEPRECATED() const;

  inline bool hasSafetyConfigs() const;
  inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader getSafetyConfigs() const;

  inline float getWheelSpeedFactor() const;

  inline  ::uint32_t getFlags() const;

  inline  ::int16_t getAlternativeExperience() const;

  inline bool getNotCar() const;

  inline float getMaxLateralAccel() const;

  inline bool getAutoResumeSng() const;

  inline bool getStartingState() const;

  inline bool getAlphaLongitudinalAvailable() const;

  inline float getTireStiffnessFactor() const;

  inline bool getPassive() const;

  inline float getRadarDelay() const;

  inline bool getSecOcRequired() const;

  inline bool getSecOcKeyAvailable() const;

  inline bool getSteerAtStandstill() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::Builder {
public:
  typedef CarParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBrand();
  inline  ::capnp::Text::Builder getBrand();
  inline void setBrand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBrand(unsigned int size);
  inline void adoptBrand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBrand();

  inline bool hasCarFingerprint();
  inline  ::capnp::Text::Builder getCarFingerprint();
  inline void setCarFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarFingerprint(unsigned int size);
  inline void adoptCarFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarFingerprint();

  inline bool getEnableGasInterceptorDEPRECATED();
  inline void setEnableGasInterceptorDEPRECATED(bool value);

  inline bool getPcmCruise();
  inline void setPcmCruise(bool value);

  inline bool getEnableCameraDEPRECATED();
  inline void setEnableCameraDEPRECATED(bool value);

  inline bool getEnableDsu();
  inline void setEnableDsu(bool value);

  inline bool getEnableApgsDEPRECATED();
  inline void setEnableApgsDEPRECATED(bool value);

  inline float getMinEnableSpeed();
  inline void setMinEnableSpeed(float value);

  inline float getMinSteerSpeed();
  inline void setMinSteerSpeed(float value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModelDEPRECATED();
  inline void setSafetyModelDEPRECATED( ::cereal::CarParams::SafetyModel value);

  inline  ::int16_t getSafetyParamDEPRECATED();
  inline void setSafetyParamDEPRECATED( ::int16_t value);

  inline bool hasSteerMaxBPDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteerMaxBPDEPRECATED();
  inline void setSteerMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteerMaxBPDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteerMaxBPDEPRECATED(unsigned int size);
  inline void adoptSteerMaxBPDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteerMaxBPDEPRECATED();

  inline bool hasSteerMaxVDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteerMaxVDEPRECATED();
  inline void setSteerMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteerMaxVDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteerMaxVDEPRECATED(unsigned int size);
  inline void adoptSteerMaxVDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteerMaxVDEPRECATED();

  inline bool hasGasMaxBPDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasMaxBPDEPRECATED();
  inline void setGasMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasMaxBPDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasMaxBPDEPRECATED(unsigned int size);
  inline void adoptGasMaxBPDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasMaxBPDEPRECATED();

  inline bool hasGasMaxVDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getGasMaxVDEPRECATED();
  inline void setGasMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setGasMaxVDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initGasMaxVDEPRECATED(unsigned int size);
  inline void adoptGasMaxVDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownGasMaxVDEPRECATED();

  inline bool hasBrakeMaxBPDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakeMaxBPDEPRECATED();
  inline void setBrakeMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakeMaxBPDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakeMaxBPDEPRECATED(unsigned int size);
  inline void adoptBrakeMaxBPDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakeMaxBPDEPRECATED();

  inline bool hasBrakeMaxVDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBrakeMaxVDEPRECATED();
  inline void setBrakeMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBrakeMaxVDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBrakeMaxVDEPRECATED(unsigned int size);
  inline void adoptBrakeMaxVDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBrakeMaxVDEPRECATED();

  inline float getMass();
  inline void setMass(float value);

  inline float getWheelbase();
  inline void setWheelbase(float value);

  inline float getCenterToFront();
  inline void setCenterToFront(float value);

  inline float getSteerRatio();
  inline void setSteerRatio(float value);

  inline float getSteerRatioRear();
  inline void setSteerRatioRear(float value);

  inline float getRotationalInertia();
  inline void setRotationalInertia(float value);

  inline float getTireStiffnessFront();
  inline void setTireStiffnessFront(float value);

  inline float getTireStiffnessRear();
  inline void setTireStiffnessRear(float value);

  inline bool hasLongitudinalTuning();
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder getLongitudinalTuning();
  inline void setLongitudinalTuning( ::cereal::CarParams::LongitudinalPIDTuning::Reader value);
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder initLongitudinalTuning();
  inline void adoptLongitudinalTuning(::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning> disownLongitudinalTuning();

  inline typename LateralTuning::Builder getLateralTuning();
  inline typename LateralTuning::Builder initLateralTuning();

  inline bool getSteerLimitAlert();
  inline void setSteerLimitAlert(bool value);

  inline float getVEgoStopping();
  inline void setVEgoStopping(float value);

  inline bool getDirectAccelControlDEPRECATED();
  inline void setDirectAccelControlDEPRECATED(bool value);

  inline bool getStoppingControlDEPRECATED();
  inline void setStoppingControlDEPRECATED(bool value);

  inline float getStartAccel();
  inline void setStartAccel(float value);

  inline float getSteerRateCostDEPRECATED();
  inline void setSteerRateCostDEPRECATED(float value);

  inline  ::cereal::CarParams::SteerControlType getSteerControlType();
  inline void setSteerControlType( ::cereal::CarParams::SteerControlType value);

  inline bool getRadarUnavailable();
  inline void setRadarUnavailable(bool value);

  inline float getSteerActuatorDelay();
  inline void setSteerActuatorDelay(float value);

  inline bool getOpenpilotLongitudinalControl();
  inline void setOpenpilotLongitudinalControl(bool value);

  inline bool hasCarVin();
  inline  ::capnp::Text::Builder getCarVin();
  inline void setCarVin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarVin(unsigned int size);
  inline void adoptCarVin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarVin();

  inline bool getIsPandaBlackDEPRECATED();
  inline void setIsPandaBlackDEPRECATED(bool value);

  inline bool getDashcamOnly();
  inline void setDashcamOnly(bool value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModelPassiveDEPRECATED();
  inline void setSafetyModelPassiveDEPRECATED( ::cereal::CarParams::SafetyModel value);

  inline  ::cereal::CarParams::TransmissionType getTransmissionType();
  inline void setTransmissionType( ::cereal::CarParams::TransmissionType value);

  inline bool hasCarFw();
  inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder getCarFw();
  inline void setCarFw( ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder initCarFw(unsigned int size);
  inline void adoptCarFw(::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>> disownCarFw();

  inline float getRadarTimeStepDEPRECATED();
  inline void setRadarTimeStepDEPRECATED(float value);

  inline bool getCommunityFeatureDEPRECATED();
  inline void setCommunityFeatureDEPRECATED(bool value);

  inline float getSteerLimitTimer();
  inline void setSteerLimitTimer(float value);

  inline bool hasLateralParams();
  inline  ::cereal::CarParams::LateralParams::Builder getLateralParams();
  inline void setLateralParams( ::cereal::CarParams::LateralParams::Reader value);
  inline  ::cereal::CarParams::LateralParams::Builder initLateralParams();
  inline void adoptLateralParams(::capnp::Orphan< ::cereal::CarParams::LateralParams>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralParams> disownLateralParams();

  inline  ::cereal::CarParams::FingerprintSource getFingerprintSource();
  inline void setFingerprintSource( ::cereal::CarParams::FingerprintSource value);

  inline  ::cereal::CarParams::NetworkLocation getNetworkLocation();
  inline void setNetworkLocation( ::cereal::CarParams::NetworkLocation value);

  inline float getMinSpeedCanDEPRECATED();
  inline void setMinSpeedCanDEPRECATED(float value);

  inline float getStoppingDecelRate();
  inline void setStoppingDecelRate(float value);

  inline float getStartingAccelRateDEPRECATED();
  inline void setStartingAccelRateDEPRECATED(float value);

  inline float getMaxSteeringAngleDegDEPRECATED();
  inline void setMaxSteeringAngleDegDEPRECATED(float value);

  inline bool getFuzzyFingerprint();
  inline void setFuzzyFingerprint(bool value);

  inline bool getEnableBsm();
  inline void setEnableBsm(bool value);

  inline bool getHasStockCameraDEPRECATED();
  inline void setHasStockCameraDEPRECATED(bool value);

  inline float getLongitudinalActuatorDelay();
  inline void setLongitudinalActuatorDelay(float value);

  inline float getVEgoStarting();
  inline void setVEgoStarting(float value);

  inline float getStopAccel();
  inline void setStopAccel(float value);

  inline float getLongitudinalActuatorDelayLowerBoundDEPRECATED();
  inline void setLongitudinalActuatorDelayLowerBoundDEPRECATED(float value);

  inline bool hasSafetyConfigs();
  inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder getSafetyConfigs();
  inline void setSafetyConfigs( ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder initSafetyConfigs(unsigned int size);
  inline void adoptSafetyConfigs(::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>> disownSafetyConfigs();

  inline float getWheelSpeedFactor();
  inline void setWheelSpeedFactor(float value);

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::int16_t getAlternativeExperience();
  inline void setAlternativeExperience( ::int16_t value);

  inline bool getNotCar();
  inline void setNotCar(bool value);

  inline float getMaxLateralAccel();
  inline void setMaxLateralAccel(float value);

  inline bool getAutoResumeSng();
  inline void setAutoResumeSng(bool value);

  inline bool getStartingState();
  inline void setStartingState(bool value);

  inline bool getAlphaLongitudinalAvailable();
  inline void setAlphaLongitudinalAvailable(bool value);

  inline float getTireStiffnessFactor();
  inline void setTireStiffnessFactor(float value);

  inline bool getPassive();
  inline void setPassive(bool value);

  inline float getRadarDelay();
  inline void setRadarDelay(float value);

  inline bool getSecOcRequired();
  inline void setSecOcRequired(bool value);

  inline bool getSecOcKeyAvailable();
  inline void setSecOcKeyAvailable(bool value);

  inline bool getSteerAtStandstill();
  inline void setSteerAtStandstill(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::Pipeline {
public:
  typedef CarParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline getLongitudinalTuning();
  inline typename LateralTuning::Pipeline getLateralTuning();
  inline  ::cereal::CarParams::LateralParams::Pipeline getLateralParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::SafetyConfig::Reader {
public:
  typedef SafetyConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::SafetyModel getSafetyModel() const;

  inline  ::int16_t getSafetyParamDEPRECATED() const;

  inline  ::uint32_t getSafetyParam2DEPRECATED() const;

  inline  ::uint16_t getSafetyParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::SafetyConfig::Builder {
public:
  typedef SafetyConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::SafetyModel getSafetyModel();
  inline void setSafetyModel( ::cereal::CarParams::SafetyModel value);

  inline  ::int16_t getSafetyParamDEPRECATED();
  inline void setSafetyParamDEPRECATED( ::int16_t value);

  inline  ::uint32_t getSafetyParam2DEPRECATED();
  inline void setSafetyParam2DEPRECATED( ::uint32_t value);

  inline  ::uint16_t getSafetyParam();
  inline void setSafetyParam( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::SafetyConfig::Pipeline {
public:
  typedef SafetyConfig Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralParams::Reader {
public:
  typedef LateralParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTorqueBP() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTorqueBP() const;

  inline bool hasTorqueV() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTorqueV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralParams::Builder {
public:
  typedef LateralParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTorqueBP();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTorqueBP();
  inline void setTorqueBP( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTorqueBP(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTorqueBP(unsigned int size);
  inline void adoptTorqueBP(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownTorqueBP();

  inline bool hasTorqueV();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTorqueV();
  inline void setTorqueV( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTorqueV(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTorqueV(unsigned int size);
  inline void adoptTorqueV(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownTorqueV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralParams::Pipeline {
public:
  typedef LateralParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralPIDTuning::Reader {
public:
  typedef LateralPIDTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKpBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpBP() const;

  inline bool hasKpV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpV() const;

  inline bool hasKiBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiBP() const;

  inline bool hasKiV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiV() const;

  inline float getKf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralPIDTuning::Builder {
public:
  typedef LateralPIDTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKpBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpBP();
  inline void setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpBP(unsigned int size);
  inline void adoptKpBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpBP();

  inline bool hasKpV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpV();
  inline void setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpV(unsigned int size);
  inline void adoptKpV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpV();

  inline bool hasKiBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiBP();
  inline void setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiBP(unsigned int size);
  inline void adoptKiBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiBP();

  inline bool hasKiV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiV();
  inline void setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiV(unsigned int size);
  inline void adoptKiV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiV();

  inline float getKf();
  inline void setKf(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralPIDTuning::Pipeline {
public:
  typedef LateralPIDTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralTorqueTuning::Reader {
public:
  typedef LateralTorqueTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getUseSteeringAngleDEPRECATED() const;

  inline float getKp() const;

  inline float getKi() const;

  inline float getFriction() const;

  inline float getKf() const;

  inline float getSteeringAngleDeadzoneDeg() const;

  inline float getLatAccelFactor() const;

  inline float getLatAccelOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralTorqueTuning::Builder {
public:
  typedef LateralTorqueTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getUseSteeringAngleDEPRECATED();
  inline void setUseSteeringAngleDEPRECATED(bool value);

  inline float getKp();
  inline void setKp(float value);

  inline float getKi();
  inline void setKi(float value);

  inline float getFriction();
  inline void setFriction(float value);

  inline float getKf();
  inline void setKf(float value);

  inline float getSteeringAngleDeadzoneDeg();
  inline void setSteeringAngleDeadzoneDeg(float value);

  inline float getLatAccelFactor();
  inline void setLatAccelFactor(float value);

  inline float getLatAccelOffset();
  inline void setLatAccelOffset(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralTorqueTuning::Pipeline {
public:
  typedef LateralTorqueTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LongitudinalPIDTuning::Reader {
public:
  typedef LongitudinalPIDTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKpBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpBP() const;

  inline bool hasKpV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKpV() const;

  inline bool hasKiBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiBP() const;

  inline bool hasKiV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getKiV() const;

  inline bool hasDeadzoneBPDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDeadzoneBPDEPRECATED() const;

  inline bool hasDeadzoneVDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDeadzoneVDEPRECATED() const;

  inline float getKf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LongitudinalPIDTuning::Builder {
public:
  typedef LongitudinalPIDTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKpBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpBP();
  inline void setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpBP(unsigned int size);
  inline void adoptKpBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpBP();

  inline bool hasKpV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKpV();
  inline void setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKpV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKpV(unsigned int size);
  inline void adoptKpV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKpV();

  inline bool hasKiBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiBP();
  inline void setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiBP(unsigned int size);
  inline void adoptKiBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiBP();

  inline bool hasKiV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getKiV();
  inline void setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKiV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initKiV(unsigned int size);
  inline void adoptKiV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownKiV();

  inline bool hasDeadzoneBPDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDeadzoneBPDEPRECATED();
  inline void setDeadzoneBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDeadzoneBPDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDeadzoneBPDEPRECATED(unsigned int size);
  inline void adoptDeadzoneBPDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDeadzoneBPDEPRECATED();

  inline bool hasDeadzoneVDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDeadzoneVDEPRECATED();
  inline void setDeadzoneVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDeadzoneVDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDeadzoneVDEPRECATED(unsigned int size);
  inline void adoptDeadzoneVDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDeadzoneVDEPRECATED();

  inline float getKf();
  inline void setKf(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LongitudinalPIDTuning::Pipeline {
public:
  typedef LongitudinalPIDTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralINDITuning::Reader {
public:
  typedef LateralINDITuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getOuterLoopGainDEPRECATED() const;

  inline float getInnerLoopGainDEPRECATED() const;

  inline float getTimeConstantDEPRECATED() const;

  inline float getActuatorEffectivenessDEPRECATED() const;

  inline bool hasOuterLoopGainBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOuterLoopGainBP() const;

  inline bool hasOuterLoopGainV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOuterLoopGainV() const;

  inline bool hasInnerLoopGainBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getInnerLoopGainBP() const;

  inline bool hasInnerLoopGainV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getInnerLoopGainV() const;

  inline bool hasTimeConstantBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTimeConstantBP() const;

  inline bool hasTimeConstantV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTimeConstantV() const;

  inline bool hasActuatorEffectivenessBP() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getActuatorEffectivenessBP() const;

  inline bool hasActuatorEffectivenessV() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getActuatorEffectivenessV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralINDITuning::Builder {
public:
  typedef LateralINDITuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getOuterLoopGainDEPRECATED();
  inline void setOuterLoopGainDEPRECATED(float value);

  inline float getInnerLoopGainDEPRECATED();
  inline void setInnerLoopGainDEPRECATED(float value);

  inline float getTimeConstantDEPRECATED();
  inline void setTimeConstantDEPRECATED(float value);

  inline float getActuatorEffectivenessDEPRECATED();
  inline void setActuatorEffectivenessDEPRECATED(float value);

  inline bool hasOuterLoopGainBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOuterLoopGainBP();
  inline void setOuterLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOuterLoopGainBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOuterLoopGainBP(unsigned int size);
  inline void adoptOuterLoopGainBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOuterLoopGainBP();

  inline bool hasOuterLoopGainV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOuterLoopGainV();
  inline void setOuterLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOuterLoopGainV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOuterLoopGainV(unsigned int size);
  inline void adoptOuterLoopGainV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOuterLoopGainV();

  inline bool hasInnerLoopGainBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getInnerLoopGainBP();
  inline void setInnerLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInnerLoopGainBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initInnerLoopGainBP(unsigned int size);
  inline void adoptInnerLoopGainBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownInnerLoopGainBP();

  inline bool hasInnerLoopGainV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getInnerLoopGainV();
  inline void setInnerLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInnerLoopGainV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initInnerLoopGainV(unsigned int size);
  inline void adoptInnerLoopGainV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownInnerLoopGainV();

  inline bool hasTimeConstantBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTimeConstantBP();
  inline void setTimeConstantBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimeConstantBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTimeConstantBP(unsigned int size);
  inline void adoptTimeConstantBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTimeConstantBP();

  inline bool hasTimeConstantV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTimeConstantV();
  inline void setTimeConstantV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimeConstantV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTimeConstantV(unsigned int size);
  inline void adoptTimeConstantV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTimeConstantV();

  inline bool hasActuatorEffectivenessBP();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getActuatorEffectivenessBP();
  inline void setActuatorEffectivenessBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActuatorEffectivenessBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initActuatorEffectivenessBP(unsigned int size);
  inline void adoptActuatorEffectivenessBP(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownActuatorEffectivenessBP();

  inline bool hasActuatorEffectivenessV();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getActuatorEffectivenessV();
  inline void setActuatorEffectivenessV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActuatorEffectivenessV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initActuatorEffectivenessV(unsigned int size);
  inline void adoptActuatorEffectivenessV(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownActuatorEffectivenessV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralINDITuning::Pipeline {
public:
  typedef LateralINDITuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralLQRTuning::Reader {
public:
  typedef LateralLQRTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getScale() const;

  inline float getKi() const;

  inline float getDcGain() const;

  inline bool hasA() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getA() const;

  inline bool hasB() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getB() const;

  inline bool hasC() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getC() const;

  inline bool hasK() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getK() const;

  inline bool hasL() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getL() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralLQRTuning::Builder {
public:
  typedef LateralLQRTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getScale();
  inline void setScale(float value);

  inline float getKi();
  inline void setKi(float value);

  inline float getDcGain();
  inline void setDcGain(float value);

  inline bool hasA();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getA();
  inline void setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setA(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownA();

  inline bool hasB();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getB();
  inline void setB( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setB(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initB(unsigned int size);
  inline void adoptB(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownB();

  inline bool hasC();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getC();
  inline void setC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initC(unsigned int size);
  inline void adoptC(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownC();

  inline bool hasK();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getK();
  inline void setK( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setK(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initK(unsigned int size);
  inline void adoptK(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownK();

  inline bool hasL();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getL();
  inline void setL( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setL(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initL(unsigned int size);
  inline void adoptL(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownL();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralLQRTuning::Pipeline {
public:
  typedef LateralLQRTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::CarFw::Reader {
public:
  typedef CarFw Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::Ecu getEcu() const;

  inline bool hasFwVersion() const;
  inline  ::capnp::Data::Reader getFwVersion() const;

  inline  ::uint32_t getAddress() const;

  inline  ::uint8_t getSubAddress() const;

  inline  ::uint32_t getResponseAddress() const;

  inline bool hasRequest() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getRequest() const;

  inline bool hasBrand() const;
  inline  ::capnp::Text::Reader getBrand() const;

  inline  ::uint8_t getBus() const;

  inline bool getLogging() const;

  inline bool getObdMultiplexing() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::CarFw::Builder {
public:
  typedef CarFw Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::Ecu getEcu();
  inline void setEcu( ::cereal::CarParams::Ecu value);

  inline bool hasFwVersion();
  inline  ::capnp::Data::Builder getFwVersion();
  inline void setFwVersion( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFwVersion(unsigned int size);
  inline void adoptFwVersion(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFwVersion();

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint8_t getSubAddress();
  inline void setSubAddress( ::uint8_t value);

  inline  ::uint32_t getResponseAddress();
  inline void setResponseAddress( ::uint32_t value);

  inline bool hasRequest();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getRequest();
  inline void setRequest( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setRequest(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initRequest(unsigned int size);
  inline void adoptRequest(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownRequest();

  inline bool hasBrand();
  inline  ::capnp::Text::Builder getBrand();
  inline void setBrand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBrand(unsigned int size);
  inline void adoptBrand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBrand();

  inline  ::uint8_t getBus();
  inline void setBus( ::uint8_t value);

  inline bool getLogging();
  inline void setLogging(bool value);

  inline bool getObdMultiplexing();
  inline void setObdMultiplexing(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::CarFw::Pipeline {
public:
  typedef CarFw Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralTuning::Reader {
public:
  typedef LateralTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isPid() const;
  inline bool hasPid() const;
  inline  ::cereal::CarParams::LateralPIDTuning::Reader getPid() const;

  inline bool isIndiDEPRECATED() const;
  inline bool hasIndiDEPRECATED() const;
  inline  ::cereal::CarParams::LateralINDITuning::Reader getIndiDEPRECATED() const;

  inline bool isLqrDEPRECATED() const;
  inline bool hasLqrDEPRECATED() const;
  inline  ::cereal::CarParams::LateralLQRTuning::Reader getLqrDEPRECATED() const;

  inline bool isTorque() const;
  inline bool hasTorque() const;
  inline  ::cereal::CarParams::LateralTorqueTuning::Reader getTorque() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralTuning::Builder {
public:
  typedef LateralTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isPid();
  inline bool hasPid();
  inline  ::cereal::CarParams::LateralPIDTuning::Builder getPid();
  inline void setPid( ::cereal::CarParams::LateralPIDTuning::Reader value);
  inline  ::cereal::CarParams::LateralPIDTuning::Builder initPid();
  inline void adoptPid(::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning> disownPid();

  inline bool isIndiDEPRECATED();
  inline bool hasIndiDEPRECATED();
  inline  ::cereal::CarParams::LateralINDITuning::Builder getIndiDEPRECATED();
  inline void setIndiDEPRECATED( ::cereal::CarParams::LateralINDITuning::Reader value);
  inline  ::cereal::CarParams::LateralINDITuning::Builder initIndiDEPRECATED();
  inline void adoptIndiDEPRECATED(::capnp::Orphan< ::cereal::CarParams::LateralINDITuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning> disownIndiDEPRECATED();

  inline bool isLqrDEPRECATED();
  inline bool hasLqrDEPRECATED();
  inline  ::cereal::CarParams::LateralLQRTuning::Builder getLqrDEPRECATED();
  inline void setLqrDEPRECATED( ::cereal::CarParams::LateralLQRTuning::Reader value);
  inline  ::cereal::CarParams::LateralLQRTuning::Builder initLqrDEPRECATED();
  inline void adoptLqrDEPRECATED(::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning> disownLqrDEPRECATED();

  inline bool isTorque();
  inline bool hasTorque();
  inline  ::cereal::CarParams::LateralTorqueTuning::Builder getTorque();
  inline void setTorque( ::cereal::CarParams::LateralTorqueTuning::Reader value);
  inline  ::cereal::CarParams::LateralTorqueTuning::Builder initTorque();
  inline void adoptTorque(::capnp::Orphan< ::cereal::CarParams::LateralTorqueTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralTorqueTuning> disownTorque();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralTuning::Pipeline {
public:
  typedef LateralTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::cereal::OnroadEventDEPRECATED::EventName OnroadEventDEPRECATED::Reader::getName() const {
  return _reader.getDataField< ::cereal::OnroadEventDEPRECATED::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::OnroadEventDEPRECATED::EventName OnroadEventDEPRECATED::Builder::getName() {
  return _builder.getDataField< ::cereal::OnroadEventDEPRECATED::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setName( ::cereal::OnroadEventDEPRECATED::EventName value) {
  _builder.setDataField< ::cereal::OnroadEventDEPRECATED::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getNoEntry() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getNoEntry() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setNoEntry(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getUserDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getUserDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setUserDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getSoftDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getSoftDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setSoftDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getImmediateDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getImmediateDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setImmediateDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getPreEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getPreEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setPreEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getPermanent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getPermanent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setPermanent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getOverrideLongitudinal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getOverrideLongitudinal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setOverrideLongitudinal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool OnroadEventDEPRECATED::Reader::getOverrideLateral() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool OnroadEventDEPRECATED::Builder::getOverrideLateral() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void OnroadEventDEPRECATED::Builder::setOverrideLateral(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasErrorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasErrorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Reader CarState::Reader::getErrorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Builder CarState::Builder::getErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setErrorsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::OnroadEventDEPRECATED::EventName> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>::Builder CarState::Builder::initErrorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptErrorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>> CarState::Builder::disownErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED::EventName,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float CarState::Reader::getVEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasWheelSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasWheelSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::WheelSpeeds::Reader CarState::Reader::getWheelSpeeds() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::getWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::WheelSpeeds::Pipeline CarState::Pipeline::getWheelSpeeds() {
  return  ::cereal::CarState::WheelSpeeds::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::initWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptWheelSpeeds(
    ::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> CarState::Builder::disownWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float CarState::Reader::getGasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getGasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGasPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGasPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGasPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getBrake() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getBrake() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakePressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakePressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakePressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasCruiseState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCruiseState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::CruiseState::Reader CarState::Reader::getCruiseState() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::getCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::CruiseState::Pipeline CarState::Pipeline::getCruiseState() {
  return  ::cereal::CarState::CruiseState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setCruiseState( ::cereal::CarState::CruiseState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::initCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptCruiseState(
    ::capnp::Orphan< ::cereal::CarState::CruiseState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::CruiseState> CarState::Builder::disownCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasButtonEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasButtonEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader CarState::Reader::getButtonEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::getButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::initButtonEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptButtonEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>> CarState::Builder::disownButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasCanMonoTimesDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCanMonoTimesDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader CarState::Reader::getCanMonoTimesDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder CarState::Builder::getCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder CarState::Builder::initCanMonoTimesDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptCanMonoTimesDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> CarState::Builder::disownCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasEventsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasEventsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader CarState::Reader::getEventsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::getEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setEventsDEPRECATED( ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>::Builder CarState::Builder::initEventsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>> CarState::Builder::disownEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OnroadEventDEPRECATED,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::cereal::CarState::GearShifter CarState::Reader::getGearShifter() const {
  return _reader.getDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::GearShifter CarState::Builder::getGearShifter() {
  return _builder.getDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGearShifter( ::cereal::CarState::GearShifter value) {
  _builder.setDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringRateDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringRateDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringRateDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getAEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getAEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setAEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getVEgoRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgoRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgoRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakeLightsDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakeLightsDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakeLightsDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLeftBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLeftBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLeftBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRightBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRightBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRightBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGenericToggle() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGenericToggle() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGenericToggle(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getDoorOpen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getDoorOpen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setDoorOpen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSeatbeltUnlatched() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSeatbeltUnlatched() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSeatbeltUnlatched(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCanValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCanValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCanValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorqueEps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorqueEps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorqueEps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getClutchPressedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getClutchPressedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setClutchPressedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringRateLimitedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringRateLimitedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringRateLimitedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockAeb() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockAeb() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockAeb(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getEspDisabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getEspDisabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setEspDisabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLeftBlindspot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLeftBlindspot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLeftBlindspot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRightBlindspot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRightBlindspot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRightBlindspot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteerFaultTemporary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteerFaultTemporary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteerFaultTemporary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteerFaultPermanent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<355>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteerFaultPermanent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<355>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteerFaultPermanent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<355>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringAngleOffsetDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringAngleOffsetDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringAngleOffsetDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakeHoldActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<356>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakeHoldActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<356>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakeHoldActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<356>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getParkingBrake() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<357>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getParkingBrake() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<357>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setParkingBrake(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<357>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCanTimeout() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<358>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCanTimeout() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<358>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCanTimeout(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<358>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getFuelGauge() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getFuelGauge() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setFuelGauge(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getAccFaulted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<359>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getAccFaulted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<359>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setAccFaulted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<359>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCharging() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<360>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCharging() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<360>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCharging(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<360>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getVEgoCluster() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgoCluster() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgoCluster(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRegenBraking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<361>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRegenBraking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<361>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRegenBraking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<361>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getEngineRpmDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getEngineRpmDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setEngineRpmDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCarFaultedNonCritical() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<362>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCarFaultedNonCritical() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<362>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCarFaultedNonCritical(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<362>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CarState::Reader::getCanErrorCounter() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarState::Builder::getCanErrorCounter() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCanErrorCounter( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCanRcvTimeoutDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<363>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCanRcvTimeoutDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<363>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCanRcvTimeoutDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<363>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getEspActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<364>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getEspActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<364>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setEspActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<364>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getVehicleSensorsInvalid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<365>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getVehicleSensorsInvalid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<365>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVehicleSensorsInvalid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<365>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getVCruise() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVCruise() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVCruise(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getVCruiseCluster() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVCruiseCluster() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVCruiseCluster(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getInvalidLkasSetting() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<366>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getInvalidLkasSetting() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<366>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setInvalidLkasSetting(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<366>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLowSpeedAlert() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<367>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLowSpeedAlert() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<367>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLowSpeedAlert(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<367>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getButtonEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<368>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getButtonEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<368>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setButtonEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<368>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringDisengage() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<369>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringDisengage() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<369>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringDisengage(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<369>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockLkas() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<370>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockLkas() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<370>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockLkas(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<370>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBlockPcmEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<371>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBlockPcmEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<371>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBlockPcmEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<371>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeedOffsetDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeedOffsetDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeedOffsetDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getNonAdaptive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getNonAdaptive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setNonAdaptive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeedCluster() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeedCluster() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeedCluster(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::ButtonEvent::Reader::getPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::ButtonEvent::Builder::getPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setType( ::cereal::CarState::ButtonEvent::Type value) {
  _builder.setDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::Reader::hasErrorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasErrorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader RadarData::Reader::getErrorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder RadarData::Builder::getErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setErrorsDEPRECATED( ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RadarData::Builder::setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::RadarData::ErrorDEPRECATED> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>::Builder RadarData::Builder::initErrorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptErrorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>> RadarData::Builder::disownErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::ErrorDEPRECATED,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader RadarData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder RadarData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setPoints( ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>::Builder RadarData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>> RadarData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasCanMonoTimesDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasCanMonoTimesDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader RadarData::Reader::getCanMonoTimesDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarData::Builder::getCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setCanMonoTimesDEPRECATED( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void RadarData::Builder::setCanMonoTimesDEPRECATED(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RadarData::Builder::initCanMonoTimesDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptCanMonoTimesDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> RadarData::Builder::disownCanMonoTimesDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarData::Error::Reader RadarData::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarData::Error::Builder RadarData::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarData::Error::Pipeline RadarData::Pipeline::getErrors() {
  return  ::cereal::RadarData::Error::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void RadarData::Builder::setErrors( ::cereal::RadarData::Error::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarData::Error::Builder RadarData::Builder::initErrors() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::adoptErrors(
    ::capnp::Orphan< ::cereal::RadarData::Error>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarData::Error> RadarData::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarData::Error>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RadarData::Error::Reader::getCanError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RadarData::Error::Builder::getCanError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarData::Error::Builder::setCanError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::Error::Reader::getRadarFault() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool RadarData::Error::Builder::getRadarFault() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarData::Error::Builder::setRadarFault(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::Error::Reader::getWrongConfig() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool RadarData::Error::Builder::getWrongConfig() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarData::Error::Builder::setWrongConfig(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::Error::Reader::getRadarUnavailableTemporary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool RadarData::Error::Builder::getRadarUnavailableTemporary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarData::Error::Builder::setRadarUnavailableTemporary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarData::RadarPoint::Reader::getTrackId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarData::RadarPoint::Builder::getTrackId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setTrackId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getYvRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getYvRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setYvRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::RadarPoint::Reader::getMeasured() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool RadarData::RadarPoint::Builder::getMeasured() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setMeasured(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getGasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getGasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setGasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getBrakeDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getBrakeDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setBrakeDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getSteeringTorqueDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getSteeringTorqueDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setSteeringTorqueDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasCruiseControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasCruiseControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::CruiseControl::Reader CarControl::Reader::getCruiseControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::getCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::CruiseControl::Pipeline CarControl::Pipeline::getCruiseControl() {
  return  ::cereal::CarControl::CruiseControl::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::initCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptCruiseControl(
    ::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> CarControl::Builder::disownCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasHudControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasHudControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::HUDControl::Reader CarControl::Reader::getHudControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::getHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::HUDControl::Pipeline CarControl::Pipeline::getHudControl() {
  return  ::cereal::CarControl::HUDControl::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setHudControl( ::cereal::CarControl::HUDControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::initHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptHudControl(
    ::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> CarControl::Builder::disownHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasActuators() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasActuators() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Actuators::Reader CarControl::Reader::getActuators() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::getActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::Actuators::Pipeline CarControl::Pipeline::getActuators() {
  return  ::cereal::CarControl::Actuators::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setActuators( ::cereal::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::initActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptActuators(
    ::capnp::Orphan< ::cereal::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::Actuators> CarControl::Builder::disownActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::getActiveDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getActiveDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setActiveDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getRollDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getRollDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setRollDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getPitchDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getPitchDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setPitchDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasActuatorsOutputDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasActuatorsOutputDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Actuators::Reader CarControl::Reader::getActuatorsOutputDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::getActuatorsOutputDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::Actuators::Pipeline CarControl::Pipeline::getActuatorsOutputDEPRECATED() {
  return  ::cereal::CarControl::Actuators::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setActuatorsOutputDEPRECATED( ::cereal::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::initActuatorsOutputDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptActuatorsOutputDEPRECATED(
    ::capnp::Orphan< ::cereal::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::Actuators> CarControl::Builder::disownActuatorsOutputDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::getLatActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getLatActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setLatActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::getLongActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getLongActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setLongActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasOrientationNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasOrientationNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarControl::Reader::getOrientationNED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarControl::Builder::getOrientationNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::setOrientationNED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarControl::Builder::setOrientationNED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarControl::Builder::initOrientationNED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarControl::Builder::adoptOrientationNED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarControl::Builder::disownOrientationNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarControl::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarControl::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::setAngularVelocity( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarControl::Builder::setAngularVelocity(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarControl::Builder::initAngularVelocity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarControl::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarControl::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::getLeftBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getLeftBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setLeftBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::getRightBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getRightBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setRightBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getCurrentCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getCurrentCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setCurrentCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getGas() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getGas() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setGas(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getBrake() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getBrake() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSteeringAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSteeringAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSteeringAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::Actuators::LongControlState CarControl::Actuators::Reader::getLongControlState() const {
  return _reader.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::Actuators::LongControlState CarControl::Actuators::Builder::getLongControlState() {
  return _builder.getDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setLongControlState( ::cereal::CarControl::Actuators::LongControlState value) {
  _builder.setDataField< ::cereal::CarControl::Actuators::LongControlState>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getTorqueOutputCan() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getTorqueOutputCan() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setTorqueOutputCan(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getCancel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getCancel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setCancel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getResume() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getResume() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setResume(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getSpeedOverrideDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getSpeedOverrideDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setSpeedOverrideDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getAccelOverrideDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getAccelOverrideDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setAccelOverrideDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getOverride() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getOverride() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setOverride(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getSpeedVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getSpeedVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSpeedVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::HUDControl::Reader::getSetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::HUDControl::Builder::getSetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLanesVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLanesVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLanesVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeadVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeadVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeadVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Reader::getVisualAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Builder::getVisualAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Reader::getAudibleAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Builder::getAudibleAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getRightLaneVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getRightLaneVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setRightLaneVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeftLaneVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeftLaneVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeftLaneVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getRightLaneDepart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getRightLaneDepart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setRightLaneDepart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeftLaneDepart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeftLaneDepart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeftLaneDepart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t CarControl::HUDControl::Reader::getLeadDistanceBars() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t CarControl::HUDControl::Builder::getLeadDistanceBars() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeadDistanceBars( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarOutput::Reader::hasActuatorsOutput() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarOutput::Builder::hasActuatorsOutput() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Actuators::Reader CarOutput::Reader::getActuatorsOutput() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Actuators::Builder CarOutput::Builder::getActuatorsOutput() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::Actuators::Pipeline CarOutput::Pipeline::getActuatorsOutput() {
  return  ::cereal::CarControl::Actuators::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarOutput::Builder::setActuatorsOutput( ::cereal::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Actuators::Builder CarOutput::Builder::initActuatorsOutput() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarOutput::Builder::adoptActuatorsOutput(
    ::capnp::Orphan< ::cereal::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::Actuators> CarOutput::Builder::disownActuatorsOutput() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrand() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getBrand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initBrand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasCarFingerprint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarFingerprint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::getEnableGasInterceptorDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableGasInterceptorDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableGasInterceptorDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getPcmCruise() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getPcmCruise() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setPcmCruise(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableCameraDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableCameraDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableCameraDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableDsu() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableDsu() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableDsu(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableApgsDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableApgsDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableApgsDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinEnableSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinEnableSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinEnableSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinSteerSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinSteerSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinSteerSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Reader::getSafetyModelDEPRECATED() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Builder::getSafetyModelDEPRECATED() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyModelDEPRECATED( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::Reader::getSafetyParamDEPRECATED() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::Builder::getSafetyParamDEPRECATED() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyParamDEPRECATED( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasSteerMaxBPDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSteerMaxBPDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getSteerMaxBPDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getSteerMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSteerMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setSteerMaxBPDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initSteerMaxBPDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSteerMaxBPDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownSteerMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasSteerMaxVDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSteerMaxVDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getSteerMaxVDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getSteerMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSteerMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setSteerMaxVDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initSteerMaxVDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSteerMaxVDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownSteerMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasGasMaxBPDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasGasMaxBPDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getGasMaxBPDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getGasMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setGasMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setGasMaxBPDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initGasMaxBPDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptGasMaxBPDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownGasMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasGasMaxVDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasGasMaxVDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getGasMaxVDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getGasMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setGasMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setGasMaxVDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initGasMaxVDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptGasMaxVDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownGasMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrakeMaxBPDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrakeMaxBPDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getBrakeMaxBPDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getBrakeMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrakeMaxBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setBrakeMaxBPDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initBrakeMaxBPDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrakeMaxBPDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownBrakeMaxBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrakeMaxVDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrakeMaxVDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::Reader::getBrakeMaxVDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::getBrakeMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrakeMaxVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setBrakeMaxVDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::Builder::initBrakeMaxVDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrakeMaxVDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::Builder::disownBrakeMaxVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getMass() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMass() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMass(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getWheelbase() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getWheelbase() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setWheelbase(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getCenterToFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getCenterToFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setCenterToFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRatio() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRatio() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRatio(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRatioRear() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRatioRear() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRatioRear(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getRotationalInertia() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getRotationalInertia() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRotationalInertia(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessRear() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessRear() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessRear(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasLongitudinalTuning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasLongitudinalTuning() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Reader CarParams::Reader::getLongitudinalTuning() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder CarParams::Builder::getLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline CarParams::Pipeline::getLongitudinalTuning() {
  return  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void CarParams::Builder::setLongitudinalTuning( ::cereal::CarParams::LongitudinalPIDTuning::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder CarParams::Builder::initLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::adoptLongitudinalTuning(
    ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning> CarParams::Builder::disownLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline typename CarParams::LateralTuning::Reader CarParams::Reader::getLateralTuning() const {
  return typename CarParams::LateralTuning::Reader(_reader);
}
inline typename CarParams::LateralTuning::Builder CarParams::Builder::getLateralTuning() {
  return typename CarParams::LateralTuning::Builder(_builder);
}
#if !CAPNP_LITE
inline typename CarParams::LateralTuning::Pipeline CarParams::Pipeline::getLateralTuning() {
  return typename CarParams::LateralTuning::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename CarParams::LateralTuning::Builder CarParams::Builder::initLateralTuning() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<7>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS).clear();
  return typename CarParams::LateralTuning::Builder(_builder);
}
inline bool CarParams::Reader::getSteerLimitAlert() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getSteerLimitAlert() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerLimitAlert(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getVEgoStopping() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getVEgoStopping() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setVEgoStopping(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getDirectAccelControlDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getDirectAccelControlDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setDirectAccelControlDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getStoppingControlDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getStoppingControlDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStoppingControlDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStartAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStartAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStartAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRateCostDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRateCostDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRateCostDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SteerControlType CarParams::Reader::getSteerControlType() const {
  return _reader.getDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SteerControlType CarParams::Builder::getSteerControlType() {
  return _builder.getDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerControlType( ::cereal::CarParams::SteerControlType value) {
  _builder.setDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getRadarUnavailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getRadarUnavailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRadarUnavailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerActuatorDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerActuatorDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerActuatorDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getOpenpilotLongitudinalControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getOpenpilotLongitudinalControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setOpenpilotLongitudinalControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarVin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarVin() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarVin() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarVin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarVin( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarVin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarVin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarVin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::getIsPandaBlackDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getIsPandaBlackDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setIsPandaBlackDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getDashcamOnly() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getDashcamOnly() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setDashcamOnly(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Reader::getSafetyModelPassiveDEPRECATED() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Builder::getSafetyModelPassiveDEPRECATED() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyModelPassiveDEPRECATED( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::TransmissionType CarParams::Reader::getTransmissionType() const {
  return _reader.getDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::TransmissionType CarParams::Builder::getTransmissionType() {
  return _builder.getDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTransmissionType( ::cereal::CarParams::TransmissionType value) {
  _builder.setDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarFw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarFw() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader CarParams::Reader::getCarFw() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::getCarFw() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarFw( ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::initCarFw(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarFw(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>> CarParams::Builder::disownCarFw() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getRadarTimeStepDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 1028443341u);
}

inline float CarParams::Builder::getRadarTimeStepDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 1028443341u);
}
inline void CarParams::Builder::setRadarTimeStepDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 1028443341u);
}

inline bool CarParams::Reader::getCommunityFeatureDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getCommunityFeatureDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setCommunityFeatureDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerLimitTimer() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerLimitTimer() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerLimitTimer(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasLateralParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasLateralParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralParams::Reader CarParams::Reader::getLateralParams() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralParams::Builder CarParams::Builder::getLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParams::LateralParams::Pipeline CarParams::Pipeline::getLateralParams() {
  return  ::cereal::CarParams::LateralParams::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void CarParams::Builder::setLateralParams( ::cereal::CarParams::LateralParams::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralParams::Builder CarParams::Builder::initLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::adoptLateralParams(
    ::capnp::Orphan< ::cereal::CarParams::LateralParams>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralParams> CarParams::Builder::disownLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::cereal::CarParams::FingerprintSource CarParams::Reader::getFingerprintSource() const {
  return _reader.getDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::FingerprintSource CarParams::Builder::getFingerprintSource() {
  return _builder.getDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFingerprintSource( ::cereal::CarParams::FingerprintSource value) {
  _builder.setDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::NetworkLocation CarParams::Reader::getNetworkLocation() const {
  return _reader.getDataField< ::cereal::CarParams::NetworkLocation>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::NetworkLocation CarParams::Builder::getNetworkLocation() {
  return _builder.getDataField< ::cereal::CarParams::NetworkLocation>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setNetworkLocation( ::cereal::CarParams::NetworkLocation value) {
  _builder.setDataField< ::cereal::CarParams::NetworkLocation>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinSpeedCanDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinSpeedCanDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinSpeedCanDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStoppingDecelRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStoppingDecelRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStoppingDecelRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStartingAccelRateDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStartingAccelRateDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStartingAccelRateDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMaxSteeringAngleDegDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMaxSteeringAngleDegDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMaxSteeringAngleDegDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getFuzzyFingerprint() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getFuzzyFingerprint() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFuzzyFingerprint(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableBsm() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableBsm() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableBsm(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getHasStockCameraDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getHasStockCameraDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setHasStockCameraDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getLongitudinalActuatorDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getLongitudinalActuatorDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setLongitudinalActuatorDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getVEgoStarting() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getVEgoStarting() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setVEgoStarting(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStopAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStopAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStopAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getLongitudinalActuatorDelayLowerBoundDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getLongitudinalActuatorDelayLowerBoundDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setLongitudinalActuatorDelayLowerBoundDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasSafetyConfigs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSafetyConfigs() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader CarParams::Reader::getSafetyConfigs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::getSafetyConfigs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSafetyConfigs( ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>::Builder CarParams::Builder::initSafetyConfigs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSafetyConfigs(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>> CarParams::Builder::disownSafetyConfigs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::SafetyConfig,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getWheelSpeedFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getWheelSpeedFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setWheelSpeedFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CarParams::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::Reader::getAlternativeExperience() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::Builder::getAlternativeExperience() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setAlternativeExperience( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getNotCar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<992>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getNotCar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<992>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setNotCar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<992>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMaxLateralAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMaxLateralAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMaxLateralAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getAutoResumeSng() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<993>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getAutoResumeSng() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<993>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setAutoResumeSng(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<993>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getStartingState() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<994>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getStartingState() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<994>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStartingState(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<994>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getAlphaLongitudinalAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<995>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getAlphaLongitudinalAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<995>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setAlphaLongitudinalAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<995>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getPassive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<996>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getPassive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<996>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setPassive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<996>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getRadarDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getRadarDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRadarDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getSecOcRequired() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<997>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getSecOcRequired() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<997>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSecOcRequired(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<997>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getSecOcKeyAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<998>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getSecOcKeyAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<998>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSecOcKeyAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<998>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getSteerAtStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<999>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getSteerAtStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<999>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerAtStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<999>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::SafetyConfig::Reader::getSafetyModel() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::SafetyConfig::Builder::getSafetyModel() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::SafetyConfig::Builder::setSafetyModel( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::SafetyConfig::Reader::getSafetyParamDEPRECATED() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::SafetyConfig::Builder::getSafetyParamDEPRECATED() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::SafetyConfig::Builder::setSafetyParamDEPRECATED( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CarParams::SafetyConfig::Reader::getSafetyParam2DEPRECATED() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::SafetyConfig::Builder::getSafetyParam2DEPRECATED() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::SafetyConfig::Builder::setSafetyParam2DEPRECATED( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t CarParams::SafetyConfig::Reader::getSafetyParam() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t CarParams::SafetyConfig::Builder::getSafetyParam() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::SafetyConfig::Builder::setSafetyParam( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralParams::Reader::hasTorqueBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralParams::Builder::hasTorqueBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralParams::Reader::getTorqueBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::getTorqueBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralParams::Builder::setTorqueBP( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralParams::Builder::setTorqueBP(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::initTorqueBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralParams::Builder::adoptTorqueBP(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralParams::Builder::disownTorqueBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralParams::Reader::hasTorqueV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralParams::Builder::hasTorqueV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralParams::Reader::getTorqueV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::getTorqueV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralParams::Builder::setTorqueV( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralParams::Builder::setTorqueV(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralParams::Builder::initTorqueV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralParams::Builder::adoptTorqueV(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralParams::Builder::disownTorqueV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKpBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKpBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKpBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKpBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKpBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKpBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKpV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKpV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKpV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKpV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKpV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKpV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKiBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKiBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKiBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKiBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKiBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKiBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKiV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKiV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralPIDTuning::Reader::getKiV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::getKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKiV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralPIDTuning::Builder::initKiV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKiV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralPIDTuning::Builder::disownKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float CarParams::LateralPIDTuning::Reader::getKf() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralPIDTuning::Builder::getKf() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralPIDTuning::Builder::setKf(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralTorqueTuning::Reader::getUseSteeringAngleDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarParams::LateralTorqueTuning::Builder::getUseSteeringAngleDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setUseSteeringAngleDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getKp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getKp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setKp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getKi() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getKi() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setKi(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getFriction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getFriction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setFriction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getKf() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getKf() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setKf(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getSteeringAngleDeadzoneDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getSteeringAngleDeadzoneDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setSteeringAngleDeadzoneDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getLatAccelFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getLatAccelFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setLatAccelFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralTorqueTuning::Reader::getLatAccelOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralTorqueTuning::Builder::getLatAccelOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralTorqueTuning::Builder::setLatAccelOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKpBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKpBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKpBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKpBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKpBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKpV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKpV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKpV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKpV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKpV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKiBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKiBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKiBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKiBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKiBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKiV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKiV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getKiV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initKiV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKiV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasDeadzoneBPDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasDeadzoneBPDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getDeadzoneBPDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getDeadzoneBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneBPDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneBPDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initDeadzoneBPDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptDeadzoneBPDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownDeadzoneBPDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasDeadzoneVDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasDeadzoneVDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LongitudinalPIDTuning::Reader::getDeadzoneVDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::getDeadzoneVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneVDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneVDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LongitudinalPIDTuning::Builder::initDeadzoneVDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptDeadzoneVDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LongitudinalPIDTuning::Builder::disownDeadzoneVDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float CarParams::LongitudinalPIDTuning::Reader::getKf() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LongitudinalPIDTuning::Builder::getKf() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKf(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getOuterLoopGainDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getOuterLoopGainDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getInnerLoopGainDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getInnerLoopGainDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getTimeConstantDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getTimeConstantDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getActuatorEffectivenessDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getActuatorEffectivenessDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralINDITuning::Reader::hasOuterLoopGainBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasOuterLoopGainBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getOuterLoopGainBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getOuterLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initOuterLoopGainBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptOuterLoopGainBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownOuterLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasOuterLoopGainV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasOuterLoopGainV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getOuterLoopGainV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getOuterLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGainV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initOuterLoopGainV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptOuterLoopGainV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownOuterLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasInnerLoopGainBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasInnerLoopGainBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getInnerLoopGainBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getInnerLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initInnerLoopGainBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptInnerLoopGainBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownInnerLoopGainBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasInnerLoopGainV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasInnerLoopGainV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getInnerLoopGainV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getInnerLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGainV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initInnerLoopGainV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptInnerLoopGainV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownInnerLoopGainV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasTimeConstantBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasTimeConstantBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getTimeConstantBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getTimeConstantBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initTimeConstantBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptTimeConstantBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownTimeConstantBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasTimeConstantV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasTimeConstantV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getTimeConstantV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getTimeConstantV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstantV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initTimeConstantV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptTimeConstantV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownTimeConstantV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasActuatorEffectivenessBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasActuatorEffectivenessBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getActuatorEffectivenessBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getActuatorEffectivenessBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessBP( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initActuatorEffectivenessBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptActuatorEffectivenessBP(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownActuatorEffectivenessBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralINDITuning::Reader::hasActuatorEffectivenessV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralINDITuning::Builder::hasActuatorEffectivenessV() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralINDITuning::Reader::getActuatorEffectivenessV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::getActuatorEffectivenessV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessV( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectivenessV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralINDITuning::Builder::initActuatorEffectivenessV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralINDITuning::Builder::adoptActuatorEffectivenessV(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralINDITuning::Builder::disownActuatorEffectivenessV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float CarParams::LateralLQRTuning::Reader::getScale() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getScale() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setScale(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getKi() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getKi() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setKi(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getDcGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getDcGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setDcGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralLQRTuning::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setA( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setA(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasB() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasB() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getB() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getB() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setB( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setB(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initB(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptB(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownB() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasC() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setC( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptC(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasK() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasK() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getK() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getK() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setK( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setK(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initK(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptK(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownK() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasL() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasL() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader CarParams::LateralLQRTuning::Reader::getL() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::getL() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setL( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setL(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder CarParams::LateralLQRTuning::Builder::initL(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptL(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> CarParams::LateralLQRTuning::Builder::disownL() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::cereal::CarParams::Ecu CarParams::CarFw::Reader::getEcu() const {
  return _reader.getDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::Ecu CarParams::CarFw::Builder::getEcu() {
  return _builder.getDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setEcu( ::cereal::CarParams::Ecu value) {
  _builder.setDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::CarFw::Reader::hasFwVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::CarFw::Builder::hasFwVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CarParams::CarFw::Reader::getFwVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CarParams::CarFw::Builder::getFwVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::CarFw::Builder::setFwVersion( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CarParams::CarFw::Builder::initFwVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::CarFw::Builder::adoptFwVersion(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CarParams::CarFw::Builder::disownFwVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t CarParams::CarFw::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::CarFw::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CarParams::CarFw::Reader::getSubAddress() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CarParams::CarFw::Builder::getSubAddress() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setSubAddress( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CarParams::CarFw::Reader::getResponseAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::CarFw::Builder::getResponseAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setResponseAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::CarFw::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::CarFw::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader CarParams::CarFw::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder CarParams::CarFw::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::CarFw::Builder::setRequest( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::CarFw::Builder::setRequest(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder CarParams::CarFw::Builder::initRequest(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::CarFw::Builder::adoptRequest(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> CarParams::CarFw::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::CarFw::Reader::hasBrand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::CarFw::Builder::hasBrand() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::CarFw::Reader::getBrand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::CarFw::Builder::getBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::CarFw::Builder::setBrand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::CarFw::Builder::initBrand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::CarFw::Builder::adoptBrand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::CarFw::Builder::disownBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t CarParams::CarFw::Reader::getBus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CarParams::CarFw::Builder::getBus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setBus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::CarFw::Reader::getLogging() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool CarParams::CarFw::Builder::getLogging() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setLogging(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::CarFw::Reader::getObdMultiplexing() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool CarParams::CarFw::Builder::getObdMultiplexing() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setObdMultiplexing(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::LateralTuning::Which CarParams::LateralTuning::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::cereal::CarParams::LateralTuning::Which CarParams::LateralTuning::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarParams::LateralTuning::Reader::isPid() const {
  return which() == CarParams::LateralTuning::PID;
}
inline bool CarParams::LateralTuning::Builder::isPid() {
  return which() == CarParams::LateralTuning::PID;
}
inline bool CarParams::LateralTuning::Reader::hasPid() const {
  if (which() != CarParams::LateralTuning::PID) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasPid() {
  if (which() != CarParams::LateralTuning::PID) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralPIDTuning::Reader CarParams::LateralTuning::Reader::getPid() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralPIDTuning::Builder CarParams::LateralTuning::Builder::getPid() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setPid( ::cereal::CarParams::LateralPIDTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralPIDTuning::Builder CarParams::LateralTuning::Builder::initPid() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptPid(
    ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning> CarParams::LateralTuning::Builder::disownPid() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isIndiDEPRECATED() const {
  return which() == CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D;
}
inline bool CarParams::LateralTuning::Builder::isIndiDEPRECATED() {
  return which() == CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D;
}
inline bool CarParams::LateralTuning::Reader::hasIndiDEPRECATED() const {
  if (which() != CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasIndiDEPRECATED() {
  if (which() != CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralINDITuning::Reader CarParams::LateralTuning::Reader::getIndiDEPRECATED() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralINDITuning::Builder CarParams::LateralTuning::Builder::getIndiDEPRECATED() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setIndiDEPRECATED( ::cereal::CarParams::LateralINDITuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralINDITuning::Builder CarParams::LateralTuning::Builder::initIndiDEPRECATED() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptIndiDEPRECATED(
    ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning> CarParams::LateralTuning::Builder::disownIndiDEPRECATED() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isLqrDEPRECATED() const {
  return which() == CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D;
}
inline bool CarParams::LateralTuning::Builder::isLqrDEPRECATED() {
  return which() == CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D;
}
inline bool CarParams::LateralTuning::Reader::hasLqrDEPRECATED() const {
  if (which() != CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasLqrDEPRECATED() {
  if (which() != CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralLQRTuning::Reader CarParams::LateralTuning::Reader::getLqrDEPRECATED() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralLQRTuning::Builder CarParams::LateralTuning::Builder::getLqrDEPRECATED() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setLqrDEPRECATED( ::cereal::CarParams::LateralLQRTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralLQRTuning::Builder CarParams::LateralTuning::Builder::initLqrDEPRECATED() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptLqrDEPRECATED(
    ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning> CarParams::LateralTuning::Builder::disownLqrDEPRECATED() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isTorque() const {
  return which() == CarParams::LateralTuning::TORQUE;
}
inline bool CarParams::LateralTuning::Builder::isTorque() {
  return which() == CarParams::LateralTuning::TORQUE;
}
inline bool CarParams::LateralTuning::Reader::hasTorque() const {
  if (which() != CarParams::LateralTuning::TORQUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasTorque() {
  if (which() != CarParams::LateralTuning::TORQUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralTorqueTuning::Reader CarParams::LateralTuning::Reader::getTorque() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::TORQUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralTorqueTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralTorqueTuning::Builder CarParams::LateralTuning::Builder::getTorque() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::TORQUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralTorqueTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setTorque( ::cereal::CarParams::LateralTorqueTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::TORQUE);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralTorqueTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralTorqueTuning::Builder CarParams::LateralTuning::Builder::initTorque() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::TORQUE);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralTorqueTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptTorque(
    ::capnp::Orphan< ::cereal::CarParams::LateralTorqueTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::TORQUE);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralTorqueTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralTorqueTuning> CarParams::LateralTuning::Builder::disownTorque() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::TORQUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralTorqueTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

